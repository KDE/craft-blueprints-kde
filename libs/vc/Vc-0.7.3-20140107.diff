diff -Nru -x '*~' Vc-0.7.3.orig/cmake/VcMacros.cmake Vc-0.7.3/cmake/VcMacros.cmake
--- Vc-0.7.3.orig/cmake/VcMacros.cmake	2013-09-09 08:23:27.000000000 +0200
+++ Vc-0.7.3/cmake/VcMacros.cmake	2014-01-07 12:07:17.342796900 +0100
@@ -44,7 +44,7 @@
 
 macro(vc_determine_compiler)
    if(NOT DEFINED Vc_COMPILER_IS_INTEL)
-      execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "--version" OUTPUT_VARIABLE _cxx_compiler_version ERROR_VARIABLE _cxx_compiler_version)
+      execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "${CMAKE_CXX_COMPILER_ARG1}" "--version" OUTPUT_VARIABLE _cxx_compiler_version ERROR_VARIABLE _cxx_compiler_version)
       set(Vc_COMPILER_IS_INTEL false)
       set(Vc_COMPILER_IS_OPEN64 false)
       set(Vc_COMPILER_IS_CLANG false)
@@ -52,14 +52,14 @@
       set(Vc_COMPILER_IS_GCC false)
       if(CMAKE_CXX_COMPILER MATCHES "/(icpc|icc)$")
          set(Vc_COMPILER_IS_INTEL true)
-         exec_program(${CMAKE_C_COMPILER} ARGS -dumpversion OUTPUT_VARIABLE Vc_ICC_VERSION)
+         exec_program(${CMAKE_C_COMPILER} ARGS ${CMAKE_C_COMPILER_ARG1} -dumpversion OUTPUT_VARIABLE Vc_ICC_VERSION)
          message(STATUS "Detected Compiler: Intel ${Vc_ICC_VERSION}")
       elseif(CMAKE_CXX_COMPILER MATCHES "(opencc|openCC)$")
          set(Vc_COMPILER_IS_OPEN64 true)
          message(STATUS "Detected Compiler: Open64")
       elseif(CMAKE_CXX_COMPILER MATCHES "clang\\+\\+$" OR "${_cxx_compiler_version}" MATCHES "clang")
          set(Vc_COMPILER_IS_CLANG true)
-         exec_program(${CMAKE_CXX_COMPILER} ARGS --version OUTPUT_VARIABLE Vc_CLANG_VERSION)
+         exec_program(${CMAKE_CXX_COMPILER} ARGS ${CMAKE_CXX_COMPILER_ARG1} --version OUTPUT_VARIABLE Vc_CLANG_VERSION)
          string(REGEX MATCH "[0-9]+\\.[0-9]+(\\.[0-9]+)?" Vc_CLANG_VERSION "${Vc_CLANG_VERSION}")
          message(STATUS "Detected Compiler: Clang ${Vc_CLANG_VERSION}")
       elseif(MSVC)
@@ -67,13 +67,13 @@
          message(STATUS "Detected Compiler: MSVC ${MSVC_VERSION}")
       elseif(CMAKE_COMPILER_IS_GNUCXX)
          set(Vc_COMPILER_IS_GCC true)
-         exec_program(${CMAKE_C_COMPILER} ARGS -dumpversion OUTPUT_VARIABLE Vc_GCC_VERSION)
+         exec_program(${CMAKE_C_COMPILER} ARGS ${CMAKE_C_COMPILER_ARG1} -dumpversion OUTPUT_VARIABLE Vc_GCC_VERSION)
          message(STATUS "Detected Compiler: GCC ${Vc_GCC_VERSION}")
 
          # some distributions patch their GCC to return nothing or only major and minor version on -dumpversion.
          # In that case we must extract the version number from --version.
          if(NOT Vc_GCC_VERSION OR Vc_GCC_VERSION MATCHES "^[0-9]\\.[0-9]+$")
-            exec_program(${CMAKE_C_COMPILER} ARGS --version OUTPUT_VARIABLE Vc_GCC_VERSION)
+            exec_program(${CMAKE_C_COMPILER} ARGS ${CMAKE_C_COMPILER_ARG1} --version OUTPUT_VARIABLE Vc_GCC_VERSION)
             string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]+" Vc_GCC_VERSION "${Vc_GCC_VERSION}")
             message(STATUS "GCC Version from --version: ${Vc_GCC_VERSION}")
          endif()
@@ -87,7 +87,7 @@
             execute_process(COMMAND ${_lsb_release} -rs OUTPUT_VARIABLE _distributor_release OUTPUT_STRIP_TRAILING_WHITESPACE)
             string(TOUPPER "${_distributor_id}" _distributor_id)
             if(_distributor_id STREQUAL "UBUNTU")
-               execute_process(COMMAND ${CMAKE_C_COMPILER} --version OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE _gcc_version)
+               execute_process(COMMAND ${CMAKE_C_COMPILER} ${CMAKE_C_COMPILER_ARG1} --version OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE _gcc_version)
                string(REGEX MATCH "\\(.* ${Vc_GCC_VERSION}-([0-9]+).*\\)" _tmp "${_gcc_version}")
                if(_tmp)
                   set(_patch ${CMAKE_MATCH_1})
@@ -138,7 +138,7 @@
       if(${ARGC} EQUAL 1)
          set(_as "${ARGV1}")
       else()
-         exec_program(${CMAKE_CXX_COMPILER} ARGS -print-prog-name=as OUTPUT_VARIABLE _as)
+         exec_program(${CMAKE_CXX_COMPILER} ARGS ${CMAKE_CXX_COMPILER_ARG1} -print-prog-name=as OUTPUT_VARIABLE _as)
          mark_as_advanced(_as)
       endif()
       if(NOT _as)
@@ -166,7 +166,7 @@
    include (CheckCXXSourceRuns)
    check_cxx_source_runs("int main() { return sizeof(void*) != 8; }" Vc_VOID_PTR_IS_64BIT)
    if(NOT Vc_VOID_PTR_IS_64BIT)
-      exec_program(${CMAKE_C_COMPILER} ARGS -dumpmachine OUTPUT_VARIABLE _gcc_machine)
+      exec_program(${CMAKE_C_COMPILER} ARGS ${CMAKE_C_COMPILER_ARG1} -dumpmachine OUTPUT_VARIABLE _gcc_machine)
       if(_gcc_machine MATCHES "[x34567]86" OR _gcc_machine STREQUAL "mingw32")
          vc_add_compiler_flag(Vc_DEFINITIONS "-mfpmath=sse")
       endif()
@@ -445,7 +445,7 @@
             set(_out "${_out}_${_impl}${_ext}.o")
          endif()
          add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${_out}
-            COMMAND ${CMAKE_CXX_COMPILER} ${_flags} ${_extra_flags}
+            COMMAND ${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1} ${_flags} ${_extra_flags}
             -DVC_IMPL=${_impl}
             ${_outfile_flag}${_out} ${CMAKE_CURRENT_SOURCE_DIR}/${_vc_compile_src}
             MAIN_DEPENDENCY ${CMAKE_CURRENT_SOURCE_DIR}/${_vc_compile_src}
diff -Nru -x '*~' Vc-0.7.3.orig/tests/deinterleave.cpp Vc-0.7.3/tests/deinterleave.cpp
--- Vc-0.7.3.orig/tests/deinterleave.cpp	2013-09-09 08:23:27.000000000 +0200
+++ Vc-0.7.3/tests/deinterleave.cpp	2014-01-07 12:24:58.433344000 +0100
@@ -77,7 +77,7 @@
         // note that a 32 bit integer is certainly enough to decide on alignment...
         // ... but uintptr_t is C99 but not C++ yet
         // ... and GCC refuses to do the cast, even if I know what I'm doing
-        if (reinterpret_cast<unsigned long>(&memory[i]) & (VectorAlignment - 1)) {
+        if (reinterpret_cast<uintptr_t>(&memory[i]) & (VectorAlignment - 1)) {
             Vc::deinterleave(&a, &b, &memory[i], Unaligned);
         } else {
             Vc::deinterleave(&a, &b, &memory[i]);
diff -Nru -x '*~' Vc-0.7.3.orig/tests/utils.cpp Vc-0.7.3/tests/utils.cpp
--- Vc-0.7.3.orig/tests/utils.cpp	2013-09-09 08:23:27.000000000 +0200
+++ Vc-0.7.3/tests/utils.cpp	2014-01-07 12:35:38.467338900 +0100
@@ -358,9 +358,9 @@
 {
     int_v *a = Vc::malloc<int_v, Vc::AlignOnVector>(10);
 
-    unsigned long mask = VectorAlignment - 1;
+    uintptr_t mask = VectorAlignment - 1;
     for (int i = 0; i < 10; ++i) {
-        VERIFY((reinterpret_cast<unsigned long>(&a[i]) & mask) == 0);
+        VERIFY((reinterpret_cast<uintptr_t>(&a[i]) & mask) == 0);
     }
     const char *data = reinterpret_cast<const char *>(&a[0]);
     for (int i = 0; i < 10; ++i) {
@@ -369,13 +369,13 @@
 
     a = Vc::malloc<int_v, Vc::AlignOnCacheline>(10);
     mask = CpuId::cacheLineSize() - 1;
-    COMPARE((reinterpret_cast<unsigned long>(&a[0]) & mask), 0ul);
+    COMPARE((reinterpret_cast<uintptr_t>(&a[0]) & mask), 0ul);
 
     // I don't know how to properly check page alignment. So we check for 4 KiB alignment as this is
     // the minimum page size on x86
     a = Vc::malloc<int_v, Vc::AlignOnPage>(10);
     mask = 4096 - 1;
-    COMPARE((reinterpret_cast<unsigned long>(&a[0]) & mask), 0ul);
+    COMPARE((reinterpret_cast<uintptr_t>(&a[0]) & mask), 0ul);
 }
 
 int main()
diff -Nru -x '*~' Vc-0.7.3.orig/tests/vectormemoryhelper.h Vc-0.7.3/tests/vectormemoryhelper.h
--- Vc-0.7.3.orig/tests/vectormemoryhelper.h	2013-09-09 08:23:27.000000000 +0200
+++ Vc-0.7.3/tests/vectormemoryhelper.h	2014-01-07 12:26:07.399634200 +0100
@@ -30,7 +30,7 @@
     public:
         VectorMemoryHelper(int count)
             : mem(new char[count * sizeof(Vec) + Vc::VectorAlignment]),
-            aligned(mem + (Vc::VectorAlignment - (reinterpret_cast<unsigned long>( mem ) & ( Vc::VectorAlignment - 1 ))))
+            aligned(mem + (Vc::VectorAlignment - (reinterpret_cast<uintptr_t>( mem ) & ( Vc::VectorAlignment - 1 ))))
         {
         }
         ~VectorMemoryHelper() { delete[] mem; }
