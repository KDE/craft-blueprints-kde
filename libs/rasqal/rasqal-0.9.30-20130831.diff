diff -Nru -x '*~' rasqal-0.9.30.orig/cmake/config.cpp.in rasqal-0.9.30/cmake/config.cpp.in
--- rasqal-0.9.30.orig/cmake/config.cpp.in	1970-01-01 01:00:00.000000000 +0100
+++ rasqal-0.9.30/cmake/config.cpp.in	2013-12-16 19:26:05.982618000 +0100
@@ -0,0 +1,27 @@
+#include <stdio.h>
+#include <string.h>
+#include <@PROGRAMM@.h>
+
+int main(int argc, char **argv)
+{
+    if(argc != 2)
+        return 1;
+    if(strcmp(argv[1], "--version") == 0) {
+        fprintf(stdout, "%s", @PROGRAMM@_version_string);
+        return 0;
+    }
+    if(strcmp(argv[1], "--version-decimal") == 0) {
+        fprintf(stdout, "%d", @PROGRAMM@_version_decimal);
+        return 0;
+    }
+    if(strcmp(argv[1], "--cflags") == 0) {
+        fprintf(stdout, "\n");
+        return 0;
+    }
+    if(strcmp(argv[1], "--libs") == 0) {
+        fprintf(stdout, "\n");
+        return 0;
+    }
+    return 1;
+}
+
diff -Nru -x '*~' rasqal-0.9.30.orig/cmake/FindLibraryWithDebug.cmake rasqal-0.9.30/cmake/FindLibraryWithDebug.cmake
--- rasqal-0.9.30.orig/cmake/FindLibraryWithDebug.cmake	1970-01-01 01:00:00.000000000 +0100
+++ rasqal-0.9.30/cmake/FindLibraryWithDebug.cmake	2013-12-16 19:26:05.990620600 +0100
@@ -0,0 +1,112 @@
+#
+#  FIND_LIBRARY_WITH_DEBUG
+#  -> enhanced FIND_LIBRARY to allow the search for an
+#     optional debug library with a WIN32_DEBUG_POSTFIX similar
+#     to CMAKE_DEBUG_POSTFIX when creating a shared lib
+#     it has to be the second and third argument
+#
+# Copyright (c) 2007, Christian Ehrlicher, <ch.ehrlicher@gmx.de>
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+MACRO(FIND_LIBRARY_WITH_DEBUG var_name win32_dbg_postfix_name dgb_postfix libname)
+
+  IF(NOT ${win32_dbg_postfix_name} STREQUAL "WIN32_DEBUG_POSTFIX")
+
+    # no WIN32_DEBUG_POSTFIX -> simply pass all arguments to FIND_LIBRARY
+    FIND_LIBRARY(${var_name}
+                 ${win32_dbg_postfix_name}
+                 ${dgb_postfix}
+                 ${libname}
+                 ${ARGN}
+    )
+
+  ELSE(NOT ${win32_dbg_postfix_name} STREQUAL "WIN32_DEBUG_POSTFIX")
+
+   IF(NOT WIN32)
+     # on non-win32 we don't need to take care about WIN32_DEBUG_POSTFIX
+
+     FIND_LIBRARY(${var_name} ${libname} ${ARGN})
+
+   ELSE(NOT WIN32)
+
+     # 1. get all possible libnames
+     SET(args ${ARGN})
+     SET(libnames_release "")
+     SET(libnames_debug "")
+
+     LIST(LENGTH args listCount)
+
+     IF("${libname}" STREQUAL "NAMES")
+       SET(append_rest 0)
+       LIST(APPEND args " ")
+
+       FOREACH(i RANGE ${listCount})
+         LIST(GET args ${i} val)
+
+         IF(append_rest)
+           LIST(APPEND newargs ${val})
+         ELSE(append_rest)
+           IF("${val}" STREQUAL "PATHS")
+             LIST(APPEND newargs ${val})
+             SET(append_rest 1)
+           ELSE("${val}" STREQUAL "PATHS")
+             LIST(APPEND libnames_release "${val}")
+             LIST(APPEND libnames_debug   "${val}${dgb_postfix}")
+           ENDIF("${val}" STREQUAL "PATHS")
+         ENDIF(append_rest)
+
+       ENDFOREACH(i)
+
+     ELSE("${libname}" STREQUAL "NAMES")
+
+       # just one name
+       LIST(APPEND libnames_release "${libname}")
+       LIST(APPEND libnames_debug   "${libname}${dgb_postfix}")
+
+       SET(newargs ${args})
+
+     ENDIF("${libname}" STREQUAL "NAMES")
+
+     # search the release lib
+     FIND_LIBRARY(${var_name}_RELEASE
+                  NAMES ${libnames_release}
+                  ${newargs}
+     )
+
+     # search the debug lib
+     FIND_LIBRARY(${var_name}_DEBUG
+                  NAMES ${libnames_debug}
+                  ${newargs}
+     )
+
+     IF(${var_name}_RELEASE AND ${var_name}_DEBUG)
+
+       # both libs found
+       SET(${var_name} optimized ${${var_name}_RELEASE}
+                       debug     ${${var_name}_DEBUG})
+
+     ELSE(${var_name}_RELEASE AND ${var_name}_DEBUG)
+
+       IF(${var_name}_RELEASE)
+
+         # only release found
+         SET(${var_name} ${${var_name}_RELEASE})
+
+       ELSE(${var_name}_RELEASE)
+
+         # only debug (or nothing) found
+         SET(${var_name} ${${var_name}_DEBUG})
+
+       ENDIF(${var_name}_RELEASE)
+       
+     ENDIF(${var_name}_RELEASE AND ${var_name}_DEBUG)
+
+     MARK_AS_ADVANCED(${var_name}_RELEASE)
+     MARK_AS_ADVANCED(${var_name}_DEBUG)
+
+   ENDIF(NOT WIN32)
+
+  ENDIF(NOT ${win32_dbg_postfix_name} STREQUAL "WIN32_DEBUG_POSTFIX")
+
+ENDMACRO(FIND_LIBRARY_WITH_DEBUG)
diff -Nru -x '*~' rasqal-0.9.30.orig/cmake/FindPCRE.cmake rasqal-0.9.30/cmake/FindPCRE.cmake
--- rasqal-0.9.30.orig/cmake/FindPCRE.cmake	1970-01-01 01:00:00.000000000 +0100
+++ rasqal-0.9.30/cmake/FindPCRE.cmake	2013-12-16 19:26:05.994619800 +0100
@@ -0,0 +1,45 @@
+# - Try to find the PCRE regular expression library
+# Once done this will define
+#
+#  PCRE_FOUND - system has the PCRE library
+#  PCRE_INCLUDE_DIR - the PCRE include directory
+#  PCRE_LIBRARIES - The libraries needed to use PCRE
+
+# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+
+if (PCRE_INCLUDE_DIR AND PCRE_PCREPOSIX_LIBRARY AND PCRE_PCRE_LIBRARY)
+  # Already in cache, be silent
+  set(PCRE_FIND_QUIETLY TRUE)
+endif (PCRE_INCLUDE_DIR AND PCRE_PCREPOSIX_LIBRARY AND PCRE_PCRE_LIBRARY)
+
+
+if (NOT WIN32)
+  # use pkg-config to get the directories and then use these values
+  # in the FIND_PATH() and FIND_LIBRARY() calls
+  find_package(PkgConfig)
+
+  pkg_check_modules(PC_PCRE libpcre)
+
+  set(PCRE_DEFINITIONS ${PC_PCRE_CFLAGS_OTHER})
+
+endif (NOT WIN32)
+
+find_path(PCRE_INCLUDE_DIR pcre.h
+          HINTS ${PC_PCRE_INCLUDEDIR} ${PC_PCRE_INCLUDE_DIRS}
+          PATH_SUFFIXES pcre)
+
+find_library(PCRE_PCRE_LIBRARY NAMES libpcre libpcred pcre pcred HINTS ${PC_PCRE_LIBDIR} ${PC_PCRE_LIBRARY_DIRS})
+
+find_library(PCRE_PCREPOSIX_LIBRARY NAMES pcreposix pcreposixd HINTS ${PC_PCRE_LIBDIR} ${PC_PCRE_LIBRARY_DIRS})
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(PCRE DEFAULT_MSG PCRE_INCLUDE_DIR PCRE_PCRE_LIBRARY PCRE_PCREPOSIX_LIBRARY )
+
+set(PCRE_LIBRARIES ${PCRE_PCRE_LIBRARY} ${PCRE_PCREPOSIX_LIBRARY})
+
+mark_as_advanced(PCRE_INCLUDE_DIR PCRE_LIBRARIES PCRE_PCREPOSIX_LIBRARY PCRE_PCRE_LIBRARY)
+
diff -Nru -x '*~' rasqal-0.9.30.orig/cmake/FindRaptor.cmake rasqal-0.9.30/cmake/FindRaptor.cmake
--- rasqal-0.9.30.orig/cmake/FindRaptor.cmake	1970-01-01 01:00:00.000000000 +0100
+++ rasqal-0.9.30/cmake/FindRaptor.cmake	2013-12-16 19:26:05.998691700 +0100
@@ -0,0 +1,100 @@
+# - Try to find the Raptor RDF parsing library (http://librdf.org/raptor/)
+# Once done this will define
+#
+#  RAPTOR_FOUND       - system has Raptor
+#  RAPTOR_LIBRARIES   - Link these to use Raptor
+#  RAPTOR_INCLUDE_DIR - Include directory for using Raptor
+#  RAPTOR_DEFINITIONS - Compiler switches required for using Raptor
+#
+#  Capabilities
+#       RAPTOR_HAVE_TRIG   - Set if raptor has TRIG
+
+# (c) 2007-2011 Sebastian Trueg <trueg@kde.org>
+# (c) 2011 Artem Serebriyskiy <v.for.vandal@gmail.com>
+# (c) 2011 Michael Jansen <kde@michael-jansen.biz>
+#
+# Based on FindFontconfig Copyright (c) 2006,2007 Laurent Montel, <montel@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+
+MACRO ( FIND_RAPTOR libname libhints includehints )
+    find_library_with_debug(
+        RAPTOR_LIBRARIES
+        WIN32_DEBUG_POSTFIX d
+        NAMES ${libname}
+        HINTS ${libhints})
+    find_path(
+        RAPTOR_INCLUDE_DIR raptor.h
+        HINTS ${includehints}
+        PATH_SUFFIXES ${libname})
+ENDMACRO ()
+
+
+
+# Check if we have cached results in case the last round was successful.
+if ( NOT( RAPTOR_INCLUDE_DIR AND RAPTOR_LIBRARIES ) OR NOT RAPTOR_FOUND )
+
+    include(FindLibraryWithDebug)
+    include(MacroEnsureVersion)
+    find_package(PkgConfig)
+
+    # Vy default look for version 2.0
+    if (NOT Raptor_FIND_VERSION )
+        set( Raptor_FIND_VERSION "2.0")
+        set( Raptor_FIND_VERSION_MAJOR "2" )
+        set( Raptor_FIND_VERSION_MINOR "0" )
+    endif ()
+
+    if ( Raptor_FIND_VERSION_MAJOR EQUAL "2" )
+
+        if ( NOT WIN32 )
+            pkg_check_modules(PC_RAPTOR2 raptor2)
+            if ( PC_RAPTOR2_FOUND )
+                set(RAPTOR_DEFINITIONS ${PC_RAPTOR2_CFLAGS_OTHER})
+                set(RAPTOR_VERSION ${PC_RAPTOR2_VERSION} CACHE STRING "Raptor Version found" )
+            endif ()
+        endif ()
+        find_raptor( raptor2 "${PC_RAPTOR2_LIBDIR};${PC_RAPTOR2_LIBRARY_DIRS}" "${PC_RAPTOR2_INCLUDEDIR};${PC_RAPTOR2_INCLUDE_DIRS}")
+
+    elseif ( Raptor_FIND_VERSION_MAJOR EQUAL "1" )
+
+        if ( NOT WIN32 )
+            pkg_check_modules(PC_RAPTOR raptor)
+            if ( PC_RAPTOR_FOUND )
+                set(RAPTOR_DEFINITIONS ${PC_RAPTOR_CFLAGS_OTHER})
+                set(RAPTOR_VERSION ${PC_RAPTOR_VERSION} CACHE STRING "Raptor Version found" )
+            endif ()
+        endif ()
+        find_raptor( raptor "${PC_RAPTOR_LIBDIR};${PC_RAPTOR_LIBRARY_DIRS}" "${PC_RAPTOR_INCLUDEDIR};${PC_RAPTOR_INCLUDE_DIRS}")
+
+    else ()
+
+        message( FATAL_ERROR "No idea how to check for version : ${Raptor_FIND_VERSION}")
+
+    endif()
+
+    if (RAPTOR_VERSION)
+        MACRO_ENSURE_VERSION("1.4.16" ${RAPTOR_VERSION} RAPTOR_HAVE_TRIG)
+    endif (RAPTOR_VERSION)
+
+    mark_as_advanced(RAPTOR_INCLUDE_DIR RAPTOR_LIBRARIES)
+
+endif () # Check for cached values
+
+include(FindPackageHandleStandardArgs)
+
+find_package_handle_standard_args(
+    Raptor
+    RAPTOR_LIBRARIES RAPTOR_INCLUDE_DIR)
+
+mark_as_advanced(RAPTOR_VERSION)
+
+if (NOT RAPTOR_FOUND AND Raptor_FIND_VERSION_MAJOR EQUAL "2" AND NOT Raptor_FIND_QUIET )
+    pkg_check_modules(PC_RAPTOR raptor)
+    if (PC_RAPTOR_FOUND)
+        message( STATUS "You have raptor1 version ${PC_RAPTOR_VERSION} installed. Please update." )
+    endif ()
+endif ()
+
diff -Nru -x '*~' rasqal-0.9.30.orig/cmake/MacroEnsureVersion.cmake rasqal-0.9.30/cmake/MacroEnsureVersion.cmake
--- rasqal-0.9.30.orig/cmake/MacroEnsureVersion.cmake	1970-01-01 01:00:00.000000000 +0100
+++ rasqal-0.9.30/cmake/MacroEnsureVersion.cmake	2013-12-16 19:26:06.002691800 +0100
@@ -0,0 +1,71 @@
+# This macro compares version numbers of the form "x.y.z"
+# MACRO_ENSURE_VERSION( FOO_MIN_VERSION FOO_VERSION_FOUND FOO_VERSION_OK)
+# will set FOO_VERSIN_OK to true if FOO_VERSION_FOUND >= FOO_MIN_VERSION
+# where both have to be in a 3-part-version format, leading and trailing
+# text is ok, e.g.
+# MACRO_ENSURE_VERSION( "2.5.31" "flex 2.5.4a" VERSION_OK)
+# which means 2.5.31 is required and "flex 2.5.4a" is what was found on the system
+
+# Copyright (c) 2006, David Faure, <faure@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+MACRO(MACRO_ENSURE_VERSION requested_version found_version var_too_old)
+
+    # parse the parts of the version string
+    STRING(REGEX REPLACE "([0-9]+)\\.[0-9]+\\.[0-9]+" "\\1" req_major_vers "${requested_version}")
+    STRING(REGEX REPLACE "[0-9]+\\.([0-9]+)\\.[0-9]+" "\\1" req_minor_vers "${requested_version}")
+    STRING(REGEX REPLACE "[0-9]+\\.[0-9]+\\.([0-9]+)" "\\1" req_patch_vers "${requested_version}")
+
+    STRING(REGEX REPLACE "[^0-9]*([0-9]+)\\.[0-9]+\\.[0-9]+.*" "\\1" found_major_vers "${found_version}")
+    STRING(REGEX REPLACE "[^0-9]*[0-9]+\\.([0-9]+)\\.[0-9]+.*" "\\1" found_minor_vers "${found_version}")
+    STRING(REGEX REPLACE "[^0-9]*[0-9]+\\.[0-9]+\\.([0-9]+).*" "\\1" found_patch_vers "${found_version}")
+
+    # compute an overall version number which can be compared at once
+    MATH(EXPR req_vers_num "${req_major_vers}*10000 + ${req_minor_vers}*100 + ${req_patch_vers}")
+    MATH(EXPR found_vers_num "${found_major_vers}*10000 + ${found_minor_vers}*100 + ${found_patch_vers}")
+
+    if (found_vers_num LESS req_vers_num)
+        set( ${var_too_old} FALSE )
+    else (found_vers_num LESS req_vers_num)
+        set( ${var_too_old} TRUE )
+    endif (found_vers_num LESS req_vers_num)
+
+ENDMACRO(MACRO_ENSURE_VERSION)
+
+
+# This macro compares version numbers of the form "x.y"
+# MACRO_ENSURE_VERSION( FOO_MIN_VERSION FOO_VERSION_FOUND FOO_VERSION_OK)
+# will set FOO_VERSIN_OK to true if FOO_VERSION_FOUND >= FOO_MIN_VERSION
+# where both have to be in a 2-part-version format, leading and trailing
+# text is ok, e.g.
+# MACRO_ENSURE_VERSION( "0.5" "foo 0.6" VERSION_OK)
+# which means 0.5 is required and "foo 0.6" is what was found on the system
+
+# Copyright (c) 2006, David Faure, <faure@kde.org>
+# Copyright (c) 2007, Pino Toscano, <pino@kde.org>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+MACRO(MACRO_ENSURE_VERSION2 requested_version found_version var_too_old)
+
+    # parse the parts of the version string
+    STRING(REGEX REPLACE "([0-9]+)\\.[0-9]+" "\\1" req_major_vers "${requested_version}")
+    STRING(REGEX REPLACE "[0-9]+\\.([0-9]+)" "\\1" req_minor_vers "${requested_version}")
+
+    STRING(REGEX REPLACE "[^0-9]*([0-9]+)\\.[0-9]+.*" "\\1" found_major_vers "${found_version}")
+    STRING(REGEX REPLACE "[^0-9]*[0-9]+\\.([0-9]+).*" "\\1" found_minor_vers "${found_version}")
+
+    # compute an overall version number which can be compared at once
+    MATH(EXPR req_vers_num "${req_major_vers}*100 + ${req_minor_vers}")
+    MATH(EXPR found_vers_num "${found_major_vers}*100 + ${found_minor_vers}")
+
+    if (found_vers_num LESS req_vers_num)
+        set( ${var_too_old} FALSE )
+    else (found_vers_num LESS req_vers_num)
+        set( ${var_too_old} TRUE )
+    endif (found_vers_num LESS req_vers_num)
+
+ENDMACRO(MACRO_ENSURE_VERSION2)
diff -Nru -x '*~' rasqal-0.9.30.orig/CMakeLists.txt rasqal-0.9.30/CMakeLists.txt
--- rasqal-0.9.30.orig/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ rasqal-0.9.30/CMakeLists.txt	2013-12-16 19:27:36.937019300 +0100
@@ -0,0 +1,227 @@
+project(rasqal)
+
+cmake_minimum_required(VERSION 2.8)
+
+set(RASQAL_VERSION_MAJOR 0)
+set(RASQAL_VERSION_MINOR 9)
+set(RASQAL_VERSION_RELEASE 30)
+set(VERSION ${RASQAL_VERSION_MAJOR}.${RASQAL_VERSION_MINOR}.${RASQAL_VERSION_RELEASE})
+math(EXPR RASQAL_VERSION_DECIMAL "${RASQAL_VERSION_MAJOR} * 10000 + ${RASQAL_VERSION_MINOR} * 100 + ${RASQAL_VERSION_RELEASE}")
+
+set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
+
+find_package(PCRE REQUIRED)
+find_package(Raptor 2.0.4 REQUIRED)
+
+option(BUILD_EXAMPLES "build the examples" ON)
+option(BUILD_TOOLS "build commandline utilities" ON)
+option(BUILD_TESTS "build test executables" ON)
+
+if(BUILD_TESTS)
+    enable_testing()
+endif(BUILD_TESTS)
+
+set(rasqal_SRCS
+    src/rasqal_algebra.c
+    src/rasqal_bindings.c
+    src/rasqal_data_graph.c
+    src/rasqal_dataset.c
+    src/rasqal_datetime.c
+    src/rasqal_decimal.c
+    src/rasqal_digest.c
+    src/rasqal_digest_md5.c
+    src/rasqal_digest_sha1.c
+    src/rasqal_double.c
+    src/rasqal_engine.c
+    src/rasqal_engine_algebra.c
+    src/rasqal_engine_sort.c
+    src/rasqal_expr.c
+    src/rasqal_expr_datetimes.c
+    src/rasqal_expr_evaluate.c
+    src/rasqal_expr_numerics.c
+    src/rasqal_expr_strings.c
+    src/rasqal_feature.c
+    src/rasqal_format_html.c
+    src/rasqal_format_json.c
+    src/rasqal_format_rdf.c
+    src/rasqal_format_sparql_xml.c
+    src/rasqal_format_sv.c
+    src/rasqal_format_table.c
+    src/rasqal_formula.c
+    src/rasqal_general.c
+    src/rasqal_graph_pattern.c
+    src/rasqal_iostream.c
+    src/rasqal_literal.c
+    src/rasqal_map.c
+    src/rasqal_prefix.c
+    src/rasqal_projection.c
+    src/rasqal_query.c
+    src/rasqal_query_results.c
+    src/rasqal_query_test.c
+    src/rasqal_query_transform.c
+    src/rasqal_query_write.c
+    src/rasqal_random.c
+    src/rasqal_raptor.c
+    src/rasqal_regex.c
+    src/rasqal_result_formats.c
+    src/rasqal_row.c
+    src/rasqal_row_compatible.c
+    src/rasqal_rowsource.c
+    src/rasqal_rowsource_aggregation.c
+    src/rasqal_rowsource_assignment.c
+    src/rasqal_rowsource_distinct.c
+    src/rasqal_rowsource_empty.c
+    src/rasqal_rowsource_filter.c
+    src/rasqal_rowsource_graph.c
+    src/rasqal_rowsource_groupby.c
+    src/rasqal_rowsource_having.c
+    src/rasqal_rowsource_join.c
+    src/rasqal_rowsource_project.c
+    src/rasqal_rowsource_rowsequence.c
+    src/rasqal_rowsource_slice.c
+    src/rasqal_rowsource_sort.c
+    src/rasqal_rowsource_triples.c
+    src/rasqal_rowsource_union.c
+    src/rasqal_service.c
+    src/rasqal_solution_modifier.c
+    src/rasqal_triple.c
+    src/rasqal_triples_source.c
+    src/rasqal_update.c
+    src/rasqal_variable.c
+    src/rasqal_xsd_datatypes.c
+    src/snprintf.c
+    src/sparql_lexer.c
+    src/sparql_parser.c
+    src/timegm.c
+)
+
+include(ConfigureChecks.cmake)
+configure_file(src/rasqal.h.in ${CMAKE_BINARY_DIR}/rasqal.h @ONLY)
+configure_file(src/win32_rasqal_config.h.in ${CMAKE_BINARY_DIR}/win32_rasqal_config.h @ONLY)
+
+set(rasqal_HDRS
+    ${CMAKE_BINARY_DIR}/rasqal.h
+)
+
+if(WIN32)
+    add_definitions(-DRASQAL_DECIMAL_NONE)
+    if(MSVC)
+        add_definitions(-D_CRT_SECURE_NO_WARNINGS -wd4996)
+    endif(MSVC)
+    if(MSVC OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel"))
+        list(APPEND rasqal_SRCS src/gettimeofday.c)
+    endif(MSVC OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel"))
+    if((NOT HAVE_STRICMP) AND (NOT HAVE_STRCASECMP))
+        list(APPEND rasqal_SRCS src/strcasecmp.c)
+    endif((NOT HAVE_STRICMP) AND (NOT HAVE_STRCASECMP))
+endif(WIN32)
+
+include_directories(
+    ${CMAKE_BINARY_DIR}
+    src
+    utils
+    ${PCRE_INCLUDE_DIR}
+    ${RAPTOR_INCLUDE_DIR}
+)
+add_library(rasqal SHARED ${rasqal_SRCS})
+set_target_properties(rasqal PROPERTIES DEFINE_SYMBOL RASQAL_INTERNAL)
+target_link_libraries(rasqal ${PCRE_LIBRARIES} ${RAPTOR_LIBRARIES})
+if(MINGW)
+target_link_libraries(rasqal msvcr80)
+endif()
+
+if(BUILD_TOOLS OR BUILD_TESTS)
+    add_library(rasqal_static STATIC ${rasqal_SRCS})
+    set_target_properties(rasqal_static PROPERTIES COMPILE_FLAGS "-DRASQAL_STATIC -DRASQAL_INTERNAL")
+    if(MINGW)
+        target_link_libraries(rasqal_static msvcr80)
+    endif()
+endif(BUILD_TOOLS OR BUILD_TESTS)
+
+#if(NOT MSVC)
+#    target_link_libraries(rasqal gmp)
+#endif(NOT MSVC)
+
+set(PROGRAMM rasqal)
+
+set(_targets
+   rasqal
+)
+###############################################################################
+# examples and commandline utility
+
+if(BUILD_TOOLS)
+    configure_file(${CMAKE_SOURCE_DIR}/cmake/config.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/rasqal-config.cpp)
+    add_executable(rasqal-config ${CMAKE_CURRENT_BINARY_DIR}/rasqal-config.cpp)
+    target_link_libraries(rasqal-config ${RAPTOR_LIBRARIES} rasqal)
+
+    set(roqet_SRCS
+        utils/roqet.c
+    )
+    if(MSVC OR (WIN32 AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel"))
+        set(roqet_SRCS
+            ${roqet_SRCS} 
+            utils/getopt.c
+        )
+    endif(MSVC OR (WIN32 AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel"))
+    add_executable(roqet ${roqet_SRCS})
+    set_target_properties(roqet PROPERTIES COMPILE_FLAGS "-DRASQAL_STATIC -DRASQAL_INTERNAL")
+    target_link_libraries(roqet rasqal_static ${PCRE_LIBRARIES} ${RAPTOR_LIBRARIES})
+    list(APPEND _targets rasqal-config roqet)
+
+    install(FILES utils/roqet.1 DESTINATION share/man/man1)
+endif(BUILD_TOOLS)
+
+if(BUILD_EXAMPLES)
+    set(srxread_SRCS
+        utils/srxread.c
+    )
+    add_executable(srxread ${srxread_SRCS})
+    target_link_libraries(srxread rasqal)
+
+    set(srxwrite_SRCS
+        utils/srxwrite.c
+    )
+    add_executable(srxwrite ${srxwrite_SRCS})
+    target_link_libraries(srxwrite rasqal)
+endif(BUILD_EXAMPLES)
+
+###############################################################################
+if(BUILD_TESTS)
+    add_definitions(-Dstrcasecmp=stricmp -Dstrncasecmp=strnicmp)
+    set(test_SRCS
+        rasqal_algebra
+        rasqal_expr
+        strcasecmp
+        rasqal_xsd_datatypes
+        rasqal_decimal
+        rasqal_datetime
+        rasqal_variable
+        rasqal_rowsource_empty
+        rasqal_rowsource_union
+        rasqal_rowsource_rowsequence
+        rasqal_rowsource_project
+        rasqal_rowsource_join
+        rasqal_rowsource_triples
+        rasqal_row_compatible
+        rasqal_rowsource_groupby
+        rasqal_rowsource_aggregation
+        rasqal_literal
+        rasqal_query_test
+    )
+    foreach(_testname ${test_SRCS})
+        add_executable(${_testname}_test src/${_testname}.c)
+        target_link_libraries(${_testname}_test rasqal_static ${PCRE_LIBRARIES} ${RAPTOR_LIBRARIES})
+        set_target_properties(${_testname}_test PROPERTIES COMPILE_FLAGS "-DRASQAL_STATIC -DRASQAL_INTERNAL -DSTANDALONE")
+        add_test(${_testname} ${_testname}_test)
+    endforeach(_testname ${test_SRCS})
+endif(BUILD_TESTS)
+
+###############################################################################
+install(TARGETS ${_targets} RUNTIME DESTINATION bin
+                            LIBRARY DESTINATION lib
+                            ARCHIVE DESTINATION lib)
+
+install(FILES ${rasqal_HDRS} DESTINATION include/rasqal)
+
+install(FILES docs/librasqal.3 DESTINATION share/man/man3)
diff -Nru -x '*~' rasqal-0.9.30.orig/ConfigureChecks.cmake rasqal-0.9.30/ConfigureChecks.cmake
--- rasqal-0.9.30.orig/ConfigureChecks.cmake	1970-01-01 01:00:00.000000000 +0100
+++ rasqal-0.9.30/ConfigureChecks.cmake	2013-12-19 10:10:36.523834600 +0100
@@ -0,0 +1,141 @@
+#/* Have curl/curl.h * HAVE_CURL_CURL_H
+#/* INN parsedate function present * HAVE_INN_PARSEDATE
+
+include(CheckIncludeFile)
+include(CheckFunctionExists)
+include (CheckTypeSize) 
+
+check_function_exists("getopt" HAVE_GETOPT)
+check_function_exists("getopt_long" HAVE_GETOPT_LONG)
+check_function_exists("gettimeofday" HAVE_GETTIMEOFDAY)
+check_function_exists("gmp_version" HAVE_GMP_VERSION)
+check_function_exists("gmtime_r" HAVE_GMTIME_R)
+check_function_exists("initstate" HAVE_INITSTATE)
+check_function_exists("initstate_r" HAVE_INITSTATE_R)
+check_function_exists("rand" HAVE_RAND)
+check_function_exists("rand_r" HAVE_RAND_R)
+check_function_exists("random" HAVE_RANDOM)
+check_function_exists("random_r" HAVE_RANDOM_R)
+check_function_exists("setjmp" HAVE_SETJMP)
+check_function_exists("srand" HAVE_SRAND)
+check_function_exists("strcasecmp" HAVE_STRCASECMP)
+check_function_exists("stricmp" HAVE_STRICMP)
+check_function_exists("timegm" HAVE_TIMEGM)
+check_function_exists("vsnprintf" HAVE_VSNPRINTF)
+
+
+check_include_file("dlfcn.h" HAVE_DLFCN_H)
+check_include_file("errno.h" HAVE_ERRNO_H)
+check_include_file("expat.h" HAVE_EXPAT_H)
+check_include_file("fcntl.h" HAVE_FCNTL_H)
+check_include_file("fetch.h" HAVE_FETCH_H)
+check_include_file("float.h" HAVE_FLOAT_H)
+check_include_file("getopt.h" HAVE_GETOPT_H)
+check_include_file("gmp.h" HAVE_GMP_H)
+check_include_file("inttypes.h" HAVE_INTTYPES_H)
+check_include_file("libxml/HTMLparser.h" HAVE_LIBXML_HTMLPARSER_H)
+check_include_file("libxml/SAX2.h" HAVE_LIBXML_SAX2_H)
+check_include_file("libxml/hash.h" HAVE_LIBXML_HASH_H)
+check_include_file("libxml/nanohttp.h" HAVE_LIBXML_NANOHTTP_H)
+check_include_file("libxml/parser.h" HAVE_LIBXML_PARSER_H)
+check_include_file("libxml/schemasinternals.h" HAVE_LIBXML_SCHEMASINTERNALS_H)
+check_include_file("libxml/schemastypes.h" HAVE_LIBXML_XMLSCHEMASTYPES_H)
+check_include_file("libxml/xmlschemas.h" HAVE_LIBXML_XMLSCHEMAS_H)
+check_include_file("limits.h" HAVE_LIMITS_H)
+check_include_file("math.h" HAVE_MATH_H)
+check_include_file("memory.h" HAVE_MEMORY_H)
+check_include_file("mhash.h" HAVE_MHASH_H)
+check_include_file("mpfr.h" HAVE_MPFR_H)
+check_include_file("regex.h" HAVE_REGEX_H)
+check_include_file("setjmp.h" HAVE_SETJMP_H)
+check_include_file("stddef.h" HAVE_STDDEF_H)
+check_include_file("stdint.h" HAVE_STDINT_H)
+check_include_file("stdlib.h" HAVE_STDLIB_H)
+check_include_file("string.h" HAVE_STRING_H)
+check_include_file("strings.h" HAVE_STRINGS_H)
+check_include_file("sys/param.h" HAVE_SYS_PARAM_H)
+check_include_file("sys/stat.h" HAVE_SYS_STAT_H)
+check_include_file("sys/time.h" HAVE_SYS_TIME_H)
+check_include_file("time.h" HAVE_TIME_H)
+check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
+check_include_file("unistd.h" HAVE_UNISTD_H)
+check_include_file("xmlparse.h" HAVE_XMLPARSE_H)
+
+
+
+if(NOT HAVE_TIME_H)
+    set(HAVE_TIME_H 0)
+else(NOT HAVE_TIME_H)
+    if(NOT MSVC)
+        set(CMAKE_EXTRA_INCLUDE_FILES time.h)
+        check_type_size("timezone" HAVE_TIMEZONE_DEFINED)
+        set(CMAKE_EXTRA_INCLUDE_FILES) 
+    endif()
+endif(NOT HAVE_TIME_H)
+    if(NOT HAVE_SYS_TIME_H)
+    set(HAVE_SYS_TIME_H 0)
+endif(NOT HAVE_SYS_TIME_H)
+
+
+# need 'extern int optind' declaration? * NEED_OPTIND_DECLARATION
+
+set(PACKAGE "rasqal")
+set(PACKAGE_BUGREPORT "kde-windows@kde.org")
+set(PACKAGE_NAME "rasqal")
+set(PACKAGE_STRING "\"${PACKAGE} ${VERSION}\"")
+set(PACKAGE_TARNAME "$PACKAGE_STRING{}")
+set(PACKAGE_URL "http://windows.kde.org")
+set(PACKAGE_VERSION ${VERSION})
+
+set(HAVE_REGEX_PCRE 1) # ensured by findpcre
+#set(HAVE_TM_GMTOFF 0) # no idea how to test this
+
+# Decimal from GNU MP library 
+#set(RASQAL_DECIMAL_GMP 1)
+
+# Decimal from MPFR library 
+#set(RASQAL_DECIMAL_MPFR 0)
+
+# Decimal without a library 
+#set(RASQAL_DECIMAL_NONE 0)
+
+# Use gcrypt library for message digests 
+#set(RASQAL_DIGEST_GCRYPT 0)
+
+# Use internal routines for message digests 
+set(RASQAL_DIGEST_INTERNAL 1)
+
+# Use mhash library for message digests 
+#set(RASQAL_DIGEST_MHASH 0)
+
+# Use no message digest library 
+#set(RASQAL_DIGEST_NONE 0)
+
+# Building LAQRS query 
+set(RASQAL_QUERY_LAQRS 1)
+
+# Building SPARQL query 
+set(RASQAL_QUERY_SPARQL 1)
+
+# Use no regex library 
+#set(RASQAL_REGEX_NONE 0)
+
+# Use PCRE regex library 
+set(RASQAL_REGEX_PCRE 1)
+
+# Use posix regex library 
+#set(RASQAL_REGEX_POSIX 0)
+
+# Use internal routines for UUID
+set(RASQAL_UUID_INTERNAL 1)
+
+# defined in win32_raptor_config.h
+#set(RAPTOR_XML_LIBXML 1)
+# The size of `unsigned char', as computed by sizeof. * SIZEOF_UNSIGNED_CHAR
+# The size of `unsigned int', as computed by sizeof. * SIZEOF_UNSIGNED_INT
+# The size of `unsigned long', as computed by sizeof. * SIZEOF_UNSIGNED_LONG
+# The size of `unsigned short', as computed by sizeof. * SIZEOF_UNSIGNED_SHORT
+set(STDC_HEADERS 1)
+
+configure_file(src/rasqal-config.h.cmake ${CMAKE_BINARY_DIR}/rasqal_config.h)
+add_definitions(-DHAVE_CONFIG_H)
diff -Nru -x '*~' rasqal-0.9.30.orig/src/rasqal-config.h.cmake rasqal-0.9.30/src/rasqal-config.h.cmake
--- rasqal-0.9.30.orig/src/rasqal-config.h.cmake	1970-01-01 01:00:00.000000000 +0100
+++ rasqal-0.9.30/src/rasqal-config.h.cmake	2013-12-16 19:26:06.016692600 +0100
@@ -0,0 +1,229 @@
+/* src/rasqal_config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Define if building universal (internal helper macro) */
+#cmakedefine AC_APPLE_UNIVERSAL_BUILD @AC_APPLE_UNIVERSAL_BUILD@
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H @HAVE_DLFCN_H@
+
+/* Define to 1 if you have the <errno.h> header file. */
+#cmakedefine HAVE_ERRNO_H @HAVE_ERRNO_H@
+
+/* Define to 1 if you have the <float.h> header file. */
+#cmakedefine HAVE_FLOAT_H @HAVE_FLOAT_H@
+
+/* Define to 1 if you have the `getopt' function. */
+#cmakedefine HAVE_GETOPT @HAVE_GETOPT@
+
+/* Define to 1 if you have the <getopt.h> header file. */
+#cmakedefine HAVE_GETOPT_H @HAVE_GETOPT_H@
+
+/* Define to 1 if you have the `getopt_long' function. */
+#cmakedefine HAVE_GETOPT_LONG @HAVE_GETOPT_LONG@
+
+/* Define to 1 if you have the <gmp.h> header file. */
+#cmakedefine HAVE_GMP_H @HAVE_GMP_H@
+
+/* Have gmp_version constant */
+#cmakedefine HAVE_GMP_VERSION @HAVE_GMP_VERSION@
+
+/* Define to 1 if you have the `gmtime_r' function. */
+#cmakedefine HAVE_GMTIME_R @HAVE_GMTIME_R@
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H @HAVE_INTTYPES_H@
+
+/* Define to 1 if you have the <libxml/schemasInternals.h> header file. */
+#cmakedefine HAVE_LIBXML_SCHEMASINTERNALS_H @HAVE_LIBXML_SCHEMASINTERNALS_H@
+
+/* Define to 1 if you have the <libxml/xmlschemastypes.h> header file. */
+#cmakedefine HAVE_LIBXML_XMLSCHEMASTYPES_H @HAVE_LIBXML_XMLSCHEMASTYPES_H@
+
+/* Define to 1 if you have the <libxml/xmlschemas.h> header file. */
+#cmakedefine HAVE_LIBXML_XMLSCHEMAS_H @HAVE_LIBXML_XMLSCHEMAS_H@
+
+/* Define to 1 if you have the <limits.h> header file. */
+#cmakedefine HAVE_LIMITS_H @HAVE_LIMITS_H@
+
+/* Define to 1 if you have the <math.h> header file. */
+#cmakedefine HAVE_MATH_H @HAVE_MATH_H@
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H @HAVE_MEMORY_H@
+
+/* Define to 1 if you have the <mhash.h> header file. */
+#cmakedefine HAVE_MHASH_H @HAVE_MHASH_H@
+
+/* Define to 1 if you have the <mpfr.h> header file. */
+#cmakedefine HAVE_MPFR_H @HAVE_MPFR_H@
+
+/* Define to 1 if you have the `rand_r' function. */
+#cmakedefine HAVE_RAND_R @HAVE_RAND_R@
+
+/* Define to 1 if you have the <regex.h> header file. */
+#cmakedefine HAVE_REGEX_H @HAVE_REGEX_H@
+
+/* have PCRE regex - Perl Compatible Regular Expressions */
+#cmakedefine HAVE_REGEX_PCRE @HAVE_REGEX_PCRE@
+
+/* Define to 1 if you have the <stddef.h> header file. */
+#cmakedefine HAVE_STDDEF_H @HAVE_STDDEF_H@
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H @HAVE_STDINT_H@
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H @HAVE_STDLIB_H@
+
+/* Define to 1 if you have the `strcasecmp' function. */
+#cmakedefine HAVE_STRCASECMP @HAVE_STRCASECMP@
+
+/* Define to 1 if you have the `stricmp' function. */
+#cmakedefine HAVE_STRICMP @HAVE_STRICMP@
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H @HAVE_STRINGS_H@
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H @HAVE_STRING_H@
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H @HAVE_SYS_STAT_H@
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H @HAVE_SYS_TIME_H@
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@
+
+/* Define to 1 if you have the `timegm' function. */
+#cmakedefine HAVE_TIMEGM @HAVE_TIMEGM@
+
+/* Define to 1 if you have the <time.h> header file. */
+#cmakedefine HAVE_TIME_H @HAVE_TIME_H@
+
+/* struct tm has tm_gmtoff field */
+#cmakedefine HAVE_TM_GMTOFF @HAVE_TM_GMTOFF@
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H @HAVE_UNISTD_H@
+
+/* Define to 1 if you have the `vsnprintf' function. */
+#cmakedefine HAVE_VSNPRINTF @HAVE_VSNPRINTF@
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#cmakedefine LT_OBJDIR @LT_OBJDIR@
+
+/* need 'extern int optind' declaration? */
+#cmakedefine NEED_OPTIND_DECLARATION @NEED_OPTIND_DECLARATION@
+
+/* Define to 1 if your C compiler doesn't accept -c and -o together. */
+#cmakedefine NO_MINUS_C_MINUS_O @NO_MINUS_C_MINUS_O@
+
+/* Name of package */
+#cmakedefine PACKAGE @PACKAGE@
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT @PACKAGE_BUGREPORT@
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME @PACKAGE_NAME@
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING @PACKAGE_STRING@
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME @PACKAGE_TARNAME@
+
+/* Define to the home page for this package. */
+#cmakedefine PACKAGE_URL @PACKAGE_URL@
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION @PACKAGE_VERSION@
+
+/* Decimal from GNU MP library */
+#cmakedefine RASQAL_DECIMAL_GMP @RASQAL_DECIMAL_GMP@
+
+/* Decimal from MPFR library */
+#cmakedefine RASQAL_DECIMAL_MPFR @RASQAL_DECIMAL_MPFR@
+
+/* Decimal without a library */
+#cmakedefine RASQAL_DECIMAL_NONE @RASQAL_DECIMAL_NONE@
+
+/* Use gcrypt library for message digests */
+#cmakedefine RASQAL_DIGEST_GCRYPT @RASQAL_DIGEST_GCRYPT@
+
+/* Use internal routines for message digests */
+#cmakedefine RASQAL_DIGEST_INTERNAL @RASQAL_DIGEST_INTERNAL@
+
+/* Use mhash library for message digests */
+#cmakedefine RASQAL_DIGEST_MHASH @RASQAL_DIGEST_MHASH@
+
+/* Use no message digest library */
+#cmakedefine RASQAL_DIGEST_NONE @RASQAL_DIGEST_NONE@
+
+/* Building LAQRS query */
+#cmakedefine RASQAL_QUERY_LAQRS @RASQAL_QUERY_LAQRS@
+
+/* Building RDQL query */
+#cmakedefine RASQAL_QUERY_RDQL @RASQAL_QUERY_RDQL@
+
+/* Building SPARQL query */
+#cmakedefine RASQAL_QUERY_SPARQL @RASQAL_QUERY_SPARQL@
+
+/* Use no regex library */
+#cmakedefine RASQAL_REGEX_NONE @RASQAL_REGEX_NONE@
+
+/* Use PCRE regex library */
+#cmakedefine RASQAL_REGEX_PCRE @RASQAL_REGEX_PCRE@
+
+/* Use posix regex library */
+#cmakedefine RASQAL_REGEX_POSIX @RASQAL_REGEX_POSIX@
+
+/* Use internal routines for UUID */
+#cmakedefine RASQAL_UUID_INTERNAL @RASQAL_UUID_INTERNAL@
+
+/* Release version as a decimal */
+#cmakedefine RASQAL_VERSION_DECIMAL @RASQAL_VERSION_DECIMAL@
+
+/* Major version number */
+#cmakedefine RASQAL_VERSION_MAJOR @RASQAL_VERSION_MAJOR@
+
+/* Minor version number */
+#cmakedefine RASQAL_VERSION_MINOR @RASQAL_VERSION_MINOR@
+
+/* Release version number */
+#cmakedefine RASQAL_VERSION_RELEASE @RASQAL_VERSION_RELEASE@
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS @STDC_HEADERS@
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#cmakedefine TIME_WITH_SYS_TIME @TIME_WITH_SYS_TIME@
+
+#cmakedefine HAVE_TIMEZONE_DEFINED
+
+#cmakedefine HAVE_GETTIMEOFDAY
+
+/* Version number of package */
+#cmakedefine VERSION @VERSION@
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel). */
+#if defined AC_APPLE_UNIVERSAL_BUILD
+# if defined __BIG_ENDIAN__
+#  define WORDS_BIGENDIAN 1
+# endif
+#else
+# ifndef WORDS_BIGENDIAN
+#  undef WORDS_BIGENDIAN
+# endif
+#endif
+
+/* Define to 1 if `lex' declares `yytext' as a `char *' by default, not a
+   `char[]'. */
+#cmakedefine YYTEXT_POINTER @YYTEXT_POINTER@
+
+/* Define to empty if `const' does not conform to ANSI C. */
+#cmakedefine const @const@
diff -Nru -x '*~' rasqal-0.9.30.orig/src/rasqal_expr_numerics.c rasqal-0.9.30/src/rasqal_expr_numerics.c
--- rasqal-0.9.30.orig/src/rasqal_expr_numerics.c	2013-01-22 20:26:51.000000000 +0100
+++ rasqal-0.9.30/src/rasqal_expr_numerics.c	2013-12-16 19:26:06.020694600 +0100
@@ -25,6 +25,10 @@
 #include <rasqal_config.h>
 #endif
 
+#ifdef HAVE_INTTYPES_H
+#include <inttypes.h>
+#endif
+
 #ifdef WIN32
 #include <win32_rasqal_config.h>
 #endif
diff -Nru -x '*~' rasqal-0.9.30.orig/src/sparql_parser.h rasqal-0.9.30/src/sparql_parser.h
--- rasqal-0.9.30.orig/src/sparql_parser.h	2012-12-17 00:17:29.000000000 +0100
+++ rasqal-0.9.30/src/sparql_parser.h	2013-12-16 19:26:06.025627500 +0100
@@ -30,7 +30,6 @@
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
-
 /* Tokens.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
diff -Nru -x '*~' rasqal-0.9.30.orig/src/timegm.c rasqal-0.9.30/src/timegm.c
--- rasqal-0.9.30.orig/src/timegm.c	2011-08-22 08:06:00.000000000 +0200
+++ rasqal-0.9.30/src/timegm.c	2013-12-16 19:26:06.029651600 +0100
@@ -23,10 +23,108 @@
 #include <time.h>
 #endif
 
+#include <errno.h>
 
 #include "rasqal.h"
 #include "rasqal_internal.h"
 
+/* Taken the following three functions from the kdewin library to avoid
+ * a dependency against it */
+
+#if defined(_MSC_VER) && _MSC_VER >= 1400
+// use secure functions declared in msvc >= 2005
+#define KDEWIN_USE_ENV_S
+#endif
+
+static void putenvMsvcrt(const char *name, const char *value)
+{
+    typedef int (*msvc6putenv)(const char *envstring);
+    static msvc6putenv s_msvcrtputenv = 0;
+    static int alreadyResolved = 0;
+    int i;
+    char * a;
+
+    if( !alreadyResolved ) {
+#ifdef _MSC_VER
+        HANDLE hModule = LoadLibraryA("msvcrt");
+#else
+        // it doesn't work when msvcr80 isn't loaded - we end up in an error
+        // message due to crappy manifest things :(
+        // maybe someone has an idea how to fix this.
+        //HANDLE hModule = LoadLibraryA("msvcr80");
+        HANDLE hModule = NULL;
+#endif
+        if( hModule )
+            s_msvcrtputenv = (msvc6putenv)GetProcAddress(hModule, "_putenv");
+        alreadyResolved = 1;
+    }
+    if( !s_msvcrtputenv )
+        return;
+
+    i = strlen(name) + (value ? strlen(value) : 0) + 2;
+    a = (char*)malloc(i);
+    if (!a) return;
+
+    strcpy(a, name);
+    strcat(a, "=");
+    if (value)
+      strcat(a, value);
+
+    s_msvcrtputenv(a);
+    free(a);
+}
+
+int setenv(const char *name, const char *value, int overwrite)
+{
+//FIXME: There is no env in wince, so disable it
+#ifndef _WIN32_WCE
+#ifndef KDEWIN_USE_ENV_S
+    int i, iRet;
+    char * a;
+#endif
+
+    if (!overwrite && getenv(name)) return 0;
+
+    // make sure to set the env var in all our possible runtime environments
+    putenvMsvcrt(name, value);
+    //SetEnvironmentVariableA(name, value);     // unsure if we need it...
+
+#ifdef KDEWIN_USE_ENV_S
+    return _putenv_s(name, value ? value : "");
+#else
+    if (!name) return -1;
+
+    i = strlen(name) + (value ? strlen(value) : 0) + 2;
+    a = (char*)malloc(i);
+    if (!a) return 1;
+
+    strcpy(a, name);
+    strcat(a, "=");
+    if (value)
+      strcat(a, value);
+
+    iRet = putenv(a);
+    free(a);
+    return iRet;
+#endif
+#else
+    return -1;
+#endif
+}
+
+// from kdecore/fakes.c
+int unsetenv (const char *name)
+{
+    if (name == NULL || *name == '\0' || strchr (name, '=') != NULL)
+    {
+      errno = EINVAL;
+      return -1;
+    }
+
+    setenv(name, "", 1);
+    return 0;
+}
+
 #ifdef WIN32
 time_t
 rasqal_timegm(struct tm *tm)
diff -Nru -x '*~' rasqal-0.9.30.orig/src/win32_rasqal_config.h rasqal-0.9.30/src/win32_rasqal_config.h
--- rasqal-0.9.30.orig/src/win32_rasqal_config.h	2013-01-23 03:37:13.000000000 +0100
+++ rasqal-0.9.30/src/win32_rasqal_config.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,162 +0,0 @@
-/* -*- Mode: c; c-basic-offset: 2 -*-
- *
- * win32_config.h - Rasqal WIN32 hard-coded config
- *
- * Copyright (C) 2004-2008, David Beckett http://www.dajobe.org/
- * Copyright (C) 2004-2005, University of Bristol, UK http://www.bristol.ac.uk/
- * 
- * This package is Free Software and part of Redland http://librdf.org/
- * 
- * It is licensed under the following three licenses as alternatives:
- *   1. GNU Lesser General Public License (LGPL) V2.1 or any newer version
- *   2. GNU General Public License (GPL) V2 or any newer version
- *   3. Apache License, V2.0 or any newer version
- * 
- * You may not use this file except in compliance with at least one of
- * the above three licenses.
- * 
- * See LICENSE.html or LICENSE.txt at the top of this package for the
- * complete terms and further detail along with the license texts for
- * the licenses in COPYING.LIB, COPYING and LICENSE-2.0.txt respectively.
- * 
- */
-
-
-#ifndef WIN32_CONFIG_H
-#define WIN32_CONFIG_H
-
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#define WIN32_LEAN_AND_MEAN 1
-
-/* getopt is not in standard win32 C library - define if we have it */
-/* #define HAVE_GETOPT_H 1 */
-
-#define HAVE_STDLIB_H 1
-
-#define HAVE_STRICMP 1
-
-/* MS names for these functions */
-#define vsnprintf _vsnprintf
-#define snprintf _snprintf
-#define access _access
-#define stricmp _stricmp
-#define strnicmp _strnicmp
-
-/* definition from winsock2.h */
-#ifndef _TIMEVAL_DEFINED
-#define _TIMEVAL_DEFINED
-typedef struct timeval {
-  long tv_sec;
-  long tv_usec;
-} timeval;
-#endif
-
-struct timezone
-{
-  int tz_minuteswest; /* minutes West of Greenwich */
-  int tz_dsttime;     /* type of dst correction */
-};
-
-int rasqal_gettimeofday(struct timeval *tv, struct timezone *tz);
-#undef HAVE_GETTIMEOFDAY
-
-#include <float.h>
-#define isnan(n) _isnan(n)
-/* no round function available */
-#define round(x) floor(x+0.5)
-
-/* These are SPARQL token definitions */
-#ifdef OPTIONAL
-#undef OPTIONAL
-#endif
-
-#ifdef DELETE
-#undef DELETE
-#endif
-
-#ifdef IN
-#undef IN
-#endif
-
-#ifdef GROUP
-#undef GROUP
-#endif
-
-
-#define HAVE_C99_VSNPRINTF 1
-
-/* for access() which is POSIX but doesn't seem to have the defines in VC */
-#ifndef R_OK
-#define R_OK 4
-#endif
-
-/* __func__ doesn't exist in Visual Studio 6 */
-#define __func__ ""
-
-/* 
- * Defines that come from config.h
- */
-
-#include <windows.h>
-#include <io.h>
-#include <memory.h>
-
-/* Release version as a decimal */
-#define RASQAL_VERSION 930
-
-/* Version number of package */
-#define RASQAL_VERSION_STRING "0.9.30"
-
-/* Major version number */
-#define RASQAL_VERSION_MAJOR 0
-
-/* Minor version number */
-#define RASQAL_VERSION_MINOR 9
-
-/* Release version number */
-#define RASQAL_VERSION_RELEASE 30
-
-
-/* This is a SPARQL token define */
-#ifdef OPTIONAL
-#undef OPTIONAL
-#endif
-
-/* bison: output uses ERROR in an enum which breaks if this is defined */
-#ifdef ERROR
-#undef ERROR
-#endif
-
-/* flex: const is available */
-#define YY_USE_CONST
-/* looks like the .c files define this anyway */
-/* #define YY_NO_UNISTD_H */
-
-#undef RASQAL_INLINE
-#define RASQAL_INLINE __inline
-
-/* Building SPARQL query */
-#define RASQAL_QUERY_SPARQL 1
-
-/* Use raptor to provide triples */
-#define RAPTOR_TRIPLES_SOURCE_RAPTOR 1
-
-/* Use redland to provide triples */
-/* #define RAPTOR_TRIPLES_SOURCE_REDLAND 1 */
-
-/* Use PCRE regex library */
-#define RASQAL_REGEX_PCRE 1
-
-#ifdef _DEBUG
-#define RASQAL_DEBUG 1
-#endif
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif
diff -Nru -x '*~' rasqal-0.9.30.orig/src/win32_rasqal_config.h.in rasqal-0.9.30/src/win32_rasqal_config.h.in
--- rasqal-0.9.30.orig/src/win32_rasqal_config.h.in	2012-05-15 06:33:58.000000000 +0200
+++ rasqal-0.9.30/src/win32_rasqal_config.h.in	2013-12-19 10:09:21.283525800 +0100
@@ -25,6 +25,8 @@
 #ifndef WIN32_CONFIG_H
 #define WIN32_CONFIG_H
 
+#include "rasqal_config.h"
+
 
 #ifdef __cplusplus
 extern "C" {
@@ -55,6 +57,7 @@
 } timeval;
 #endif
 
+#ifndef HAVE_TIMEZONE_DEFINED
 struct timezone
 {
   int tz_minuteswest; /* minutes West of Greenwich */
@@ -64,27 +67,19 @@
 int rasqal_gettimeofday(struct timeval *tv, struct timezone *tz);
 #undef HAVE_GETTIMEOFDAY
 
-#include <float.h>
-#define isnan(n) _isnan(n)
-/* no round function available */
-#define round(x) floor(x+0.5)
-
-/* These are SPARQL token definitions */
-#ifdef OPTIONAL
-#undef OPTIONAL
+#else
+#ifndef HAVE_GETTIMEOFDAY
+// msvc has timezone but no gettimeofday - if the types match (and compile), let it through
+int rasqal_gettimeofday(struct timeval *tv, struct timezone *tz);
 #endif
-
-#ifdef DELETE
-#undef DELETE
 #endif
 
-#ifdef IN
-#undef IN
-#endif
+#include <float.h>
+#define isnan(n) _isnan(n)
+/* no round function available */
+#include <math.h> 
 
-#ifdef GROUP
-#undef GROUP
-#endif
+#define round( x ) floor( x + 0.5)
 
 
 #define HAVE_C99_VSNPRINTF 1
@@ -120,12 +115,23 @@
 /* Release version number */
 #define RASQAL_VERSION_RELEASE @RASQAL_VERSION_RELEASE@
 
-
-/* This is a SPARQL token define */
+/* These are SPARQL token definitions */
 #ifdef OPTIONAL
 #undef OPTIONAL
 #endif
 
+#ifdef DELETE
+#undef DELETE
+#endif
+
+#ifdef IN
+#undef IN
+#endif
+
+#ifdef GROUP
+#undef GROUP
+#endif
+
 /* bison: output uses ERROR in an enum which breaks if this is defined */
 #ifdef ERROR
 #undef ERROR
@@ -151,6 +157,16 @@
 /* Use PCRE regex library */
 #define RASQAL_REGEX_PCRE 1
 
+/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
+#ifndef HAVE_INTTYPES_H
+typedef signed char int8_t;
+typedef short int int16_t;
+typedef int int32_t;
+typedef unsigned char uint8_t;
+typedef unsigned short int uint16_t;
+typedef unsigned int uint32_t;
+#endif /* ! HAVE_INTTYPES_H */
+
 #ifdef _DEBUG
 #define RASQAL_DEBUG 1
 #endif
