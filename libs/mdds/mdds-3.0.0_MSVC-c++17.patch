diff -ruNa mdds-3.0.0.orig/m4/ax_cxx_compile_stdcxx.m4 mdds-3.0.0/m4/ax_cxx_compile_stdcxx.m4
--- mdds-3.0.0.orig/m4/ax_cxx_compile_stdcxx.m4	2025-01-16 02:49:38.000000000 +0100
+++ mdds-3.0.0/m4/ax_cxx_compile_stdcxx.m4	2025-02-07 14:11:10.522659828 +0100
@@ -10,13 +10,13 @@
 #
 #   Check for baseline language coverage in the compiler for the specified
 #   version of the C++ standard.  If necessary, add switches to CXX and
-#   CXXCPP to enable support.  VERSION may be '11', '14', '17', '20', or
-#   '23' for the respective C++ standard version.
+#   CXXCPP to enable support.  VERSION may be '11' (for the C++11 standard)
+#   or '14' (for the C++14 standard).
 #
 #   The second argument, if specified, indicates whether you insist on an
 #   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.
 #   -std=c++11).  If neither is specified, you get whatever works, with
-#   preference for no added switch, and then for an extended mode.
+#   preference for an extended mode.
 #
 #   The third argument, if specified 'mandatory' or if left unspecified,
 #   indicates that baseline support for the specified C++ standard is
@@ -35,16 +35,13 @@
 #   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>
 #   Copyright (c) 2016, 2018 Krzesimir Nowak <qdlacz@gmail.com>
 #   Copyright (c) 2019 Enji Cooper <yaneurabeya@gmail.com>
-#   Copyright (c) 2020 Jason Merrill <jason@redhat.com>
-#   Copyright (c) 2021 JÃ¶rn Heusipp <osmanx@problemloesungsmaschine.de>
-#   Copyright (c) 2015, 2022, 2023, 2024 Olly Betts
 #
 #   Copying and distribution of this file, with or without modification, are
 #   permitted in any medium without royalty provided the copyright notice
 #   and this notice are preserved.  This file is offered as-is, without any
 #   warranty.
 
-#serial 23
+#serial 11
 
 dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro
 dnl  (serial version number 13).
@@ -53,8 +50,6 @@
   m4_if([$1], [11], [ax_cxx_compile_alternatives="11 0x"],
         [$1], [14], [ax_cxx_compile_alternatives="14 1y"],
         [$1], [17], [ax_cxx_compile_alternatives="17 1z"],
-        [$1], [20], [ax_cxx_compile_alternatives="20"],
-        [$1], [23], [ax_cxx_compile_alternatives="23"],
         [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl
   m4_if([$2], [], [],
         [$2], [ext], [],
@@ -67,17 +62,7 @@
   AC_LANG_PUSH([C++])dnl
   ac_success=no
 
-  m4_if([$2], [], [dnl
-    AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,
-		   ax_cv_cxx_compile_cxx$1,
-      [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
-        [ax_cv_cxx_compile_cxx$1=yes],
-        [ax_cv_cxx_compile_cxx$1=no])])
-    if test x$ax_cv_cxx_compile_cxx$1 = xyes; then
-      ac_success=yes
-    fi])
-
-  m4_if([$2], [noext], [dnl
+  m4_if([$2], [noext], [], [dnl
   if test x$ac_success = xno; then
     for alternative in ${ax_cxx_compile_alternatives}; do
       switch="-std=gnu++${alternative}"
@@ -101,23 +86,14 @@
     done
   fi])
 
-  m4_if([$2], [ext], [dnl
+  m4_if([$2], [ext], [], [dnl
   if test x$ac_success = xno; then
     dnl HP's aCC needs +std=c++11 according to:
     dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf
     dnl Cray's crayCC needs "-h std=c++11"
-    dnl MSVC needs -std:c++NN for C++17 and later (default is C++14)
     for alternative in ${ax_cxx_compile_alternatives}; do
-      for switch in -std=c++${alternative} +std=c++${alternative} "-h std=c++${alternative}" MSVC; do
-        if test x"$switch" = xMSVC; then
-          dnl AS_TR_SH maps both `:` and `=` to `_` so -std:c++17 would collide
-          dnl with -std=c++17.  We suffix the cache variable name with _MSVC to
-          dnl avoid this.
-          switch=-std:c++${alternative}
-          cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_${switch}_MSVC])
-        else
-          cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])
-        fi
+      for switch in -std:c++${alternative} +std=c++${alternative} "-h std=c++${alternative}"; do
+        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])
         AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,
                        $cachevar,
           [ac_save_CXX="$CXX"
@@ -161,44 +137,23 @@
 dnl  Test body for checking C++11 support
 
 m4_define([_AX_CXX_COMPILE_STDCXX_testbody_11],
-  [_AX_CXX_COMPILE_STDCXX_testbody_new_in_11]
+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11
 )
 
+
 dnl  Test body for checking C++14 support
 
 m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],
-  [_AX_CXX_COMPILE_STDCXX_testbody_new_in_11
-   _AX_CXX_COMPILE_STDCXX_testbody_new_in_14]
+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11
+  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14
 )
 
-dnl  Test body for checking C++17 support
-
 m4_define([_AX_CXX_COMPILE_STDCXX_testbody_17],
-  [_AX_CXX_COMPILE_STDCXX_testbody_new_in_11
-   _AX_CXX_COMPILE_STDCXX_testbody_new_in_14
-   _AX_CXX_COMPILE_STDCXX_testbody_new_in_17]
-)
-
-dnl  Test body for checking C++20 support
-
-m4_define([_AX_CXX_COMPILE_STDCXX_testbody_20],
-  [_AX_CXX_COMPILE_STDCXX_testbody_new_in_11
-   _AX_CXX_COMPILE_STDCXX_testbody_new_in_14
-   _AX_CXX_COMPILE_STDCXX_testbody_new_in_17
-   _AX_CXX_COMPILE_STDCXX_testbody_new_in_20]
-)
-
-dnl  Test body for checking C++23 support
-
-m4_define([_AX_CXX_COMPILE_STDCXX_testbody_23],
   _AX_CXX_COMPILE_STDCXX_testbody_new_in_11
   _AX_CXX_COMPILE_STDCXX_testbody_new_in_14
   _AX_CXX_COMPILE_STDCXX_testbody_new_in_17
-  _AX_CXX_COMPILE_STDCXX_testbody_new_in_20
-  _AX_CXX_COMPILE_STDCXX_testbody_new_in_23
 )
 
-
 dnl  Tests for new features in C++11
 
 m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_11], [[
@@ -210,21 +165,7 @@
 
 #error "This is not a C++ compiler"
 
-// MSVC always sets __cplusplus to 199711L in older versions; newer versions
-// only set it correctly if /Zc:__cplusplus is specified as well as a
-// /std:c++NN switch:
-//
-// https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
-//
-// The value __cplusplus ought to have is available in _MSVC_LANG since
-// Visual Studio 2015 Update 3:
-//
-// https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros
-//
-// This was also the first MSVC version to support C++14 so we can't use the
-// value of either __cplusplus or _MSVC_LANG to quickly rule out MSVC having
-// C++11 or C++14 support, but we can check _MSVC_LANG for C++17 and later.
-#elif __cplusplus < 201103L && !defined _MSC_VER
+#elif __cplusplus < 201103L
 
 #error "This is not a C++11 compiler"
 
@@ -515,7 +456,7 @@
 
 #error "This is not a C++ compiler"
 
-#elif __cplusplus < 201402L && !defined _MSC_VER
+#elif __cplusplus < 201402L
 
 #error "This is not a C++14 compiler"
 
@@ -639,7 +580,7 @@
 
 #error "This is not a C++ compiler"
 
-#elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
+#elif __cplusplus < 201703L
 
 #error "This is not a C++17 compiler"
 
@@ -1005,66 +946,6 @@
 
 }  // namespace cxx17
 
-#endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 201703L
-
-]])
-
-
-dnl  Tests for new features in C++20
-
-m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_20], [[
-
-#ifndef __cplusplus
-
-#error "This is not a C++ compiler"
-
-#elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
-
-#error "This is not a C++20 compiler"
-
-#else
-
-#include <version>
-
-namespace cxx20
-{
-
-// As C++20 supports feature test macros in the standard, there is no
-// immediate need to actually test for feature availability on the
-// Autoconf side.
-
-}  // namespace cxx20
-
-#endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202002L
-
-]])
-
-
-dnl  Tests for new features in C++23
-
-m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_23], [[
-
-#ifndef __cplusplus
-
-#error "This is not a C++ compiler"
-
-#elif (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
-
-#error "This is not a C++23 compiler"
-
-#else
-
-#include <version>
-
-namespace cxx23
-{
-
-// As C++23 supports feature test macros in the standard, there is no
-// immediate need to actually test for feature availability on the
-// Autoconf side.
-
-}  // namespace cxx23
-
-#endif  // (defined _MSVC_LANG ? _MSVC_LANG : __cplusplus) < 202302L
+#endif  // __cplusplus < 201703L
 
 ]])
