diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 00000000..d45aa065
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,70 @@
+cmake_minimum_required(VERSION 3.16)
+
+set(FULL_VERSION "1.14.0")
+
+string(REGEX MATCH "^[0-9]+.[0-9]+.[0-9]+" cmake_compat_version ${FULL_VERSION})
+project(gpgme VERSION ${cmake_compat_version})
+
+set(VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
+set(VERSION_MINOR ${PROJECT_VERSION_MINOR})
+set(VERSION_MICRO ${PROJECT_VERSION_PATCH})
+
+set(PACKAGE_STRING "${CMAKE_PROJECT_NAME} ${FULL_VERSION}")
+set(PACKAGE_VERSION "${FULL_VERSION}")
+
+set(CMAKE_CXX_STANDARD 11)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
+if (WIN32)
+    find_file(GPGME_HEADER gpgme.h REQUIRED)
+    get_filename_component(GPGME_INCLUDE_DIR ${GPGME_HEADER} DIRECTORY)
+    find_library(GPGME_LIB gpgme.lib REQUIRED)
+
+    find_file(ASSUAN_HEADER assuan.h REQUIRED)
+    get_filename_component(ASSUAN_INCLUDE_DIR ${ASSUAN_HEADER} DIRECTORY)
+    find_library(ASSUAN_LIB assuan.lib REQUIRED)
+
+    find_file(GPG_ERROR_HEADER gpg-error.h REQUIRED)
+    get_filename_component(GPG_ERROR_INCLUDE_DIR ${GPG_ERROR_HEADER} DIRECTORY)
+    find_library(GPG_ERROR_LIB gpg-error.lib REQUIRED)
+
+
+    set(GPGME_INCLUDE_DIRS ${GPGME_INCLUDE_DIR} ${ASSUAN_INCLUDE_DIR} ${GPG_ERROR_INCLUDE_DIR})
+    set(GPGME_LIBRARIES ${GPGME_LIB} ${ASSUAN_LIB} ${GPG_ERROR_LIB})
+    set(GPGME_FOUND ON)
+else()
+    find_package(PkgConfig REQUIRED)
+    pkg_check_modules(GPGME REQUIRED gpgme)
+endif()
+
+include(CMakeDependentOption)
+include(CheckIncludeFile)
+include(CheckFunctionExists)
+include(GNUInstallDirs)
+
+set(GPGME_CONFIG_AVAIL_LANG "")
+
+option(WITH_CPP "Build C++ bindings" OFF)
+if (WITH_CPP)
+    set(GPGME_CONFIG_AVAIL_LANG "${GPGME_CONFIG_AVAIL_LANG} cpp")
+endif()
+
+cmake_dependent_option(WITH_QT "Build Qt bindings" OFF "WITH_CPP" OFF)
+
+if (WITH_QT)
+    find_package(Qt5 COMPONENTS Core)
+    set(GPGME_CONFIG_AVAIL_LANG "${GPGME_CONFIG_AVAIL_LANG} qt")
+endif()
+
+function(parse_lt name)
+    file(READ "${CMAKE_SOURCE_DIR}/configure.ac" configure_ac)
+    string(REGEX MATCH "${name}_LT_CURRENT=([0-9]+)" _ ${configure_ac})
+    set(${name}_LT_CURRENT ${CMAKE_MATCH_1} PARENT_SCOPE)
+    string(REGEX MATCH "${name}_LT_AGE=([0-9]+)" _ ${configure_ac})
+    set(${name}_LT_AGE ${CMAKE_MATCH_1} PARENT_SCOPE)
+    string(REGEX MATCH "${name}_LT_REVISION=([0-9]+)" _ ${configure_ac})
+    set(${name}_LT_REVISION ${CMAKE_MATCH_1} PARENT_SCOPE)
+endfunction()
+
+add_subdirectory(lang)
+#add_subdirectory(src)
diff --git a/lang/CMakeLists.txt b/lang/CMakeLists.txt
new file mode 100644
index 00000000..1048eb17
--- /dev/null
+++ b/lang/CMakeLists.txt
@@ -0,0 +1,7 @@
+if (WITH_CPP)
+    add_subdirectory(cpp)
+endif()
+
+if (WITH_QT)
+    add_subdirectory(qt)
+endif()
diff --git a/lang/cpp/CMakeLists.txt b/lang/cpp/CMakeLists.txt
new file mode 100644
index 00000000..febd4f0a
--- /dev/null
+++ b/lang/cpp/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(src)
diff --git a/lang/cpp/src/CMakeLists.txt b/lang/cpp/src/CMakeLists.txt
new file mode 100644
index 00000000..cfc7bbef
--- /dev/null
+++ b/lang/cpp/src/CMakeLists.txt
@@ -0,0 +1,134 @@
+set(gpgmepp_SRCS
+    callbacks.cpp
+    configuration.cpp
+    context.cpp
+    data.cpp
+    decryptionresult.cpp
+    defaultassuantransaction.cpp
+    editinteractor.cpp
+    encryptionresult.cpp
+    engineinfo.cpp
+    eventloopinteractor.cpp
+    exception.cpp
+    gpgadduserideditinteractor.cpp
+    gpgagentgetinfoassuantransaction.cpp
+    gpggencardkeyinteractor.cpp
+    gpgsetexpirytimeeditinteractor.cpp
+    gpgsetownertrusteditinteractor.cpp
+    gpgsignkeyeditinteractor.cpp
+    importresult.cpp
+    key.cpp
+    keygenerationresult.cpp
+    keylistresult.cpp
+    scdgetinfoassuantransaction.cpp
+    signingresult.cpp
+    swdbresult.cpp
+    tofuinfo.cpp
+    trustitem.cpp
+    verificationresult.cpp
+    vfsmountresult.cpp
+)
+
+set(gpgmepp_HEADERS
+    callbacks.h
+    configuration.h
+    context.h
+    data.h
+    decryptionresult.h
+    defaultassuantransaction.h
+    editinteractor.h
+    encryptionresult.h
+    engineinfo.h
+    error.h
+    eventloopinteractor.h
+    exception.h
+    global.h
+    gpgadduserideditinteractor.h
+    gpgagentgetinfoassuantransaction.h
+    gpggencardkeyinteractor.h
+    gpgmefw.h
+    gpgmepp_export.h
+    gpgsetexpirytimeeditinteractor.h
+    gpgsetownertrusteditinteractor.h
+    gpgsignkeyeditinteractor.h
+    importresult.h
+    key.h
+    keygenerationresult.h
+    keylistresult.h
+    notation.h
+    result.h
+    scdgetinfoassuantransaction.h
+    signingresult.h
+    swdbresult.h
+    tofuinfo.h
+    trustitem.h
+    util.h
+    verificationresult.h
+    vfsmountresult.h
+)
+
+set(gpgmepp_interface_HEADERS
+    interfaces/assuantransaction.h
+    interfaces/dataprovider.h
+    interfaces/passphraseprovider.h
+    interfaces/progressprovider.h
+)
+
+add_definitions(-DBUILDING_GPGMEPP)
+
+add_library(gpgmepp ${gpgmepp_SRCS})
+target_include_directories(gpgmepp
+    PRIVATE
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+    $<BUILD_INTERFACE:${GPGME_INCLUDE_DIRS}>
+    PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+    $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/src>
+    $<INSTALL_INTERFACE:${GPGME_INCLUDE_DIRS}>
+)
+target_link_libraries(gpgmepp ${GPGME_LIBRARIES})
+
+parse_lt(LIBGPGMEPP)
+math(EXPR MAJOR "${LIBGPGMEPP_LT_CURRENT}-${LIBGPGMEPP_LT_AGE}")
+
+set_target_properties(gpgmepp PROPERTIES
+    VERSION "${MAJOR}.${LIBGPGMEPP_LT_AGE}.${LIBGPGMEPP_LT_REVISION}"
+    SOVERSION ${MAJOR}
+)
+
+file(COPY ${gpgmepp_HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/gpgme++/)
+file(COPY ${gpgmepp_interface_HEADERS} DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/gpgme++/interfaces)
+
+set(resolved_includedir "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}")
+set(resolved_libdir "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
+set(resolved_bindir "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}")
+set(libsuffix  ".dll")
+
+if (WIN32)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/GpgmeppConfig-w32.cmake.in.in
+                   ${CMAKE_CURRENT_BINARY_DIR}/GpgmeppConfig.cmake @ONLY)
+else()
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/GpgmeppConfig.cmake.in.in
+                   ${CMAKE_CURRENT_BINARY_DIR}/GpgmeppConfig.cmake @ONLY)
+endif()
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/GpgmeppConfigVersion.cmake.in
+               ${CMAKE_CURRENT_BINARY_DIR}/GpgmeppConfigVersion.cmake @ONLY)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/gpgmepp_version.h.in
+               ${CMAKE_CURRENT_BINARY_DIR}/gpgmepp_version.h)
+
+install(TARGETS gpgmepp
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+)
+
+install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/gpgme++
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/gpgmepp_version.h
+              ${CMAKE_CURRENT_SOURCE_DIR}/gpgmepp_export.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/gpgme++)
+
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/GpgmeppConfigVersion.cmake
+              ${CMAKE_CURRENT_BINARY_DIR}/GpgmeppConfig.cmake
+        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Gpgmepp
+)
diff --git a/lang/cpp/src/GpgmeppConfig-w32.cmake.in.in b/lang/cpp/src/GpgmeppConfig-w32.cmake.in.in
index 12826760..c75f811e 100644
--- a/lang/cpp/src/GpgmeppConfig-w32.cmake.in.in
+++ b/lang/cpp/src/GpgmeppConfig-w32.cmake.in.in
@@ -62,13 +62,13 @@ unset(_expectedTargets)
 add_library(Gpgmepp SHARED IMPORTED)
 
 set_target_properties(Gpgmepp PROPERTIES
-  IMPORTED_IMPLIB "@resolved_libdir@/libgpgmepp.dll.a"
+  IMPORTED_IMPLIB "@resolved_libdir@/gpgmepp.lib"
   INTERFACE_INCLUDE_DIRECTORIES "@resolved_includedir@/gpgme++;@resolved_includedir@"
-  INTERFACE_LINK_LIBRARIES "pthread;@resolved_libdir@/libgpgme.dll.a;@LIBASSUAN_LIBS@"
-  IMPORTED_LOCATION "@resolved_bindir@/libgpgmepp-6.dll"
+  INTERFACE_LINK_LIBRARIES "@resolved_libdir@/gpgme.lib;@LIBASSUAN_LIBS@"
+  IMPORTED_LOCATION "@resolved_bindir@/gpgmepp.dll"
 )
 list(APPEND _IMPORT_CHECK_TARGETS Gpgmepp )
-list(APPEND _IMPORT_CHECK_FILES_FOR_Gpgmepp "@resolved_libdir@/libgpgmepp.dll.a" "@resolved_bindir@/libgpgmepp-6.dll" )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Gpgmepp "@resolved_bindir@/gpgmepp.dll" "@resolved_libdir@/gpgmepp.lib")
 
 
 if(CMAKE_VERSION VERSION_LESS 2.8.12)
diff --git a/lang/cpp/src/callbacks.cpp b/lang/cpp/src/callbacks.cpp
index 21c2a813..5b79902f 100644
--- a/lang/cpp/src/callbacks.cpp
+++ b/lang/cpp/src/callbacks.cpp
@@ -40,7 +40,13 @@
 #include <cassert>
 #include <cerrno>
 #include <cstring>
+#ifdef _WIN32
+# include <windows.h>
+# include <io.h>
+#else
 #include <unistd.h>
+#endif
+
 #include <stdlib.h>
 
 static inline gpgme_error_t make_err_from_syserror()
diff --git a/lang/cpp/src/editinteractor.cpp b/lang/cpp/src/editinteractor.cpp
index 36d1be63..c2994fa6 100644
--- a/lang/cpp/src/editinteractor.cpp
+++ b/lang/cpp/src/editinteractor.cpp
@@ -34,7 +34,7 @@
 
 #ifdef _WIN32
 # include <io.h>
-#include <windows.h>
+# include <windows.h>
 #else
 # include <unistd.h>
 #endif
diff --git a/lang/cpp/src/global.h b/lang/cpp/src/global.h
index 7a88dc32..6548c9d5 100644
--- a/lang/cpp/src/global.h
+++ b/lang/cpp/src/global.h
@@ -31,6 +31,10 @@
 
 #include <iosfwd>
 #include <cstring>
+#ifdef _MSC_VER
+#include <BaseTsd.h> // ssize_t on Windows
+#define ssize_t SSIZE_T
+#endif
 
 namespace GpgME
 {
diff --git a/lang/cpp/src/gpgmepp_export.h b/lang/cpp/src/gpgmepp_export.h
index 0e5302f2..2d475911 100644
--- a/lang/cpp/src/gpgmepp_export.h
+++ b/lang/cpp/src/gpgmepp_export.h
@@ -55,7 +55,11 @@
 #endif
 
 #ifndef GPGMEPP_DEPRECATED
-#  define GPGMEPP_DEPRECATED __attribute__ ((__deprecated__))
+#  ifdef WIN32
+#    define GPGMEPP_DEPRECATED __declspec(deprecated)
+#  else
+#    define GPGMEPP_DEPRECATED __attribute__ ((__deprecated__))
+#  endif
 #endif
 
 #ifndef GPGMEPP_DEPRECATED_EXPORT
diff --git a/lang/cpp/src/interfaces/dataprovider.h b/lang/cpp/src/interfaces/dataprovider.h
index c8f387d6..e0b0bf3e 100644
--- a/lang/cpp/src/interfaces/dataprovider.h
+++ b/lang/cpp/src/interfaces/dataprovider.h
@@ -26,6 +26,11 @@
 #define __GPGMEPP_INTERFACES_DATAPROVIDER_H__
 
 #include <sys/types.h>
+#ifdef _MSC_VER
+#include <BaseTsd.h> // ssize_t on Windows
+#define ssize_t SSIZE_T
+#endif
+
 
 #include "gpgmepp_export.h"
 
diff --git a/lang/cpp/src/key.cpp b/lang/cpp/src/key.cpp
index c422fcc5..5898fcd0 100644
--- a/lang/cpp/src/key.cpp
+++ b/lang/cpp/src/key.cpp
@@ -33,7 +33,11 @@
 #include <gpgme.h>
 
 #include <string.h>
+#ifdef _MSC_VER
+#define strcasecmp _stricmp
+#else
 #include <strings.h>
+#endif
 #include <istream>
 #include <iterator>
 
diff --git a/lang/cpp/src/key.h b/lang/cpp/src/key.h
index fc5e67ee..e62305b2 100644
--- a/lang/cpp/src/key.h
+++ b/lang/cpp/src/key.h
@@ -30,7 +30,7 @@
 #include "gpgmefw.h"
 
 #include <memory>
-#include <sys/time.h>
+#include <ctime>
 
 #include <vector>
 #include <algorithm>
diff --git a/lang/qt/CMakeLists.txt b/lang/qt/CMakeLists.txt
new file mode 100644
index 00000000..febd4f0a
--- /dev/null
+++ b/lang/qt/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(src)
diff --git a/lang/qt/src/CMakeLists.txt b/lang/qt/src/CMakeLists.txt
new file mode 100644
index 00000000..33dc301c
--- /dev/null
+++ b/lang/qt/src/CMakeLists.txt
@@ -0,0 +1,218 @@
+set(qgpgme_SRCS
+    cryptoconfig.cpp
+    dataprovider.cpp
+    defaultkeygenerationjob.cpp
+    dn.cpp
+    job.cpp
+    multideletejob.cpp
+    qgpgmeadduseridjob.cpp
+    qgpgmebackend.cpp
+    qgpgmechangeexpiryjob.cpp
+    qgpgmechangeownertrustjob.cpp
+    qgpgmechangepasswdjob.cpp
+    qgpgme_debug.cpp
+    qgpgmedecryptjob.cpp
+    qgpgmedecryptverifyjob.cpp
+    qgpgmedeletejob.cpp
+    qgpgmedownloadjob.cpp
+    qgpgmeencryptjob.cpp
+    qgpgmeexportjob.cpp
+    qgpgmegpgcardjob.cpp
+    qgpgmeimportfromkeyserverjob.cpp
+    qgpgmeimportjob.cpp
+    qgpgmekeyformailboxjob.cpp
+    qgpgmekeygenerationjob.cpp
+    qgpgmekeylistjob.cpp
+    qgpgmelistallkeysjob.cpp
+    qgpgmenewcryptoconfig.cpp
+    qgpgmequickjob.cpp
+    qgpgmerefreshkeysjob.cpp
+    qgpgmesecretkeyexportjob.cpp
+    qgpgmesignencryptjob.cpp
+    qgpgmesignjob.cpp
+    qgpgmesignkeyjob.cpp
+    qgpgmetofupolicyjob.cpp
+    qgpgmeverifydetachedjob.cpp
+    qgpgmeverifyopaquejob.cpp
+    qgpgmewkspublishjob.cpp
+    threadedjobmixin.cpp
+)
+
+set(qgpgme_HEADERS
+    abstractimportjob.h
+    adduseridjob.h
+    changeexpiryjob.h
+    changeownertrustjob.h
+    changepasswdjob.h
+    cryptoconfig.h
+    dataprovider.h
+    decryptjob.h
+    decryptverifyjob.h
+    defaultkeygenerationjob.h
+    deletejob.h
+    dn.h
+    downloadjob.h
+    encryptjob.h
+    exportjob.h
+    gpgcardjob.h
+    hierarchicalkeylistjob.h
+    importfromkeyserverjob.h
+    importjob.h
+    job.h
+    keyformailboxjob.h
+    keygenerationjob.h
+    keylistjob.h
+    listallkeysjob.h
+    multideletejob.h
+    protocol.h
+    qgpgmeadduseridjob.h
+    qgpgmebackend.h
+    qgpgmechangeexpiryjob.h
+    qgpgmechangeownertrustjob.h
+    qgpgmechangepasswdjob.h
+    qgpgmedecryptjob.h
+    qgpgmedecryptverifyjob.h
+    qgpgmedeletejob.h
+    qgpgmedownloadjob.h
+    qgpgmeencryptjob.h
+    qgpgme_export.h
+    qgpgmeexportjob.h
+    qgpgmegpgcardjob.h
+    qgpgmeimportfromkeyserverjob.h
+    qgpgmeimportjob.h
+    qgpgmekeyformailboxjob.h
+    qgpgmekeygenerationjob.h
+    qgpgmekeylistjob.h
+    qgpgmelistallkeysjob.h
+    qgpgmenewcryptoconfig.h
+    qgpgmequickjob.h
+    qgpgmerefreshkeysjob.h
+    qgpgmesecretkeyexportjob.h
+    qgpgmesignencryptjob.h
+    qgpgmesignjob.h
+    qgpgmesignkeyjob.h
+    qgpgmetofupolicyjob.h
+    qgpgmeverifydetachedjob.h
+    qgpgmeverifyopaquejob.h
+    qgpgmewkspublishjob.h
+    quickjob.h
+    refreshkeysjob.h
+    signencryptjob.h
+    signjob.h
+    signkeyjob.h
+    specialjob.h
+    tofupolicyjob.h
+    verifydetachedjob.h
+    verifyopaquejob.h
+    wkspublishjob.h
+)
+
+set(qgpgme_CAMELCASE_HEADERS
+    AbstractImportJob
+    AddUserIDJob
+    ChangeExpiryJob
+    ChangeOwnerTrustJob
+    ChangePasswdJob
+    CryptoConfig
+    DataProvider
+    DecryptJob
+    DecryptVerifyJob
+    DefaultKeyGenerationJob
+    DeleteJob
+    DN
+    DownloadJob
+    EncryptJob
+    ExportJob
+    GpgCardJob
+    HierarchicalKeyListJob
+    ImportFromKeyserverJob
+    ImportJob
+    Job
+    KeyForMailboxJob
+    KeyGenerationJob
+    KeyListJob
+    ListAllKeysJob
+    MultiDeleteJob
+    Protocol
+    QuickJob
+    RefreshKeysJob
+    SignEncryptJob
+    SignJob
+    SpecialJob
+    TofuPolicyJob
+    VerifyDetachedJob
+    VerifyOpaqueJob
+    WKSPublishJob
+)
+
+set(qgpgme_MOC)
+foreach(header ${qgpgme_HEADERS})
+    get_filename_component(absolute_path ${header} ABSOLUTE)
+    get_filename_component(file_name ${header} NAME_WLE)
+
+    add_custom_command(
+        OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${file_name}.moc
+        COMMAND ${QT_MOC_EXECUTABLE} ${absolute_path} -o ${CMAKE_CURRENT_BINARY_DIR}/${file_name}.moc
+    )
+    list(APPEND qgpgme_MOC "${CMAKE_CURRENT_BINARY_DIR}/${file_name}.moc")
+endforeach()
+
+foreach(header ${qgpgme_CAMELCASE_HEADERS})
+    string(TOLOWER ${header} header_lc)
+    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/QGpgME/${header} "#include \"qgpgme/${header_lc}.h\"")
+    list(APPEND qgpgme_HEADERS ${header_lc}.h)
+endforeach()
+
+add_definitions(-DBUILDING_QGPGME)
+
+add_library(qgpgme ${qgpgme_MOC} ${qgpgme_SRCS})
+target_link_libraries(qgpgme PUBLIC gpgmepp ${GPGME_LIBRARIES} Qt5::Core)
+target_include_directories(qgpgme
+    PUBLIC
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+    $<INSTALL_INTERFACE:${GPGME_INCLUDE_DIRS}>
+    PRIVATE
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
+    $<BUILD_INTERFACE:${GPGME_INCLUDE_DIRS}>
+)
+
+parse_lt(LIBQGPGME)
+math(EXPR MAJOR "${LIBQGPGME_LT_CURRENT} - ${LIBQGPGME_LT_AGE}")
+set_target_properties(qgpgme PROPERTIES
+    VERSION "${MAJOR}.${LIBQGPGME_LT_AGE}.${LIBQGPGME_LT_REVISION}"
+    SOVERSION "${MAJOR}"
+)
+
+set(resolved_includedir "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}")
+set(LIBASSUAN_LIBS "${CMAKE_INSTALL_PREFIX}/lib/assuan.lib;${CMAKE_INSTALL_PREFIX}/lib/gpg-error.lib")
+set(resolved_libdir "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
+set(resolved_bindir "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}")
+set(libsuffix  ".dll")
+
+if (WIN32)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/QGpgmeConfig-w32.cmake.in.in
+                   ${CMAKE_CURRENT_BINARY_DIR}/QGpgmeConfig.cmake @ONLY)
+else()
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/QGpgmeConfig.cmake.in.in
+                   ${CMAKE_CURRENT_BINARY_DIR}/QGpgmeConfig.cmake @ONLY)
+endif()
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/QGpgmeConfigVersion.cmake.in
+               ${CMAKE_CURRENT_BINARY_DIR}/QGpgmeConfigVersion.cmake @ONLY)
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/qgpgme_version.h.in
+               ${CMAKE_CURRENT_BINARY_DIR}/qgpgme_version.h)
+
+install(TARGETS qgpgme DESTINATION
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+)
+
+install(FILES ${qgpgme_HEADERS}
+              ${CMAKE_CURRENT_BINARY_DIR}/qgpgme_version.h
+              ${CMAKE_CURRENT_SOURCE_DIR}/qgpgme_export.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/qgpgme)
+install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/QGpgME
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/QGpgmeConfigVersion.cmake
+              ${CMAKE_CURRENT_BINARY_DIR}/QGpgmeConfig.cmake
+        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/QGpgme
+)
diff --git a/lang/qt/src/QGpgmeConfig-w32.cmake.in.in b/lang/qt/src/QGpgmeConfig-w32.cmake.in.in
index b8978053..8787253b 100644
--- a/lang/qt/src/QGpgmeConfig-w32.cmake.in.in
+++ b/lang/qt/src/QGpgmeConfig-w32.cmake.in.in
@@ -62,14 +62,14 @@ unset(_expectedTargets)
 add_library(QGpgme SHARED IMPORTED)
 
 set_target_properties(QGpgme PROPERTIES
-  IMPORTED_IMPLIB_RELEASE "@resolved_libdir@/libqgpgme.dll.a"
+  IMPORTED_IMPLIB "@resolved_libdir@/qgpgme.lib"
   INTERFACE_INCLUDE_DIRECTORIES "@resolved_includedir@/qgpgme;@resolved_includedir@"
   INTERFACE_LINK_LIBRARIES "Gpgmepp;Qt5::Core"
-  IMPORTED_LOCATION "@resolved_libdir@/libqgpgme-7.dll"
+  IMPORTED_LOCATION "@resolved_bindir@/qgpgme.dll"
 )
 
 list(APPEND _IMPORT_CHECK_TARGETS QGgpme )
-list(APPEND _IMPORT_CHECK_FILES_FOR_Qgpgme "@resolved_libdir@/libqgpgme.dll.a" "@resolved_bindir@/libqgpgme-7.dll" )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Qgpgme "@resolved_libdir@/qgpgme.lib" "@resolved_bindir@/qgpgme.dll")
 
 if(CMAKE_VERSION VERSION_LESS 2.8.12)
   message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
diff --git a/lang/qt/src/dn.cpp b/lang/qt/src/dn.cpp
index e41d481c..1a1cb013 100644
--- a/lang/qt/src/dn.cpp
+++ b/lang/qt/src/dn.cpp
@@ -38,6 +38,10 @@
 
 #include "dn.h"
 
+#ifdef _MSC_VER
+#define strcasecmp _stricmp
+#endif
+
 #include <gpg-error.h>
 
 static const struct {
diff --git a/lang/qt/src/downloadjob.h b/lang/qt/src/downloadjob.h
index 7c8bb725..987d1d75 100644
--- a/lang/qt/src/downloadjob.h
+++ b/lang/qt/src/downloadjob.h
@@ -93,7 +93,7 @@ public:
        only empty strings or anything other than fingerprints, the
        result is undefined.
     */
-    virtual QGPGME_DEPRECATED_EXPORT GpgME::Error start(const QStringList &fingerprints) = 0;
+    virtual QGPGME_DEPRECATED GpgME::Error start(const QStringList &fingerprints) = 0;
 
 Q_SIGNALS:
     void result(const GpgME::Error &result, const QByteArray &keyData, const QString &auditLogAsHtml = QString(), const GpgME::Error &auditLogError = GpgME::Error());
diff --git a/lang/qt/src/encryptjob.h b/lang/qt/src/encryptjob.h
index 161a7694..7aa0b131 100644
--- a/lang/qt/src/encryptjob.h
+++ b/lang/qt/src/encryptjob.h
@@ -90,7 +90,7 @@ public:
        not be performed, but full validity assumed for all keys
        without further checks.
     */
-    virtual QGPGME_DEPRECATED_EXPORT GpgME::Error start(const std::vector<GpgME::Key> &recipients,
+    virtual QGPGME_DEPRECATED GpgME::Error start(const std::vector<GpgME::Key> &recipients,
             const QByteArray &plainText, bool alwaysTrust = false) = 0;
 
     /*!
diff --git a/lang/qt/src/qgpgme_export.h b/lang/qt/src/qgpgme_export.h
index 72927fe3..c4243bb6 100644
--- a/lang/qt/src/qgpgme_export.h
+++ b/lang/qt/src/qgpgme_export.h
@@ -65,7 +65,11 @@
 #endif
 
 #ifndef QGPGME_DEPRECATED
-#  define QGPGME_DEPRECATED __attribute__ ((__deprecated__))
+#  if WIN32
+#    define QGPGME_DEPRECATED __declspec(deprecated)
+#  else
+#    define QGPGME_DEPRECATED __attribute__ ((__deprecated__))
+#  endif
 #endif
 
 #ifndef QGPGME_DEPRECATED_EXPORT
diff --git a/lang/qt/src/signjob.h b/lang/qt/src/signjob.h
index b5b5af6f..7dc8c189 100644
--- a/lang/qt/src/signjob.h
+++ b/lang/qt/src/signjob.h
@@ -85,7 +85,7 @@ public:
        Starts the signing operation. \a signers is the list of keys to
        sign \a plainText with. Empty (null) keys are ignored.
     */
-    virtual QGPGME_DEPRECATED_EXPORT GpgME::Error start(const std::vector<GpgME::Key> &signers,
+    virtual QGPGME_DEPRECATED GpgME::Error start(const std::vector<GpgME::Key> &signers,
             const QByteArray &plainText,
             GpgME::SignatureMode mode) = 0;
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 00000000..054e5997
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,128 @@
+if (WIN32)
+    set(system_components_SRCS w32-util.c)
+else()
+    set(system_components_SRCS posix-util.c posix-io.c)
+endif()
+
+if (HAVE_UISERVER)
+    set(uiserver_components_SRCS engine-uiserver.c)
+endif()
+
+set(gpg_SRCS
+    conversion.c
+    b64dec.c
+    get-env.c
+    parsetlv.c
+    mbox-util.c
+    data.c
+    data-fd.c
+    data-stream.c
+    data-mem.c
+    data-user.c
+    data-estream.c
+    data-compat.c
+    data-identify.c
+    signers.c
+    sig-notation.c
+    wait.c
+    wait-global.c
+    wait-private.c
+    wait-user.c
+    op-support.c
+    encrypt.c
+    encrypt-sign.c
+    decrypt.c
+    decrypt-verify.c
+    verify.c
+    sign.c
+    passphrase.c
+    progress.c
+    key.c
+    keylist.c
+    keysign.c
+    trust-item.c
+    trustlist.c
+    tofupolicy.c
+    import.c
+    export.c
+    genkey.c
+    delete.c
+    edit.c
+    getauditlog.c
+    opassuan.c
+    passwd.c
+    spawn.c
+    assuan-support.c
+    engine.c
+    engine-gpg.c
+    status-table.c
+    engine-gpgsm.c
+    engine-assuan.c
+    engine-gpgconf.c
+    ${uiserver_components_SRCS}
+    engine-g13.c
+    vfs-mount.c
+    vfs-create.c
+    engine-spawn.c
+    gpgconf.c
+    queryswdb.c
+    ${system_components_SRCS}
+    dirinfo.c
+    debug.c
+    gpgme.c
+    version.c
+    error.c
+    ath.c
+)
+
+parse_lt(LIBGPGME)
+math(EXPR MAJOR "${LIBGPGME_LT_CURRENT} - ${LIBGPGME_LT_AGE}")
+
+add_library(gpgme ${gpg_SRCS})
+set_target_properties(gpgme PROPERTIES
+    VERSION "${MAJOR}.${LIBGPGME_LT_AGE}.${LIBGPGME_LT_REVISION}"
+    SOVERSION "${MAJOR}"
+)
+target_include_directories(gpgme
+    PUBLIC ${LIBASSUAN_INCLUDE_DIRS} ${GPG_ERROR_INCLUDE_DIRS}
+    PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>)
+target_link_libraries(gpgme c ${LIBASSUAN_LIBRARIES} ${GPG_ERROR_LIBRARIES})
+
+if (WIN32)
+    add_executable(gpgme-w32spawn gpgme-w32spawn.c)
+endif()
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})
+set(includedir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR})
+set(libdir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
+set(GPGME_CONFIG_API_VERSION "1")
+set(GPGME_CONFIG_LIBS "-lgpgme")
+foreach (lib ${LIBASSUAN_LIBRARIES})
+    set(LIBASSUAN_LIBS "${LIBASSUAN_LIBS} -l${lib}")
+endforeach()
+foreach (lib ${GPG_ERROR_LIBRARIES})
+    set(GPG_ERROR_LIBS "${GPG_ERROR_LIBS} -l${lib}")
+endforeach()
+
+add_executable(gpgme-json gpgme-json.c argparse.c cJSON.c)
+target_include_directories(gpgme-json PRIVATE ${LIBASSUAN_INCLUDE_DIRS})
+target_link_libraries(gpgme-json gpgme m ${LIBASSUAN_LIBRARIES})
+
+add_executable(gpgme-tool gpgme-tool.c argparse.c)
+target_include_directories(gpgme-tool PRIVATE ${LIBASSUAN_INCLUDE_DIRS})
+target_link_libraries(gpgme-tool gpgme ${LIBASSUAN_LIBRARIES})
+
+configure_file(gpgme-config.in ${CMAKE_CURRENT_BINARY_DIR}/gpgme-config @ONLY)
+
+set(GPGME_VERSION ${CMAKE_PROJECT_VERSION})
+math(EXPR VERSION_NUMBER "(${PROJECT_VERSION_MAJOR} << 16) + (${PROJECT_VERSION_MINOR} << 8) + ${PROJECT_VERSION_PATCH}" OUTPUT_FORMAT HEXADECIMAL)
+configure_file(gpgme.h.in ${CMAKE_CURRENT_BINARY_DIR}/gpgme.h @ONLY)
+
+configure_file(gpgme-glib.pc.in ${CMAKE_CURRENT_BINARY_DIR}/gpgme-glibc.pc)
+
+install(TARGETS gpgme DESTINATION ${CMAKE_INSTALL_LIBDIR})
+install(TARGETS gpgme-json gpgme-tool DESTINATION ${CMAKE_INSTALL_BINDIR})
+install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/gpgme-config DESTINATION ${CMAKE_INSTALL_BINDIR})
+install(FILES ${gpgme_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/gpgme.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/gpgme)
