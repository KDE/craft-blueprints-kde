diff -Nru libssh-0.4.7.orig/CMakeLists.txt libssh-0.4.7/CMakeLists.txt
--- libssh-0.4.7.orig/CMakeLists.txt	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/CMakeLists.txt	2011-01-16 23:09:26.282186300 +0100
@@ -72,7 +72,4 @@
 # build samples
 include_directories(${CMAKE_SOURCE_DIR}/include)
 
-if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
-  add_subdirectory(examples)
-endif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
-
+add_subdirectory(examples)
diff -Nru libssh-0.4.7.orig/examples/authentication.c libssh-0.4.7/examples/authentication.c
--- libssh-0.4.7.orig/examples/authentication.c	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/examples/authentication.c	2011-01-16 23:09:26.285186500 +0100
@@ -18,7 +18,9 @@
  */
 
 #include <stdio.h>
+#ifndef _WIN32
 #include <unistd.h>
+#endif
 #include <stdlib.h>
 #include <string.h>
 
@@ -53,7 +55,8 @@
         }
         memset(buffer,0,strlen(buffer));
       } else {
-        ptr=getpass(prompt);
+        printf("password would be requested here (58)!\n");
+//        ptr=getpass(prompt);
         if (ssh_userauth_kbdint_setanswer(session,i,ptr) < 0) {
           return SSH_AUTH_ERROR;
         }
@@ -82,13 +85,18 @@
 
     // Try to authenticate with public key first
     if (method & SSH_AUTH_METHOD_PUBLICKEY) {
+      printf("pubkey auth: ");
       rc = ssh_userauth_autopubkey(session, NULL);
       if (rc == SSH_AUTH_ERROR) {
         perror("Authentication failed.");
+        printf("failed\n");
         return rc;
       } else if (rc == SSH_AUTH_SUCCESS) {
+        printf("succeeded\n");
         break;
       }
+      printf("failed as well\n");
+      return rc;
     }
 
     // Try to authenticate with keyboard interactive";
@@ -102,7 +110,8 @@
       }
     }
 
-    password=getpass("Password: ");
+    printf("password would be requested here (108)!\n");
+//    password=getpass("Password: ");
     // Try to authenticate with password
     if (method & SSH_AUTH_METHOD_PASSWORD) {
       rc = ssh_userauth_password(session, NULL, password);
diff -Nru libssh-0.4.7.orig/examples/CMakeLists.txt libssh-0.4.7/examples/CMakeLists.txt
--- libssh-0.4.7.orig/examples/CMakeLists.txt	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/examples/CMakeLists.txt	2011-01-16 23:09:26.288186600 +0100
@@ -1,5 +1,17 @@
 project(libssh-examples C)
 
+set(LIBSSH_PUBLIC_INCLUDE_DIRS
+  ${CMAKE_SOURCE_DIR}/include
+  ${CMAKE_SOURCE_DIR}/libssh
+  ${CMAKE_SOURCE_DIR}
+  CACHE INTERNAL "libssh public include directories"
+)
+
+set(LIBSSH_PRIVATE_INCLUDE_DIRS
+  ${CMAKE_BINARY_DIR}
+  ${ZLIB_INCLUDE_DIRS}
+)
+
 set(examples_SRCS
   authentication.c
   knownhosts.c
@@ -11,6 +23,11 @@
   ${LIBSSH_PRIVATE_INCLUDE_DIRS}  
 )
 
+add_definitions(-DLIBSSH_STATIC)
+add_executable(testssh sample_win.c ${examples_SRCS})
+target_link_libraries(testssh ${LIBSSH_STATIC_LIBRARY} ${ZLIB_LIBRARIES} ${OPENSSL_LIBRARIES} ws2_32)
+
+if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
 add_executable(libssh_scp libssh_scp.c ${examples_SRCS})
 add_executable(scp_download scp_download.c ${examples_SRCS})
 add_executable(samplessh sample.c ${examples_SRCS})
@@ -39,3 +56,4 @@
   target_link_libraries(samplesshd ${LIBSSH_SHARED_LIBRARY})
 endif (WITH_SERVER)
 
+endif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
diff -Nru libssh-0.4.7.orig/examples/knownhosts.c libssh-0.4.7/examples/knownhosts.c
--- libssh-0.4.7.orig/examples/knownhosts.c	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/examples/knownhosts.c	2011-01-16 23:09:26.290186800 +0100
@@ -20,12 +20,18 @@
 #include <errno.h>
 #include <stdio.h>
 #include <stdlib.h>
+#ifndef _WIN32
 #include <unistd.h>
+#endif
 #include <string.h>
 
 #include <libssh/libssh.h>
 #include "examples_common.h"
 
+#ifdef _WIN32
+#define strncasecmp _strnicmp
+#endif
+
 int verify_knownhost(ssh_session session){
   char *hexa;
   int state;
@@ -60,14 +66,14 @@
       /* fallback to SSH_SERVER_NOT_KNOWN behavior */
     case SSH_SERVER_NOT_KNOWN:
       hexa = ssh_get_hexa(hash, hlen);
-      fprintf(stderr,"The server is unknown. Do you trust the host key ?\n");
+      fprintf(stderr,"The server is unknown. Do you trust the host key (yes/no)?\n");
       fprintf(stderr, "Public key hash: %s\n", hexa);
       free(hexa);
       fgets(buf,sizeof(buf),stdin);
       if(strncasecmp(buf,"yes",3)!=0){
         return -1;
       }
-      fprintf(stderr,"This new key will be written on disk for further usage. do you agree ?\n");
+      fprintf(stderr,"This new key will be written on disk for further usage. do you agree (yes/no)?\n");
       fgets(buf,sizeof(buf),stdin);
       if(strncasecmp(buf,"yes",3)==0){
         if (ssh_write_knownhost(session) < 0) {
diff -Nru libssh-0.4.7.orig/examples/sample_win.c libssh-0.4.7/examples/sample_win.c
--- libssh-0.4.7.orig/examples/sample_win.c	1970-01-01 01:00:00.000000000 +0100
+++ libssh-0.4.7/examples/sample_win.c	2011-01-16 23:09:26.292186900 +0100
@@ -0,0 +1,80 @@
+/* client.c */
+/*
+Copyright 2011 Patrick Spendrin <ps_ml@gmx.de>
+
+This file is part of the SSH Library
+
+You are free to copy this file, modify it in any way, consider it being public
+domain. This does not apply to the rest of the library though, but it is
+allowed to cut-and-paste working code from this file to any license of
+program.
+The goal is to show the API in action. It's not a reference on how terminal
+clients must be made or how a client should react.
+*/
+
+#include "config.h"
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <libssh/callbacks.h>
+#include <libssh/libssh.h>
+#include <libssh/sftp.h>
+
+#include <fcntl.h>
+
+#include "examples_common.h"
+#define MAXCMD 10
+#define snprintf _snprintf
+
+static int client(ssh_session session){
+  int auth=0;
+  char *banner;
+  int state;
+  if (ssh_options_set(session, SSH_OPTIONS_USER, "patrick") < 0)
+    return -1;
+  if (ssh_options_set(session, SSH_OPTIONS_HOST, "winkde.org") < 0)
+    return -1;
+  printf("user and server are set\n");
+  ssh_options_parse_config(session, NULL);
+
+  if(ssh_connect(session)){
+      fprintf(stderr,"Connection failed : %s\n",ssh_get_error(session));
+      return -1;
+  }
+  state=verify_knownhost(session);
+  printf("verified known host\n");
+  if (state != 0)
+    return -1;
+  printf("trying to authenticate next\n");
+  ssh_userauth_none(session, NULL);
+  printf("trying to get banner next\n");
+  banner=ssh_get_issue_banner(session);
+  if(banner){
+      printf("%s\n",banner);
+      free(banner);
+  }
+  printf("banner has been printed\n");
+  auth=authenticate_console(session);
+  if(auth != SSH_AUTH_SUCCESS){
+    return -1;
+  }
+  ssh_log(session, SSH_LOG_FUNCTIONS, "Authentication success");
+  return 0;
+}
+
+int main(int argc, char **argv){
+    ssh_session session;
+
+    printf("testing ssh authentication\n");
+    session = ssh_new();
+
+    client(session);
+
+    ssh_disconnect(session);
+    ssh_free(session);
+
+    ssh_finalize();
+
+    return 0;
+}
diff -Nru libssh-0.4.7.orig/include/libssh/agent.h libssh-0.4.7/include/libssh/agent.h
--- libssh-0.4.7.orig/include/libssh/agent.h	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/include/libssh/agent.h	2011-01-16 23:09:26.293186900 +0100
@@ -53,7 +53,6 @@
   unsigned int count;
 };
 
-#ifndef _WIN32
 /* agent.c */
 /**
  * @brief Create a new ssh agent structure.
@@ -91,7 +90,6 @@
 ssh_string agent_sign_data(struct ssh_session_struct *session,
     struct ssh_buffer_struct *data,
     struct ssh_public_key_struct *pubkey);
-#endif
 
 #endif /* __AGENT_H */
 /* vim: set ts=2 sw=2 et cindent: */
diff -Nru libssh-0.4.7.orig/libssh/agent.c libssh-0.4.7/libssh/agent.c
--- libssh-0.4.7.orig/libssh/agent.c	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/libssh/agent.c	2011-01-16 23:09:26.296187100 +0100
@@ -4,6 +4,7 @@
  * This file is part of the SSH Library
  *
  * Copyright (c) 2008-2009 by Andreas Schneider <mail@cynapses.org>
+ * Copyright (c) 2011 by Patrick Spendrin <ps_ml@gmx.de>
  *
  * The SSH Library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
@@ -34,32 +35,40 @@
  *    the agent returns the signed data
  */
 
-#ifndef _WIN32
-
 #include <stdlib.h>
 #include <errno.h>
 #include <string.h>
 #include <stdio.h>
 
+#ifdef _WIN32
+#include <winsock2.h>
+#include <windows.h>
+#else
 #include <unistd.h>
-
-#ifndef _WIN32
 #include <arpa/inet.h>
 #endif
 
 #include "libssh/agent.h"
-#include "libssh/priv.h"
-#include "libssh/socket.h"
 #include "libssh/buffer.h"
 #include "libssh/session.h"
 #include "libssh/keys.h"
+#ifndef _WIN32
+#include "libssh/priv.h"
+#include "libssh/socket.h"
 #include "libssh/poll.h"
+#else
+#include "winpgntc.h"
+#endif
 
 /* macro to check for "agent failure" message */
 #define agent_failed(x) \
   (((x) == SSH_AGENT_FAILURE) || ((x) == SSH_COM_AGENT2_FAILURE) || \
    ((x) == SSH2_AGENT_FAILURE))
 
+#ifdef _WIN32
+#define AGENT_COPYDATA_ID 0x804e50ba   /* random goop */
+#endif
+
 static uint32_t agent_get_u32(const void *vp) {
   const uint8_t *p = (const uint8_t *)vp;
   uint32_t v;
@@ -81,6 +90,7 @@
   p[3] = (uint8_t)v & 0xff;
 }
 
+#ifndef _WIN32
 static size_t atomicio(struct socket *s, void *buf, size_t n, int do_read) {
   char *b = buf;
   size_t pos = 0;
@@ -121,6 +131,7 @@
 
   return pos;
 }
+#endif
 
 ssh_agent agent_new(struct ssh_session_struct *session) {
   ssh_agent agent = NULL;
@@ -132,16 +143,18 @@
   ZERO_STRUCTP(agent);
 
   agent->count = 0;
+#ifndef _WIN32
   agent->sock = ssh_socket_new(session);
   if (agent->sock == NULL) {
     SAFE_FREE(agent);
     return NULL;
   }
-
+#endif
   return agent;
 }
 
 void agent_close(struct ssh_agent_struct *agent) {
+#ifndef _WIN32
   if (agent == NULL) {
     return;
   }
@@ -149,6 +162,7 @@
   if (getenv("SSH_AUTH_SOCK")) {
     ssh_socket_close(agent->sock);
   }
+#endif
 }
 
 void agent_free(ssh_agent agent) {
@@ -156,15 +170,18 @@
     if (agent->ident) {
       buffer_free(agent->ident);
     }
+#ifndef _WIN32
     if (agent->sock) {
       agent_close(agent);
       ssh_socket_free(agent->sock);
     }
+#endif
     SAFE_FREE(agent);
   }
 }
 
 static int agent_connect(ssh_session session) {
+#ifndef _WIN32
   const char *auth_sock = NULL;
 
   if (session == NULL || session->agent == NULL) {
@@ -181,6 +198,9 @@
   }
 
   return -1;
+#else
+  return 0;
+#endif
 }
 
 #if 0
@@ -205,6 +225,7 @@
 
 static int agent_talk(struct ssh_session_struct *session,
     struct ssh_buffer_struct *request, struct ssh_buffer_struct *reply) {
+#ifndef _WIN32
   uint32_t len = 0;
   uint8_t payload[1024] = {0};
 
@@ -259,7 +280,40 @@
     }
     len -= n;
   }
+#else
+  uint32_t inlen = 0, outlen = 0, i = 0;
+  uint8_t payload[1024] = {0};
+  uint8_t outload[1024] = {0};
+  uint8_t *t = outload;
+
+  inlen = buffer_get_len(request);
+  ssh_log(session, SSH_LOG_PACKET, "agent_talk - len of request: %u", inlen);
+  agent_put_u32(payload, inlen);
+  
+  /* FIXME: make a clean copy here */
+  for(i = 0; i < inlen; i++) {
+    if(i == 1024) exit(1);
+    payload[i+4] = request->data[i];
+  }
+
+  agent_query((void*)payload, inlen + 4, &t, &outlen);
+  
+  if (outlen > 256 * 1024) {
+    ssh_set_error(session, SSH_FATAL,
+        "Authentication response too long: %u", outlen);
+    return -1;
+  }
+  ssh_log(session, SSH_LOG_PACKET, "agent_talk - response length: %u", outlen);
+
+  outlen = outlen + 4;
+  /* the first 4 bytes are the size of the buffer */
+  if (buffer_add_data(reply, (t + 4), outlen) < 0) {
+    ssh_log(session, SSH_LOG_FUNCTIONS,
+        "Not enough space");
+    return -1;
+  }
 
+#endif
   return 0;
 }
 
@@ -484,6 +538,7 @@
     return 0;
   }
 
+#ifndef _WIN32
   if (ssh_socket_is_open(session->agent->sock)) {
     return 1;
   } else {
@@ -493,10 +548,11 @@
       return 1;
     }
   }
-
+#else
+  if(FindWindow(TEXT("Pageant"), TEXT("Pageant")))
+    return 1;
+#endif
   return 0;
 }
 
-#endif /* _WIN32 */
-
 /* vim: set ts=2 sw=2 et cindent: */
diff -Nru libssh-0.4.7.orig/libssh/auth.c libssh-0.4.7/libssh/auth.c
--- libssh-0.4.7.orig/libssh/auth.c	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/libssh/auth.c	2011-01-16 23:09:26.299187300 +0100
@@ -529,7 +529,6 @@
   return rc;
 }
 
-#ifndef _WIN32
 /**
  * @brief Try to authenticate through public key with an ssh agent.
  *
@@ -654,7 +653,6 @@
   leave_function();
   return rc;
 }
-#endif /* _WIN32 */
 
 /**
  * @brief Try to authenticate by password.
@@ -805,7 +803,6 @@
   }
 
   /* Try authentication with ssh-agent first */
-#ifndef _WIN32
   if (agent_is_running(session)) {
     char *privkey_file = NULL;
 
@@ -866,7 +863,6 @@
       publickey_free(pubkey);
     } /* for each privkey */
   } /* if agent is running */
-#endif
 
 
   for (it = ssh_list_get_iterator(session->identity);
diff -Nru libssh-0.4.7.orig/libssh/CMakeLists.txt libssh-0.4.7/libssh/CMakeLists.txt
--- libssh-0.4.7.orig/libssh/CMakeLists.txt	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/libssh/CMakeLists.txt	2011-01-16 23:09:26.301187400 +0100
@@ -99,6 +99,7 @@
   socket.c
   string.c
   wrapper.c
+  winpgntc.c
 )
 
 if (WITH_PCAP)
diff -Nru libssh-0.4.7.orig/libssh/keys.c libssh-0.4.7/libssh/keys.c
--- libssh-0.4.7.orig/libssh/keys.c	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/libssh/keys.c	2011-01-16 23:09:26.303187500 +0100
@@ -1106,7 +1106,6 @@
 }
 #endif
 
-#ifndef _WIN32
 ssh_string ssh_do_sign_with_agent(ssh_session session,
     struct ssh_buffer_struct *buf, struct ssh_public_key_struct *publickey) {
   struct ssh_buffer_struct *sigbuf = NULL;
@@ -1153,7 +1152,6 @@
 
   return signature;
 }
-#endif /* _WIN32 */
 
 /*
  * This function concats in a buffer the values needed to do a signature
diff -Nru libssh-0.4.7.orig/libssh/session.c libssh-0.4.7/libssh/session.c
--- libssh-0.4.7.orig/libssh/session.c	2010-12-27 20:09:54.000000000 +0100
+++ libssh-0.4.7/libssh/session.c	2011-01-16 23:09:26.305187600 +0100
@@ -92,12 +92,10 @@
   session->ssh1 = 0;
 #endif
 
-#ifndef _WIN32
     session->agent = agent_new(session);
     if (session->agent == NULL) {
       goto err;
     }
-#endif /* _WIN32 */
 
     session->identity = ssh_list_new();
     if (session->identity == NULL) {
@@ -171,9 +169,7 @@
   while (session->channels) {
     channel_free(session->channels);
   }
-#ifndef _WIN32
   agent_free(session->agent);
-#endif /* _WIN32 */
   if (session->client_kex.methods) {
     for (i = 0; i < 10; i++) {
       SAFE_FREE(session->client_kex.methods[i]);
diff -Nru libssh-0.4.7.orig/libssh/winpgntc.c libssh-0.4.7/libssh/winpgntc.c
--- libssh-0.4.7.orig/libssh/winpgntc.c	1970-01-01 01:00:00.000000000 +0100
+++ libssh-0.4.7/libssh/winpgntc.c	2011-01-16 23:12:10.727592000 +0100
@@ -0,0 +1,84 @@
+/*
+ * winpgntc.c - interact with pageant on windows
+ *
+ * This file is part of the SSH Library
+ *
+ * Copyright (c) 2011 Patrick Spendrin <ps_ml@gmx.de>
+ *
+ * The SSH Library is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or (at your
+ * option) any later version.
+ *
+ * The SSH Library is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with the SSH Library; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+ * MA 02111-1307, USA.
+ */
+
+/* This file is based on the winpgntc.c from Putty sources. Putty License applies as well */
+
+#include <stdio.h>
+#include <stdlib.h>
+
+#include "libssh/agent.h"
+
+#define AGENT_COPYDATA_ID 0x804e50ba   /* random goop */
+#define AGENT_MAX_MSGLEN  8192
+
+#define GET_32BIT(cp) \
+  (((unsigned long)(unsigned char)(cp)[0] << 24) | \
+  ((unsigned long)(unsigned char)(cp)[1] << 16) | \
+  ((unsigned long)(unsigned char)(cp)[2] << 8) | \
+  ((unsigned long)(unsigned char)(cp)[3]))
+
+int agent_query(void *in, int inlen, void **out, int *outlen)
+{
+    HWND hwnd;
+    char mapname[25];
+    HANDLE filemap;
+    unsigned char *p, *ret;
+    int id, retlen;
+    COPYDATASTRUCT cds;
+
+    *out = NULL;
+    *outlen = 0;
+
+    hwnd = FindWindow("Pageant", "Pageant");
+    if (!hwnd)
+        return 1;           /* *out == NULL, so failure */
+    sprintf(mapname, "PageantRequest%08x", (unsigned)GetCurrentThreadId());
+    filemap = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE,
+                                0, AGENT_MAX_MSGLEN, mapname);
+    if (filemap == NULL || filemap == INVALID_HANDLE_VALUE)
+        return 1;            /* *out == NULL, so failure */
+    p = MapViewOfFile(filemap, FILE_MAP_WRITE, 0, 0, 0);
+    memcpy(p, in, inlen);
+    cds.dwData = AGENT_COPYDATA_ID;
+    cds.cbData = 1 + strlen(mapname);
+    cds.lpData = mapname;
+
+    /*
+     * The user either passed a null callback (indicating that the
+     * query is required to be synchronous) or CreateThread failed.
+     * Either way, we need a synchronous request.
+     */
+    id = SendMessage(hwnd, WM_COPYDATA, (WPARAM) NULL, (LPARAM) &cds);
+    if (id > 0) {
+    retlen = 4 + GET_32BIT(p);
+    ret = (unsigned char *)malloc(retlen*sizeof(unsigned char));
+    if (ret) {
+        memcpy(ret, p, retlen);
+        *out = ret;
+        *outlen = retlen;
+    }
+    }
+    UnmapViewOfFile(p);
+    CloseHandle(filemap);
+    return 1;
+}
diff -Nru libssh-0.4.7.orig/libssh/winpgntc.h libssh-0.4.7/libssh/winpgntc.h
--- libssh-0.4.7.orig/libssh/winpgntc.h	1970-01-01 01:00:00.000000000 +0100
+++ libssh-0.4.7/libssh/winpgntc.h	2011-01-16 23:12:44.485522900 +0100
@@ -0,0 +1,34 @@
+/*
+ * winpgntc.h - interact with pageant on windows
+ *
+ * This file is part of the SSH Library
+ *
+ * Copyright (c) 2011 Patrick Spendrin <ps_ml@gmx.de>
+ *
+ * The SSH Library is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or (at your
+ * option) any later version.
+ *
+ * The SSH Library is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+ * License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with the SSH Library; see the file COPYING.  If not, write to
+ * the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+ * MA 02111-1307, USA.
+ */
+
+
+#ifndef __WINPGNTC_H
+#define __WINPGNTC_H
+
+#ifdef _WIN32
+#include "libssh/agent.h"
+
+int agent_query(void *in, int inlen, void **out, int *outlen);
+
+#endif
+#endif /* __WINPGNTC_H */
