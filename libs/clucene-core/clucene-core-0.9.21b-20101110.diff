diff -Nru clucene-core-0.9.21b.orig/src/CLucene/CLConfig.h clucene-core-0.9.21b/src/CLucene/CLConfig.h
--- clucene-core-0.9.21b.orig/src/CLucene/CLConfig.h	2008-10-23 19:44:37.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/CLConfig.h	2010-11-26 16:08:51.986998700 +0100
@@ -63,6 +63,9 @@
 //define this to set an exact directory for the lock dir (not recommended)
 //all other methods of getting the temporary directory will be ignored
 //#define LUCENE_LOCK_DIR "/tmp"
+#ifdef _WIN32_WCE
+#define LUCENE_LOCK_DIR "\\Temp"
+#endif
 //
 //define this to try and load the lock dir from this specified environment variable
 #define LUCENE_LOCK_DIR_ENV_1 "TEMP"
@@ -70,7 +73,11 @@
 #define LUCENE_LOCK_DIR_ENV_2 "TMP"
 //define this if you want to have a fallback directory, if not defined then 
 //the lockdirectory will be the index directory
+#ifndef _WIN32_WCE
 #define LUCENE_LOCK_DIR_ENV_FALLBACK "/tmp"
+#else
+#define LUCENE_LOCK_DIR_ENV_FALLBACK "\\Temp"
+#endif
 //
 ////////////////////////////////////////////////////////////////////
 
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/clucene-config.h.cmake clucene-core-0.9.21b/src/CLucene/clucene-config.h.cmake
--- clucene-core-0.9.21b.orig/src/CLucene/clucene-config.h.cmake	2008-10-23 19:44:37.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/clucene-config.h.cmake	2010-11-26 16:08:51.990999000 +0100
@@ -1,378 +1,518 @@
 #ifndef _SRC_CLUCENE_CLUCENE_CONFIG_H
 #define _SRC_CLUCENE_CLUCENE_CONFIG_H 1
  
-/* src/CLucene/clucene-config.h. 
-*  Generated automatically at end of cmake.
+/*
+src/CLucene/clucene-config.h.
+Generated
+automatically
+at
+end
+of
+configure.
 */
+/* config.h.tmp.  Generated by configure.  */
+/* config.h.tmp.in.  Generated from configure.ac by autoheader.  */
 
-/* Compulsary headers. cmake will fail if these are not found:
- * Eventually we will take these out of StdHeader to simplify it all a bit.
-*/
-#define _CL_HAVE_ALGORITHM 1
-#define _CL_HAVE_FUNCTIONAL  1
-#define _CL_HAVE_MAP  1
-#define _CL_HAVE_VECTOR  1
-#define _CL_HAVE_LIST  1
-#define _CL_HAVE_SET  1
-#define _CL_HAVE_MATH_H  1 
-#define _CL_HAVE_STDARG_H  1
-#define _CL_HAVE_STDEXCEPT 1
-#define _CL_HAVE_FCNTL_H  1 
-
-#define _CL_HAVE_WCSCPY  1 
-#define _CL_HAVE_WCSNCPY  1 
-#define _CL_HAVE_WCSCAT  1 
-#define _CL_HAVE_WCSCHR  1 
-#define _CL_HAVE_WCSSTR  1 
-#define _CL_HAVE_WCSLEN  1 
-#define _CL_HAVE_WCSCMP  1 
-#define _CL_HAVE_WCSNCMP  1 
-#define _CL_HAVE_WCSCSPN  1 
-
-/* CMake will look for these headers: */
-
-/* Define to 1 if you have the ANSI C header files. */
-#cmakedefine _CL_STDC_HEADERS  1 
-
-/* Define to 1 if you have the <string.h> header file. */
-#cmakedefine _CL_HAVE_STRING_H  1
-
-/* Define to 1 if you have the <strings.h> header file. */
-#cmakedefine _CL_HAVE_STRINGS_H  1 
-
-/* Define to 1 if you have the <memory.h> header file. */
-#cmakedefine _CL_HAVE_MEMORY_H  1 
-
-/* Define to 1 if you have the <unistd.h> header file. */
-#cmakedefine _CL_HAVE_UNISTD_H  1 
-
-/* Define to 1 if you have the <io.h> header file. */
-#cmakedefine _CL_HAVE_IO_H  1 
-
-/* Define to 1 if you have the <direct.h> header file. */
-#cmakedefine _CL_HAVE_DIRECT_H  1 
-
-/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'. */
-#cmakedefine _CL_HAVE_DIRENT_H  1 
-
-/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'. */
-#cmakedefine _CL_HAVE_SYS_DIR_H
-
-/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'. */
-#cmakedefine _CL_HAVE_SYS_NDIR_H
-
-/* Define to 1 if you have the <errno.h> header file. */
-#cmakedefine _CL_HAVE_ERRNO_H  1 
-
-/* Define to 1 if you have the <wchar.h> header file. */
-#cmakedefine _CL_HAVE_WCHAR_H  1 
+/* Disable multithreading */
+#ifndef _CL_DISABLE_MULTITHREADING
+#cmakedefine _CL_DISABLE_MULTITHREADING  1
+#endif
 
-/* Define to 1 if you have a functioning <wchar.h> header file. */
-#cmakedefine _CL_HAVE_WCTYPE_H   
+/* Define to 1 if you have the <algorithm> header file. */
+#ifndef _CL_HAVE_ALGORITHM 
+#cmakedefine _CL_HAVE_ALGORITHM  1
+#endif
 
 /* Define to 1 if you have the <ctype.h> header file. */
+#ifndef _CL_HAVE_CTYPE_H 
 #cmakedefine _CL_HAVE_CTYPE_H  1 
-
-/* Define to 1 if you have the <windows.h> header file. */
-#cmakedefine _CL_HAVE_WINDOWS_H  1 
-
-/* Define to 1 if you have the <sys/types.h> header file. */
-#cmakedefine _CL_HAVE_SYS_TYPES_H  1 
-
-/* Define to 1 if you have the <inttypes.h> header file. */
-#cmakedefine _CL_HAVE_INTTYPES_H  1 
-
-
-/* CMake will look for these symbols: */
-
-/* Define to 1 if the system has the type `float_t'. */
-//todo: HACK
-#define _CL_HAVE_FLOAT_T  1 
-
-#ifdef __MINGW32__
-typedef float float_t;
 #endif
 
-
-/* Define to 1 if the system has the type `intptr_t'. */
-//todo: HACK
-#define _CL_HAVE_INTPTR_T  1 
-
-/* Define to 1 if the system has the type `wchar_t'. */
-//todo: HACK
-#define _CL_HAVE_WCHAR_T  1 
-
-
-
-/* CMake will look for these functions: */
-
-/* Define to 1 if you have the `printf' function. */
-#cmakedefine _CL_HAVE_PRINTF  1 
-
-/* Define to 1 if you have the `snprintf' function. */
-#cmakedefine _CL_HAVE_SNPRINTF  1 
- 
-
-
-/* CMake will determine these module specificics */
-
-/* Define if you have POSIX threads libraries and header files. */
-#cmakedefine _CL_HAVE_PTHREAD  1 
-
-/* Define if you have POSIX threads libraries and header files. */
-#cmakedefine _CL_HAVE_WIN32_THREADS  1 
-
-/* define if the compiler supports ISO C++ standard library */
-#cmakedefine _CL_HAVE_STD   
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-/* Disable multithreading */
-#cmakedefine _CL_DISABLE_MULTITHREADING
-
+/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.
+   */
+#ifndef _CL_HAVE_DIRENT_H 
+#cmakedefine _CL_HAVE_DIRENT_H  1 
+#endif
 
 /* Define to 1 if you have the <dlfcn.h> header file. */
-#cmakedefine _CL_HAVE_DLFCN_H  1 
+#ifndef _CL_HAVE_DLFCN_H
+#cmakedefine _CL_HAVE_DLFCN_H  1
+#endif
 
+/* Define to 1 if you have the <errno.h> header file. */
+#ifndef _CL_HAVE_ERRNO_H 
+#cmakedefine _CL_HAVE_ERRNO_H  1 
+#endif
 
 /* Define to 1 if you have the <ext/hash_map> header file. */
+#ifndef _CL_HAVE_EXT_HASH_MAP 
 #cmakedefine _CL_HAVE_EXT_HASH_MAP  1 
+#endif
 
 /* Define to 1 if you have the <ext/hash_set> header file. */
+#ifndef _CL_HAVE_EXT_HASH_SET 
 #cmakedefine _CL_HAVE_EXT_HASH_SET  1 
+#endif
 
+/* Define to 1 if you have the <fcntl.h> header file. */
+#ifndef _CL_HAVE_FCNTL_H 
+#cmakedefine _CL_HAVE_FCNTL_H  1 
+#endif
+
+/* Define to 1 if the system has the type `float_t'. */
+#ifndef _CL_HAVE_FLOAT_T
+#cmakedefine _CL_HAVE_FLOAT_T  1
+#endif
 
 /* Define to 1 if you have the <functional> header file. */
+#ifndef _CL_HAVE_FUNCTIONAL 
+#cmakedefine _CL_HAVE_FUNCTIONAL  1 
+#endif
 
 /* Does not support new float byte<->float conversions */
+#ifndef _CL_HAVE_FUNCTIONING_FLOAT_BYTE 
 #cmakedefine _CL_HAVE_FUNCTIONING_FLOAT_BYTE   
+#endif
 
 /* Define to 1 if you have the `getpagesize' function. */
-#cmakedefine _CL_HAVE_GETPAGESIZE
+#ifndef _CL_HAVE_GETPAGESIZE 
+#cmakedefine _CL_HAVE_GETPAGESIZE  1 
+#endif
 
 /* Define to 1 if you have the <hash_map> header file. */
-#cmakedefine _CL_HAVE_HASH_MAP
+#ifndef _CL_HAVE_HASH_MAP
+#cmakedefine _CL_HAVE_HASH_MAP  1
+#endif
 
 /* Define to 1 if you have the <hash_set> header file. */
-#cmakedefine _CL_HAVE_HASH_SET
+#ifndef _CL_HAVE_HASH_SET
+#cmakedefine _CL_HAVE_HASH_SET  1
+#endif
+
+/* Define to 1 if the system has the type `intptr_t'. */
+#ifndef _CL_HAVE_INTPTR_T 
+#cmakedefine _CL_HAVE_INTPTR_T  1 
+#endif
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#ifndef _CL_HAVE_INTTYPES_H 
+#cmakedefine _CL_HAVE_INTTYPES_H  1 
+#endif
 
+/* Define to 1 if you have the <list> header file. */
+#ifndef _CL_HAVE_LIST 
+#cmakedefine _CL_HAVE_LIST  1 
+#endif
 
 /* Define to 1 if you have the `lltoa' function. */
-#cmakedefine _CL_HAVE_LLTOA
+#ifndef _CL_HAVE_LLTOA
+#cmakedefine _CL_HAVE_LLTOA  1
+#endif
 
 /* Define to 1 if you have the `lltow' function. */
-#cmakedefine _CL_HAVE_LLTOW
+#ifndef _CL_HAVE_LLTOW 
+#cmakedefine _CL_HAVE_LLTOW  1 
+#endif
 
-/* Define to 1 if long double works and has more range or precision than double. */
+/* Define to 1 if long double works and has more range or precision than
+   double. */
+#ifndef _CL_HAVE_LONG_DOUBLE 
 #cmakedefine _CL_HAVE_LONG_DOUBLE  1 
+#endif
 
+/* Define to 1 if you have the <map> header file. */
+#ifndef _CL_HAVE_MAP 
+#cmakedefine _CL_HAVE_MAP  1 
+#endif
 
+/* Define to 1 if you have the <math.h> header file. */
+#ifndef _CL_HAVE_MATH_H 
+#cmakedefine _CL_HAVE_MATH_H  1 
+#endif
 
+/* Define to 1 if you have the <memory.h> header file. */
+#ifndef _CL_HAVE_MEMORY_H 
+#cmakedefine _CL_HAVE_MEMORY_H  1 
+#endif
 
 /* Define to 1 if you have a working `mmap' system call. */
-#cmakedefine _CL_HAVE_MMAP  1 
+#ifndef _CL_HAVE_MMAP
+#cmakedefine _CL_HAVE_MMAP 1
+#endif
 
 /* define if the compiler implements namespaces */
-#cmakedefine _CL_HAVE_NAMESPACES   
+#ifndef _CL_HAVE_NAMESPACES 
+#cmakedefine _CL_HAVE_NAMESPACES 1
+#endif
 
 /* Define if you have the nanosleep function */
-#cmakedefine _CL_HAVE_NANOSLEEP  1 
+#ifndef _CL_HAVE_NANOSLEEP
+#cmakedefine _CL_HAVE_NANOSLEEP  1
+#endif
 
 /* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
-#cmakedefine _CL_HAVE_NDIR_H
+#ifndef _CL_HAVE_NDIR_H
+#cmakedefine _CL_HAVE_NDIR_H  1
+#endif
 
 /* Does not support new float byte<->float conversions */
-#cmakedefine _CL_HAVE_NO_FLOAT_BYTE
+#ifndef _CL_HAVE_NO_FLOAT_BYTE
+#cmakedefine _CL_HAVE_NO_FLOAT_BYTE  1
+#endif
 
 /* Does not support try/catch blocks */
-#cmakedefine _CL_HAVE_NO_FUNCTION_TRY_BLOCKS
+#ifndef _CL_HAVE_NO_FUNCTION_TRY_BLOCKS
+#cmakedefine _CL_HAVE_NO_FUNCTION_TRY_BLOCKS  1
+#endif
 
+/* Define to 1 if you have the `printf' function. */
+#ifndef _CL_HAVE_PRINTF 
+#cmakedefine _CL_HAVE_PRINTF  1 
+#endif
+
+/* Define if you have POSIX threads libraries and header files. */
+#ifndef _CL_HAVE_PTHREAD
+#cmakedefine _CL_HAVE_PTHREAD  1
+#endif
 
 /* Define if recursive pthread mutexes are available */
-#cmakedefine _CL_HAVE_PTHREAD_MUTEX_RECURSIVE  1 
+#ifndef _CL_HAVE_PTHREAD_MUTEX_RECURSIVE
+#cmakedefine _CL_HAVE_PTHREAD_MUTEX_RECURSIVE  1
+#endif
 
+/* Define to 1 if you have the <set> header file. */
+#ifndef _CL_HAVE_SET 
+#cmakedefine _CL_HAVE_SET  1 
+#endif
 
+/* Define to 1 if you have the `snprintf' function. */
+#ifndef _CL_HAVE_SNPRINTF 
+#cmakedefine _CL_HAVE_SNPRINTF  1 
+#endif
 
 /* Defined if the snprintf overflow test fails */
-#cmakedefine _CL_HAVE_SNPRINTF_BUG
+#ifndef _CL_HAVE_SNPRINTF_BUG
+#cmakedefine _CL_HAVE_SNPRINTF_BUG  1
+#endif
 
 /* Define to 1 if you have the `snwprintf' function. */
-#cmakedefine _CL_HAVE_SNWPRINTF
+#ifndef _CL_HAVE_SNWPRINTF
+#cmakedefine _CL_HAVE_SNWPRINTF  1
+#endif
 
+/* define if the compiler supports ISO C++ standard library */
+#ifndef _CL_HAVE_STD 
+#cmakedefine _CL_HAVE_STD   
+#endif
 
+/* Define to 1 if you have the <stdarg.h> header file. */
+#ifndef _CL_HAVE_STDARG_H 
+#cmakedefine _CL_HAVE_STDARG_H  1 
+#endif
+
+/* Define to 1 if you have the <stdexcept> header file. */
+#ifndef _CL_HAVE_STDEXCEPT
+#cmakedefine _CL_HAVE_STDEXCEPT   
+#endif
 
 /* Define to 1 if you have the <stdint.h> header file. */
+#ifndef _CL_HAVE_STDINT_H 
 #cmakedefine _CL_HAVE_STDINT_H  1 
+#endif
 
 /* Define to 1 if you have the <stdlib.h> header file. */
+#ifndef _CL_HAVE_STDLIB_H 
 #cmakedefine _CL_HAVE_STDLIB_H  1 
+#endif
 
 /* define if the compiler supports Standard Template Library */
+#ifndef _CL_HAVE_STL 
 #cmakedefine _CL_HAVE_STL   
+#endif
 
+/* Define to 1 if you have the <strings.h> header file. */
+#ifndef _CL_HAVE_STRINGS_H 
+#cmakedefine _CL_HAVE_STRINGS_H  1 
+#endif
+
+/* Define to 1 if you have the <string.h> header file. */
+#ifndef _CL_HAVE_STRING_H 
+#cmakedefine _CL_HAVE_STRING_H  1 
+#endif
 
 /* Define to 1 if you have the `strlwr' function. */
-#cmakedefine _CL_HAVE_STRLWR
+#ifndef _CL_HAVE_STRLWR
+#cmakedefine _CL_HAVE_STRLWR  1
+#endif
 
 /* Define to 1 if you have the `strtoll' function. */
-#cmakedefine _CL_HAVE_STRTOLL
+#ifndef _CL_HAVE_STRTOLL
+#cmakedefine _CL_HAVE_STRTOLL  1
+#endif
 
 /* Define to 1 if you have the `strupr' function. */
-#cmakedefine _CL_HAVE_STRUPR
+#ifndef _CL_HAVE_STRUPR
+#cmakedefine _CL_HAVE_STRUPR  1
+#endif
 
 /* Defined if the swprintf test fails */
-#cmakedefine _CL_HAVE_SWPRINTF_BUG   
+#ifndef _CL_HAVE_SWPRINTF_BUG 
+#cmakedefine _CL_HAVE_SWPRINTF_BUG 1
+#endif
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+#ifndef _CL_HAVE_SYS_DIR_H
+#cmakedefine _CL_HAVE_SYS_DIR_H 1
+#endif
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+#ifndef _CL_HAVE_SYS_NDIR_H
+#cmakedefine _CL_HAVE_SYS_NDIR_H 1
+#endif
 
 /* Define to 1 if you have the <sys/stat.h> header file. */
+#ifndef _CL_HAVE_SYS_STAT_H 
 #cmakedefine _CL_HAVE_SYS_STAT_H  1 
+#endif
 
 /* Define to 1 if you have the <sys/timeb.h> header file. */
+#ifndef _CL_HAVE_SYS_TIMEB_H 
 #cmakedefine _CL_HAVE_SYS_TIMEB_H  1 
+#endif
 
+/* Define to 1 if you have the <sys/types.h> header file. */
+#ifndef _CL_HAVE_SYS_TYPES_H 
+#cmakedefine _CL_HAVE_SYS_TYPES_H  1 
+#endif
 
 /* Define to 1 if you have the <tchar.h> header file. */
-#cmakedefine _CL_HAVE_TCHAR_H
+#ifndef _CL_HAVE_TCHAR_H 
+#cmakedefine _CL_HAVE_TCHAR_H  1 
+#endif
 
 /* Define to 1 if you have the `tell' function. */
-#cmakedefine _CL_HAVE_TELL
+#ifndef _CL_HAVE_TELL 
+#cmakedefine _CL_HAVE_TELL  1 
+#endif
 
+/* Define to 1 if you have the <unistd.h> header file. */
+#ifndef _CL_HAVE_UNISTD_H 
+#cmakedefine _CL_HAVE_UNISTD_H  1 
+#endif
 
+/* Define to 1 if you have the <vector> header file. */
+#ifndef _CL_HAVE_VECTOR 
+#cmakedefine _CL_HAVE_VECTOR  1 
+#endif
 
 /* Define to 1 if you have the `vsnwprintf' function. */
-#cmakedefine _CL_HAVE_VSNWPRINTF
+#ifndef _CL_HAVE_VSNWPRINTF
+#cmakedefine _CL_HAVE_VSNWPRINTF  1
+#endif
+
+/* Define to 1 if you have the <wchar.h> header file. */
+#ifndef _CL_HAVE_WCHAR_H 
+#cmakedefine _CL_HAVE_WCHAR_H  1 
+#endif
+
+/* Define to 1 if the system has the type `wchar_t'. */
+#ifndef _CL_HAVE_WCHAR_T 
+#cmakedefine _CL_HAVE_WCHAR_T  1 
+#endif
 
 /* Define to 1 if you have the `wcscasecmp' function. */
-#cmakedefine _CL_HAVE_WCSCASECMP
+#ifndef _CL_HAVE_WCSCASECMP
+#cmakedefine _CL_HAVE_WCSCASECMP  1
+#endif
 
 /* Define to 1 if you have the `wcscat' function. */
+#ifndef _CL_HAVE_WCSCAT 
 #cmakedefine _CL_HAVE_WCSCAT  1 
+#endif
 
 /* Define to 1 if you have the `wcschr' function. */
+#ifndef _CL_HAVE_WCSCHR 
 #cmakedefine _CL_HAVE_WCSCHR  1 
+#endif
 
 /* Define to 1 if you have the `wcscmp' function. */
+#ifndef _CL_HAVE_WCSCMP 
 #cmakedefine _CL_HAVE_WCSCMP  1 
+#endif
 
 /* Define to 1 if you have the `wcscpy' function. */
+#ifndef _CL_HAVE_WCSCPY 
 #cmakedefine _CL_HAVE_WCSCPY  1 
+#endif
 
 /* Define to 1 if you have the `wcscspn' function. */
+#ifndef _CL_HAVE_WCSCSPN 
 #cmakedefine _CL_HAVE_WCSCSPN  1 
+#endif
 
 /* Define to 1 if you have the `wcsicmp' function. */
-#cmakedefine _CL_HAVE_WCSICMP
+#ifndef _CL_HAVE_WCSICMP 
+#cmakedefine _CL_HAVE_WCSICMP  1 
+#endif
 
 /* Define to 1 if you have the `wcslen' function. */
+#ifndef _CL_HAVE_WCSLEN 
 #cmakedefine _CL_HAVE_WCSLEN  1 
+#endif
 
 /* Define to 1 if you have the `wcsncmp' function. */
+#ifndef _CL_HAVE_WCSNCMP 
 #cmakedefine _CL_HAVE_WCSNCMP  1 
+#endif
 
 /* Define to 1 if you have the `wcsncpy' function. */
+#ifndef _CL_HAVE_WCSNCPY 
 #cmakedefine _CL_HAVE_WCSNCPY  1 
+#endif
 
 /* Define to 1 if you have the `wcsstr' function. */
+#ifndef _CL_HAVE_WCSSTR 
 #cmakedefine _CL_HAVE_WCSSTR  1 
+#endif
 
 /* Define to 1 if you have the `wcstod' function. */
-#cmakedefine _CL_HAVE_WCSTOD
+#ifndef _CL_HAVE_WCSTOD 
+#cmakedefine _CL_HAVE_WCSTOD  1 
+#endif
 
 /* Define to 1 if you have the `wcstoll' function. */
-#cmakedefine _CL_HAVE_WCSTOLL
+#ifndef _CL_HAVE_WCSTOLL 
+#cmakedefine _CL_HAVE_WCSTOLL  1 
+#endif
 
 /* Define to 1 if you have the `wcsupr' function. */
-#cmakedefine _CL_HAVE_WCSUPR
+#ifndef _CL_HAVE_WCSUPR 
+#cmakedefine _CL_HAVE_WCSUPR  1 
+#endif
+
+/* Define to 1 if you have a functioning <wchar.h> header file. */
+#ifndef _CL_HAVE_WCTYPE_H 
+#cmakedefine _CL_HAVE_WCTYPE_H   1
+#endif
+
+/* Define to 1 if you have the <windows.h> header file. */
+#ifndef _CL_HAVE_WINDOWS_H
+#cmakedefine _CL_HAVE_WINDOWS_H 1
+#endif
 
+#ifdef _CL_HAVE_WINDOWS_H
+#define LUCENE_USE_WINDOWS_H  1
+#endif
 
 /* Define to 1 if you have the `wprintf' function. */
-#cmakedefine _CL_HAVE_WPRINTF
+#ifndef _CL_HAVE_WPRINTF
+#cmakedefine _CL_HAVE_WPRINTF  1
+#endif
 
 /* Define to 1 if you have the `_filelength' function. */
-#cmakedefine _CL_HAVE__FILELENGTH
+#ifndef _CL_HAVE__FILELENGTH 
+#cmakedefine _CL_HAVE__FILELENGTH  1 
+#endif
 
 /* How to define a static const in a class */
+#ifndef LUCENE_STATIC_CONSTANT_SYNTAX 
 #cmakedefine LUCENE_STATIC_CONSTANT_SYNTAX  1 
+#endif
 
 /* Name of package */
+#ifndef _CL_PACKAGE 
 #cmakedefine _CL_PACKAGE  "clucene-core" 
+#endif
 
 /* Define to the address where bug reports for this package should be sent. */
+#ifndef _CL_PACKAGE_BUGREPORT 
 #cmakedefine _CL_PACKAGE_BUGREPORT  "" 
+#endif
 
 /* Define to the full name of this package. */
+#ifndef _CL_PACKAGE_NAME 
 #cmakedefine _CL_PACKAGE_NAME  "" 
+#endif
 
 /* Define to the full name and version of this package. */
+#ifndef _CL_PACKAGE_STRING 
 #cmakedefine _CL_PACKAGE_STRING  "" 
+#endif
 
 /* Define to the one symbol short name of this package. */
+#ifndef _CL_PACKAGE_TARNAME 
 #cmakedefine _CL_PACKAGE_TARNAME  "" 
+#endif
 
 /* Define to the version of this package. */
+#ifndef _CL_PACKAGE_VERSION 
 #cmakedefine _CL_PACKAGE_VERSION  "" 
+#endif
 
 /* Define to the necessary symbol if this constant uses a non-standard name on
    your system. */
-#cmakedefine _CL_PTHREAD_CREATE_JOINABLE
+/* #undef _CL_PTHREAD_CREATE_JOINABLE */
 
 /* The size of a `unsigned char', as computed by sizeof. */
-#cmakedefine _CL_SIZEOF_UNSIGNED_CHAR
+/* #undef _CL_SIZEOF_UNSIGNED_CHAR */
 
 /* The size of a `unsigned int', as computed by sizeof. */
-#cmakedefine _CL_SIZEOF_UNSIGNED_INT
+/* #undef _CL_SIZEOF_UNSIGNED_INT */
 
 /* The size of a `unsigned long', as computed by sizeof. */
-#cmakedefine _CL_SIZEOF_UNSIGNED_LONG
+/* #undef _CL_SIZEOF_UNSIGNED_LONG */
 
 /* The size of a `unsigned long long', as computed by sizeof. */
-#cmakedefine _CL_SIZEOF_UNSIGNED_LONG_LONG
+/* #undef _CL_SIZEOF_UNSIGNED_LONG_LONG */
 
 /* The size of a `unsigned __int64', as computed by sizeof. */
-#cmakedefine _CL_SIZEOF_UNSIGNED___INT64
+/* #undef _CL_SIZEOF_UNSIGNED___INT64 */
 
 /* Define to 1 if the `S_IS*' macros in <sys/stat.h> do not work properly. */
-#cmakedefine _CL_STAT_MACROS_BROKEN
+/* #undef _CL_STAT_MACROS_BROKEN */
+
+/* Define to 1 if you have the ANSI C header files. */
+#ifndef _CL_STDC_HEADERS 
+#cmakedefine _CL_STDC_HEADERS  1 
+#endif
 
 /* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#ifndef _CL_TIME_WITH_SYS_TIME 
 #cmakedefine _CL_TIME_WITH_SYS_TIME  1 
+#endif
 
 /* Version number of package */
-#cmakedefine _CL_VERSION  "0.9.15" 
+#ifndef _CL_VERSION 
+#define _CL_VERSION  "@CLUCENE_VERSION@"
+#endif
 
 /* Forces into Ascii mode */
-#cmakedefine _ASCII
+/* #undef _ASCII */
 
 /* Conditional Debugging */
-#cmakedefine _CL__CND_DEBUG
+/* #undef _CL__CND_DEBUG */
 
 /* debuging option */
-#cmakedefine _DEBUG
+/* #undef _DEBUG */
 
 /* Number of bits in a file offset, on hosts where this is settable. */
-#cmakedefine _FILE_OFFSET_BITS
+/* #undef _FILE_OFFSET_BITS */
 
 /* Define for large files, on AIX-style hosts. */
-#cmakedefine _LARGE_FILES
+/* #undef _LARGE_FILES */
 
 /* If not already defined, then define as a datatype of *exactly* 32 bits. */
-#cmakedefine uint32_t
+/* #undef uint32_t */
 
 /* If not already defined, then define as a datatype of *exactly* 64 bits. */
-#cmakedefine uint64_t
+/* #undef uint64_t */
 
 /* If not already defined, then define as a datatype of *exactly* 8 bits. */
-#cmakedefine uint8_t
- 
+/* #undef uint8_t */
 
+/* once:
+_SRC_CLUCENE_CLUCENE_CONFIG_H
+*/
 #endif
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/config/compiler.h clucene-core-0.9.21b/src/CLucene/config/compiler.h
--- clucene-core-0.9.21b.orig/src/CLucene/config/compiler.h	2008-10-23 19:44:36.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/config/compiler.h	2010-11-26 16:08:51.993999100 +0100
@@ -202,7 +202,8 @@
 		 // long double's are not working (reported by Mark Ashworth on Solaris 64)
 		 //   typedef long double float_t;    /* `float' expressions are evaluated as `long double'.  */
 		 //#else
-		    typedef double float_t;
+            // on windows, we will just use it
+		    typedef long double float_t;
 		 //#endif
 		#endif
 
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/config/CompilerGcc.h clucene-core-0.9.21b/src/CLucene/config/CompilerGcc.h
--- clucene-core-0.9.21b.orig/src/CLucene/config/CompilerGcc.h	2008-10-23 19:44:36.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/config/CompilerGcc.h	2010-11-26 16:08:51.996999300 +0100
@@ -159,5 +159,5 @@
 	    #define _realpath(rel,abs) _fullpath(abs,rel,CL_MAX_PATH)
 	#endif
 	//also required by mingw
-	#define _rename rename
+  #endif
 #endif
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/config/CompilerMsvc.h clucene-core-0.9.21b/src/CLucene/config/CompilerMsvc.h
--- clucene-core-0.9.21b.orig/src/CLucene/config/CompilerMsvc.h	2008-10-23 19:44:36.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/config/CompilerMsvc.h	2010-11-26 16:08:51.999999500 +0100
@@ -88,8 +88,10 @@
 # define fileHandleStat _fstat
 #endif
 
+#ifndef _WIN32_WCE
 //_rename is not defined???
 #define _rename rename
+#endif
 
 #define CL_MAX_PATH 260 //give the windef.h value for this...
 #define _realpath(rel,abs) _fullpath(abs,rel,CL_MAX_PATH)
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/config/define_std.h clucene-core-0.9.21b/src/CLucene/config/define_std.h
--- clucene-core-0.9.21b.orig/src/CLucene/config/define_std.h	2008-10-23 19:44:36.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/config/define_std.h	2010-11-26 16:08:52.001999600 +0100
@@ -11,8 +11,12 @@
 //Of course it is preferable to use the autoconf generated
 //list, but then not all systems can do this :)
 
+#ifndef _WIN32_WCE
 //we support long files - 64 bit file functions
 #define _LARGE_FILES
+#else
+#undef _LARGE_FILES
+#endif
 
 //support namespaces
 #define _CL_HAVE_NAMESPACES
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/config/repl_tchar.cpp clucene-core-0.9.21b/src/CLucene/config/repl_tchar.cpp
--- clucene-core-0.9.21b.orig/src/CLucene/config/repl_tchar.cpp	1970-01-01 01:00:00.000000000 +0100
+++ clucene-core-0.9.21b/src/CLucene/config/repl_tchar.cpp	2010-11-26 16:08:52.003999700 +0100
@@ -0,0 +1,14 @@
+#include <QString>
+#include "repl_tchar.h"
+
+wchar_t* i64tot(__int64 value, wchar_t* str, int radix)
+{
+  wcscpy(str, (wchar_t *) QString::number(value, radix).utf16());
+  return str;
+}
+
+__int64 tcstoi64(const wchar_t *nptr, wchar_t **endptr, int base)
+{
+  bool ok;
+  return QString::fromUtf16((ushort*) nptr).toInt(&ok, base);
+}
\ No newline at end of file
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/config/repl_tchar.h clucene-core-0.9.21b/src/CLucene/config/repl_tchar.h
--- clucene-core-0.9.21b.orig/src/CLucene/config/repl_tchar.h	2008-10-23 19:44:36.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/config/repl_tchar.h	2010-11-26 16:08:52.005999800 +0100
@@ -90,6 +90,14 @@
 #else //HAVE_TCHAR_H
  #include <tchar.h>
  
+  #ifdef _WIN32_WCE
+  #define _i64tot i64tot
+  wchar_t* i64tot(__int64 value, wchar_t* str, int radix);
+
+  #define _tcstoi64 tcstoi64
+  __int64 tcstoi64(const wchar_t *nptr, wchar_t **endptr, int base);
+  #endif //_WIN32_WCE
+ 
  //some tchar headers miss these...
  #ifndef _tcstoi64
  	#if defined(_UCS2)
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/document/DateField.cpp clucene-core-0.9.21b/src/CLucene/document/DateField.cpp
--- clucene-core-0.9.21b.orig/src/CLucene/document/DateField.cpp	2008-10-23 19:44:37.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/document/DateField.cpp	2010-11-26 16:08:52.007999900 +0100
@@ -28,6 +28,7 @@
 	if (time > DATEFIELD_DATE_MAX)
 	  _CLTHROWA (CL_ERR_IllegalArgument, "time too late (past DATEFIELD_DATE_MAX"); //todo: make richer error
 	
+
 	_i64tot(time, buf, 36);
 	int32_t bufLen = _tcslen(buf);
 	
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/StdHeader.cpp clucene-core-0.9.21b/src/CLucene/StdHeader.cpp
--- clucene-core-0.9.21b.orig/src/CLucene/StdHeader.cpp	2008-10-23 19:44:37.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/StdHeader.cpp	2010-11-26 16:08:52.011000100 +0100
@@ -15,8 +15,10 @@
 #if defined(_CLCOMPILER_MSVC) && defined(_DEBUG)
 	#define CRTDBG_MAP_ALLOC
 	#include <stdlib.h>
+#ifndef _WIN32_WCE
 	#include <crtdbg.h>
 #endif
+#endif
 
 CL_NS_USE(util)
 
diff -Nru clucene-core-0.9.21b.orig/src/CLucene/store/FSDirectory.cpp clucene-core-0.9.21b/src/CLucene/store/FSDirectory.cpp
--- clucene-core-0.9.21b.orig/src/CLucene/store/FSDirectory.cpp	2008-10-23 20:01:52.000000000 +0200
+++ clucene-core-0.9.21b/src/CLucene/store/FSDirectory.cpp	2010-11-26 16:08:52.015000300 +0100
@@ -10,7 +10,9 @@
 #include "CLucene/util/Misc.h"
 #include "CLucene/util/MD5Digester.h"
 #include "CLucene/debug/condition.h"
-
+#ifdef _WIN32
+#include <direct.h>
+#endif
 #include "CLucene/util/dirent.h" //if we have dirent, then the native one will be used
 
 CL_NS_DEF(store)
@@ -41,7 +43,7 @@
 	  handle->fhandle  = _open(path, O_BINARY | O_RDONLY | O_RANDOM, _S_IREAD );
 	  
 	  //Check if a valid handle was retrieved
-	  if (handle->fhandle < 0){
+	  if (handle->fhandle == -1){
 		int err = errno;
         if ( err == ENOENT )
 		    _CLTHROWA(CL_ERR_IO, "File does not exist");
@@ -81,7 +83,7 @@
 #endif
   }
   FSDirectory::FSIndexInput::SharedHandle::~SharedHandle() throw(CLuceneError&){
-    if ( fhandle >= 0 ){
+    if ( fhandle != -1 ){
       if ( _close(fhandle) != 0 )
         _CLTHROWA(CL_ERR_IO, "File IO Close error");
       else
@@ -140,7 +142,7 @@
 void FSDirectory::FSIndexInput::readInternal(uint8_t* b, const int32_t len) {
 	SCOPED_LOCK_MUTEX(*handle->THIS_LOCK)
 	CND_PRECONDITION(handle!=NULL,"shared file handle has closed");
-	CND_PRECONDITION(handle->fhandle>=0,"file is not open");
+	CND_PRECONDITION(handle->fhandle!=-1,"file is not open");
 
 	if ( handle->_fpos != _pos ){
 		if ( fileSeek(handle->fhandle,_pos,SEEK_SET) != _pos ){
@@ -173,7 +175,7 @@
 	else // added by JBP
 	  fhandle = _open( path, O_BINARY | O_RDWR | O_RANDOM | O_CREAT, _S_IREAD | _S_IWRITE);
 
-	if ( fhandle < 0 ){
+	if ( fhandle == -1 ){
         int err = errno;
         if ( err == ENOENT )
     	    _CLTHROWA(CL_ERR_IO, "File does not exist");
@@ -197,7 +199,7 @@
 
   /** output methods: */
   void FSDirectory::FSIndexOutput::flushBuffer(const uint8_t* b, const int32_t size) {
-	  CND_PRECONDITION(fhandle>=0,"file is not open");
+	  CND_PRECONDITION(fhandle!=-1,"file is not open");
       if ( size > 0 && _write(fhandle,b,size) != size )
         _CLTHROWA(CL_ERR_IO, "File IO Write error");
   }
@@ -217,7 +219,7 @@
   }
 
   void FSDirectory::FSIndexOutput::seek(const int64_t pos) {
-    CND_PRECONDITION(fhandle>=0,"file is not open");
+    CND_PRECONDITION(fhandle!=-1,"file is not open");
     BufferedIndexOutput::seek(pos);
 	int64_t ret = fileSeek(fhandle,pos,SEEK_SET);
 	if ( ret != pos ){
@@ -278,9 +280,10 @@
 			if ( _mkdir(directory) == -1 ){
 				_CLTHROWA(CL_ERR_IO,"Cannot create temp directory"); //todo: make richer error
 			}
-		}
+      } else {
 		if ( !(fstat.st_mode & S_IFDIR) ){
 			_CLTHROWA(CL_ERR_IO, "Found regular file where directory expected"); //todo: make richer error: " + lockDir);
+      }
     }
 	
 
@@ -667,7 +670,7 @@
     }
     int32_t r = _open(lockFile,  O_RDWR | O_CREAT | O_RANDOM | O_EXCL, 
     	_S_IREAD | _S_IWRITE); //must do this or file will be created Read only
-	if ( r < 0 )
+	if ( r == -1 )
 	  return false;
 	else{
 	  _close(r);
diff -Nru clucene-core-0.9.21b.orig/src/cmake/FindWcecompat.cmake clucene-core-0.9.21b/src/cmake/FindWcecompat.cmake
--- clucene-core-0.9.21b.orig/src/cmake/FindWcecompat.cmake	1970-01-01 01:00:00.000000000 +0100
+++ clucene-core-0.9.21b/src/cmake/FindWcecompat.cmake	2010-11-26 16:08:52.020000600 +0100
@@ -0,0 +1,33 @@
+# Try to find Wcecompat functionality
+# Once done this will define
+#
+#  WCECOMPAT_FOUND - system has Wcecompat
+#  WCECOMPAT_INCLUDE_DIR - Wcecompat include directory
+#  WCECOMPAT_LIBRARIES - Libraries needed to use Wcecompat
+#
+# Copyright (c) 2010, Andreas Holzammer, <andy@kdab.com>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+
+if(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+  set(Wcecompat_FIND_QUIETLY TRUE)
+endif(WCECOMPAT_INCLUDE_DIR AND WCECOMPAT_LIB_FOUND)
+
+find_path(WCECOMPAT_INCLUDE_DIR errno.h PATH_SUFFIXES wcecompat)
+
+set(WCECOMPAT_LIB_FOUND FALSE)
+
+if(WCECOMPAT_INCLUDE_DIR)
+    find_library(WCECOMPAT_LIBRARIES NAMES wcecompat wcecompatex )
+    if(WCECOMPAT_LIBRARIES)
+      set(WCECOMPAT_LIB_FOUND TRUE)
+    endif(WCECOMPAT_LIBRARIES)
+endif(WCECOMPAT_INCLUDE_DIR)
+
+# I have no idea what this is about, but it seems to be used quite often, so I add this here
+set(WCECOMPAT_CONST const)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(Wcecompat  DEFAULT_MSG  WCECOMPAT_LIBRARIES  WCECOMPAT_LIB_FOUND)
+
+mark_as_advanced(WCECOMPAT_INCLUDE_DIR  WCECOMPAT_LIBRARIES  WCECOMPAT_CONST  WCECOMPAT_LIB_FOUND)
diff -Nru clucene-core-0.9.21b.orig/src/CMakeLists.txt clucene-core-0.9.21b/src/CMakeLists.txt
--- clucene-core-0.9.21b.orig/src/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ clucene-core-0.9.21b/src/CMakeLists.txt	2010-11-26 16:08:52.023000800 +0100
@@ -0,0 +1,415 @@
+project(CLucene)
+cmake_minimum_required(VERSION 2.4)
+
+# include specific modules
+set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
+
+if(WINCE)
+    find_package(Wcecompat REQUIRED)
+    include_directories(${WCECOMPAT_INCLUDE_DIR})
+    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${WCECOMPAT_INCLUDE_DIR})
+    
+    find_package(Qt4 REQUIRED COMPONENTS QtCore )
+    include(${QT_USE_FILE})
+    include_directories(${QT_INCLUDE_DIR})
+endif(WINCE)
+
+INCLUDE(CheckIncludeFile)
+INCLUDE(CheckIncludeFileCXX)
+INCLUDE(CheckFunctionExists)
+INCLUDE(CheckTypeSize)
+
+CHECK_INCLUDE_FILE_CXX(algorithm    _CL_HAVE_ALGORITHM)
+CHECK_INCLUDE_FILE_CXX(ext/hash_map _CL_HAVE_EXT_HASH_MAP)
+CHECK_INCLUDE_FILE_CXX(ext/hash_set _CL_HAVE_EXT_HASH_SET)
+CHECK_INCLUDE_FILE_CXX(functional   _CL_HAVE_FUNCTIONAL)
+CHECK_INCLUDE_FILE_CXX(hash_map     _CL_HAVE_HASH_MAP)
+CHECK_INCLUDE_FILE_CXX(hash_set     _CL_HAVE_HASH_SET)
+CHECK_INCLUDE_FILE_CXX(list         _CL_HAVE_LIST)
+CHECK_INCLUDE_FILE_CXX(map          _CL_HAVE_MAP)
+CHECK_INCLUDE_FILE_CXX(set          _CL_HAVE_SET)
+CHECK_INCLUDE_FILE_CXX(stdexcept    _CL_HAVE_STDEXCEPT)
+CHECK_INCLUDE_FILE_CXX(vector       _CL_HAVE_VECTOR)
+
+CHECK_INCLUDE_FILE(ctype.h      _CL_HAVE_CTYPE_H)
+CHECK_INCLUDE_FILE(dirent.h     _CL_HAVE_DIRENT_H)
+CHECK_INCLUDE_FILE(dlfcn.h      _CL_HAVE_DLFCN_H)
+CHECK_INCLUDE_FILE(errno.h      _CL_HAVE_ERRNO_H)
+CHECK_INCLUDE_FILE(fcntl.h      _CL_HAVE_FCNTL_H)
+CHECK_INCLUDE_FILE(inttypes.h   _CL_HAVE_INTTYPES_H)
+CHECK_INCLUDE_FILE(math.h       _CL_HAVE_MATH_H)
+CHECK_INCLUDE_FILE(memory.h     _CL_HAVE_MEMORY_H)
+CHECK_INCLUDE_FILE(ndir.h       _CL_HAVE_NDIR_H)
+CHECK_INCLUDE_FILE(stdarg.h     _CL_HAVE_STDARG_H)
+CHECK_INCLUDE_FILE(stdint.h     _CL_HAVE_STDINT_H)
+CHECK_INCLUDE_FILE(stdlib.h     _CL_HAVE_STDLIB_H)
+CHECK_INCLUDE_FILE(string.h     _CL_HAVE_STRING_H)
+CHECK_INCLUDE_FILE(strings.h    _CL_HAVE_STRINGS_H)
+CHECK_INCLUDE_FILE(sys/dir.h    _CL_HAVE_SYS_DIR_H)
+CHECK_INCLUDE_FILE(sys/ndir.h   _CL_HAVE_SYS_NDIR_H)
+CHECK_INCLUDE_FILE(sys/stat.h   _CL_HAVE_SYS_STAT_H)
+CHECK_INCLUDE_FILE(sys/timeb.h  _CL_HAVE_SYS_TIMEB_H)
+CHECK_INCLUDE_FILE(sys/types.h  _CL_HAVE_SYS_TYPES_H)
+CHECK_INCLUDE_FILE(tchar.h      _CL_HAVE_TCHAR_H)
+CHECK_INCLUDE_FILE(unistd.h     _CL_HAVE_UNISTD_H)
+CHECK_INCLUDE_FILE(wchar.h      _CL_HAVE_WCHAR_H)
+
+CHECK_FUNCTION_EXISTS(getpagesize _CL_HAVE_GETPAGESIZE)
+CHECK_FUNCTION_EXISTS(lltoa       _CL_HAVE_LLTOA)
+CHECK_FUNCTION_EXISTS(lltow       _CL_HAVE_LLTOW)
+CHECK_FUNCTION_EXISTS(nanosleep   _CL_HAVE_NANOSLEEP)
+CHECK_FUNCTION_EXISTS(printf      _CL_HAVE_PRINTF)
+CHECK_FUNCTION_EXISTS(snprintf    _CL_HAVE_SNPRINTF)
+CHECK_FUNCTION_EXISTS(snwprintf   _CL_HAVE_SNWPRINTF)
+CHECK_FUNCTION_EXISTS(strlwr      _CL_HAVE_STRLWR)
+CHECK_FUNCTION_EXISTS(strtoll     _CL_HAVE_STRTOLL)
+CHECK_FUNCTION_EXISTS(strupr      _CL_HAVE_STRUPR)
+CHECK_FUNCTION_EXISTS(tell        _CL_HAVE_TELL)
+CHECK_FUNCTION_EXISTS(vsnwprintf  _CL_HAVE_VSNWPRINTF)
+CHECK_FUNCTION_EXISTS(wcscasecmp  _CL_HAVE_WCSCASECMP)
+CHECK_FUNCTION_EXISTS(wcscat      _CL_HAVE_WCSCAT)
+CHECK_FUNCTION_EXISTS(wcschr      _CL_HAVE_WCSCHR)
+CHECK_FUNCTION_EXISTS(wcscmp      _CL_HAVE_WCSCMP)
+CHECK_FUNCTION_EXISTS(wcscpy      _CL_HAVE_WCSCPY)
+CHECK_FUNCTION_EXISTS(wcscspn     _CL_HAVE_WCSCSPN)
+CHECK_FUNCTION_EXISTS(wcsicmp     _CL_HAVE_WCSICMP)
+CHECK_FUNCTION_EXISTS(wcslen      _CL_HAVE_WCSLEN)
+CHECK_FUNCTION_EXISTS(wcsncmp     _CL_HAVE_WCSNCMP)
+CHECK_FUNCTION_EXISTS(wcsncpy     _CL_HAVE_WCSNCPY)
+CHECK_FUNCTION_EXISTS(wcsstr      _CL_HAVE_WCSSTR)
+CHECK_FUNCTION_EXISTS(wcstod      _CL_HAVE_WCSTOD)
+CHECK_FUNCTION_EXISTS(wcstoll     _CL_HAVE_WCSTOLL)
+CHECK_FUNCTION_EXISTS(wcsupr      _CL_HAVE_WCSUPR)
+CHECK_FUNCTION_EXISTS(wprintf     _CL_HAVE_WPRINTF)
+CHECK_FUNCTION_EXISTS(_filelength _CL_HAVE__FILELENGTH)
+
+if( _CL_HAVE_MATH_H )
+  SET( CMAKE_EXTRA_INCLUDE_FILES math.h )
+  CHECK_TYPE_SIZE(float_t  _CL_HAVE_FLOAT_T)
+endif( _CL_HAVE_MATH_H )
+
+CHECK_TYPE_SIZE(intptr_t _CL_HAVE_INTPTR_T)
+
+
+
+
+SET(_CL_HAVE_WCHAR_T ${_CL_HAVE_WCHAR_H})
+SET(_CL_HAVE_NAMESPACES 1)
+
+IF(WIN32)
+  SET(_CL_HAVE_WINDOWS_H 1)
+ENDIF(WIN32)
+
+IF(WIN32 AND MSVC)
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")
+ENDIF(WIN32 AND MSVC)
+
+configure_file(${CMAKE_SOURCE_DIR}/CLucene/clucene-config.h.cmake
+               ${CMAKE_BINARY_DIR}/CLucene/clucene-config.h)
+
+include_directories(
+    ${CMAKE_CURRENT_SOURCE_DIR}/CLucene
+    ${CMAKE_CURRENT_SOURCE_DIR}
+    ${CMAKE_BINARY_DIR}
+)
+
+set(clucene_SRCS
+   CLucene/analysis/standard/StandardAnalyzer.cpp
+   CLucene/analysis/standard/StandardFilter.cpp
+   CLucene/analysis/standard/StandardTokenizer.cpp
+
+   CLucene/analysis/AnalysisHeader.cpp
+   CLucene/analysis/Analyzers.cpp
+
+   CLucene/config/gunichartables.cpp
+   CLucene/config/repl_lltot.cpp
+   CLucene/config/repl_tcslwr.cpp
+   CLucene/config/repl_tcscasecmp.cpp
+   CLucene/config/threads.cpp
+   CLucene/config/utf8.cpp
+
+   CLucene/debug/condition.cpp
+   CLucene/debug/error.cpp
+#   CLucene/debug/mempool.cpp
+   CLucene/debug/memtracking.cpp
+
+   CLucene/document/DateField.cpp
+   CLucene/document/Document.cpp
+   CLucene/document/Field.cpp
+
+   CLucene/index/CompoundFile.cpp
+   CLucene/index/DocumentWriter.cpp
+   CLucene/index/FieldInfos.cpp
+   CLucene/index/FieldsReader.cpp
+   CLucene/index/FieldsWriter.cpp
+   CLucene/index/IndexModifier.cpp
+   CLucene/index/IndexReader.cpp
+   CLucene/index/IndexWriter.cpp
+   CLucene/index/MultiReader.cpp
+   CLucene/index/SegmentInfos.cpp
+   CLucene/index/SegmentMergeInfo.cpp
+   CLucene/index/SegmentMergeQueue.cpp
+   CLucene/index/SegmentMerger.cpp
+   CLucene/index/SegmentReader.cpp
+   CLucene/index/SegmentTermDocs.cpp
+   CLucene/index/SegmentTermEnum.cpp
+   CLucene/index/SegmentTermPositions.cpp
+   CLucene/index/SegmentTermVector.cpp
+   CLucene/index/Term.cpp
+   CLucene/index/TermInfo.cpp
+   CLucene/index/TermInfosReader.cpp
+   CLucene/index/TermInfosWriter.cpp
+   CLucene/index/TermVectorReader.cpp
+   CLucene/index/TermVectorWriter.cpp
+
+   CLucene/queryParser/Lexer.cpp
+   CLucene/queryParser/MultiFieldQueryParser.cpp
+   CLucene/queryParser/QueryParser.cpp
+   CLucene/queryParser/QueryParserBase.cpp
+   CLucene/queryParser/QueryToken.cpp
+   CLucene/queryParser/TokenList.cpp
+
+   CLucene/search/BooleanQuery.cpp
+   CLucene/search/BooleanScorer.cpp
+   CLucene/search/CachingWrapperFilter.cpp
+   CLucene/search/ChainedFilter.cpp
+   CLucene/search/ConjunctionScorer.cpp
+   CLucene/search/DateFilter.cpp
+   CLucene/search/ExactPhraseScorer.cpp
+   CLucene/search/Explanation.cpp
+   CLucene/search/FieldCache.cpp
+   CLucene/search/FieldCacheImpl.cpp
+   CLucene/search/FieldDocSortedHitQueue.cpp
+   CLucene/search/FieldSortedHitQueue.cpp
+   CLucene/search/FilteredTermEnum.cpp
+   CLucene/search/FuzzyQuery.cpp
+   CLucene/search/HitQueue.cpp
+   CLucene/search/Hits.cpp
+   CLucene/search/IndexSearcher.cpp
+   CLucene/search/MultiSearcher.cpp
+   CLucene/search/MultiTermQuery.cpp
+   CLucene/search/PhrasePositions.cpp
+   CLucene/search/PhraseQuery.cpp
+   CLucene/search/PhraseScorer.cpp
+   CLucene/search/PrefixQuery.cpp
+   CLucene/search/QueryFilter.cpp
+   CLucene/search/RangeFilter.cpp
+   CLucene/search/RangeQuery.cpp
+   CLucene/search/SearchHeader.cpp
+   CLucene/search/Similarity.cpp
+   CLucene/search/SloppyPhraseScorer.cpp
+   CLucene/search/Sort.cpp
+   CLucene/search/TermQuery.cpp
+   CLucene/search/TermScorer.cpp
+   CLucene/search/WildcardQuery.cpp
+   CLucene/search/WildcardTermEnum.cpp
+
+   CLucene/store/FSDirectory.cpp
+   CLucene/store/IndexInput.cpp
+   CLucene/store/IndexOutput.cpp
+   CLucene/store/Lock.cpp
+   CLucene/store/MMapInput.cpp
+   CLucene/store/RAMDirectory.cpp
+   CLucene/store/TransactionalRAMDirectory.cpp
+
+   CLucene/util/BitSet.cpp
+   CLucene/util/dirent.cpp
+   CLucene/util/Equators.cpp
+   CLucene/util/FastCharStream.cpp
+   CLucene/util/fileinputstream.cpp
+   CLucene/util/MD5Digester.cpp
+   CLucene/util/Misc.cpp
+   CLucene/util/Reader.cpp
+   CLucene/util/StringBuffer.cpp
+   CLucene/util/StringIntern.cpp
+   CLucene/util/ThreadLocal.cpp
+   CLucene/StdHeader.cpp
+)
+
+IF(WINCE)
+SET(clucene_SRCS
+  ${clucene_SRCS}
+  CLucene/config/repl_tchar.cpp
+)
+endif(WINCE)
+
+set(clucene_HDRS
+   CLucene/analysis/standard/StandardAnalyzer.h
+   CLucene/analysis/standard/StandardFilter.h
+   CLucene/analysis/standard/StandardTokenizer.h
+   CLucene/analysis/standard/StandardTokenizerConstants.h
+
+   CLucene/analysis/AnalysisHeader.h
+   CLucene/analysis/Analyzers.h
+
+   CLucene/config/Compiler.h
+   CLucene/config/CompilerBcb.h
+   CLucene/config/CompilerGcc.h
+   CLucene/config/CompilerMsvc.h
+   CLucene/config/define_std.h
+   CLucene/config/gunichartables.h
+   CLucene/config/PlatformMac.h
+   CLucene/config/PlatformUnix.h
+   CLucene/config/PlatformWin32.h
+   CLucene/config/repl_wchar.h
+   CLucene/config/threadCSection.h
+
+   CLucene/debug/condition.h
+   CLucene/debug/error.h
+   CLucene/debug/mem.h
+   #debug/pool.h
+
+   CLucene/document/DateField.h
+   CLucene/document/Document.h
+   CLucene/document/Field.h
+
+   CLucene/index/CompoundFile.h
+   CLucene/index/DocumentWriter.h
+   CLucene/index/FieldInfo.h
+   CLucene/index/FieldInfos.h
+   CLucene/index/FieldsReader.h
+   CLucene/index/FieldsWriter.h
+   CLucene/index/IndexModifier.h
+   CLucene/index/IndexReader.h
+   CLucene/index/IndexWriter.h
+   CLucene/index/MultiReader.h
+   CLucene/index/SegmentHeader.h
+   CLucene/index/SegmentInfos.h
+   CLucene/index/SegmentMergeInfo.h
+   CLucene/index/SegmentMergeQueue.h
+   CLucene/index/SegmentMerger.h
+   CLucene/index/SegmentTermEnum.h
+   CLucene/index/Term.h
+   CLucene/index/TermInfo.h
+   CLucene/index/TermInfosReader.h
+   CLucene/index/TermInfosWriter.h
+   CLucene/index/Terms.h
+   CLucene/index/TermVector.h
+
+   CLucene/queryParser/Lexer.h
+   CLucene/queryParser/MultiFieldQueryParser.h
+   CLucene/queryParser/QueryParser.h
+   CLucene/queryParser/QueryParserBase.h
+   #queryParser/QueryParserConstants.h
+   CLucene/queryParser/QueryToken.h
+   CLucene/queryParser/TokenList.h
+
+   CLucene/search/BooleanClause.h
+   CLucene/search/BooleanQuery.h
+   CLucene/search/BooleanScorer.h
+   CLucene/search/CachingWrapperFilter.h
+   CLucene/search/ChainedFilter.h
+   CLucene/search/Compare.h
+   CLucene/search/ConjunctionScorer.h
+   CLucene/search/DateFilter.h
+   CLucene/search/ExactPhraseScorer.h
+   CLucene/search/Explanation.h
+   CLucene/search/FieldCache.h
+   CLucene/search/FieldCacheImpl.h
+   CLucene/search/FieldDoc.h
+   CLucene/search/FieldDocSortedHitQueue.h
+   CLucene/search/FieldSortedHitQueue.h
+   CLucene/search/Filter.h
+   CLucene/search/FilteredTermEnum.h
+   CLucene/search/FuzzyQuery.h
+   CLucene/search/HitQueue.h
+   CLucene/search/IndexSearcher.h
+   CLucene/search/MultiSearcher.h
+   CLucene/search/MultiTermQuery.h
+   CLucene/search/PhrasePositions.h
+   CLucene/search/PhraseQuery.h
+   CLucene/search/PhraseQueue.h
+   CLucene/search/PhraseScorer.h
+   CLucene/search/PrefixQuery.h
+   CLucene/search/QueryFilter.h
+   CLucene/search/RangeFilter.h
+   CLucene/search/RangeQuery.h
+   #search/ScoreDoc.h
+   CLucene/search/Scorer.h
+   CLucene/search/SearchHeader.h
+   CLucene/search/Similarity.h
+   CLucene/search/SloppyPhraseScorer.h
+   CLucene/search/Sort.h
+   CLucene/search/TermQuery.h
+   CLucene/search/TermScorer.h
+   CLucene/search/WildcardQuery.h
+   CLucene/search/WildcardTermEnum.h
+
+   CLucene/store/Directory.h
+   CLucene/store/FSDirectory.h
+   CLucene/store/IndexInput.h
+   CLucene/store/IndexOutput.h
+   CLucene/store/InputStream.h
+   CLucene/store/Lock.h
+   CLucene/store/OutputStream.h
+   CLucene/store/RAMDirectory.h
+   CLucene/store/TransactionalRAMDirectory.h
+
+   CLucene/util/Arrays.h
+   CLucene/util/BitSet.h
+   CLucene/util/bufferedstream.h
+   CLucene/util/dirent.h
+   CLucene/util/Equators.h
+   CLucene/util/FastCharStream.h
+   CLucene/util/fileinputstream.h
+   CLucene/util/inputstreambuffer.h
+   CLucene/util/jstreamsconfig.h
+   CLucene/util/MD5Digester.h
+   CLucene/util/Misc.h
+   CLucene/util/PriorityQueue.h
+   CLucene/util/Reader.h
+   CLucene/util/streambase.h
+   CLucene/util/stringreader.h
+   CLucene/util/StringBuffer.h
+   CLucene/util/StringIntern.h
+   CLucene/util/ThreadLocal.h
+   CLucene/util/VoidList.h
+   CLucene/util/VoidMap.h
+)
+
+if(MSVC)
+    add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -Zc:wchar_t-)
+    include_directories(
+      analysis/standard
+      analysis
+      config
+      debug
+      document
+      index
+      queryParser
+      search
+      store
+      util
+    )
+endif(MSVC)
+
+if(WIN32)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif(WIN32)
+
+add_library(clucene-core STATIC ${clucene_HDRS} ${clucene_SRCS})
+
+install(TARGETS clucene-core
+                RUNTIME DESTINATION bin
+                LIBRARY DESTINATION lib
+                ARCHIVE DESTINATION lib
+)
+
+install(DIRECTORY ${CMAKE_SOURCE_DIR}/Clucene
+        DESTINATION include
+        PATTERN "*.cpp" EXCLUDE
+        PATTERN "*.am" EXCLUDE
+        PATTERN "*.in" EXCLUDE
+        PATTERN "README" EXCLUDE
+        PATTERN "*.v2" EXCLUDE
+        PATTERN "*.txt" EXCLUDE
+        PATTERN "*.cmake" EXCLUDE
+        PATTERN "*.h"
+)
+install(DIRECTORY ${CMAKE_BINARY_DIR}/Clucene
+        DESTINATION include
+        PATTERN "*.h"
+)
+
+install(FILES ${CMAKE_SOURCE_DIR}/CLucene.h
+        DESTINATION include)
