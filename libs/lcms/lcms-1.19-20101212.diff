diff -Nru lcms-1.19.orig/CMakeLists.txt lcms-1.19/CMakeLists.txt
--- lcms-1.19.orig/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ lcms-1.19/CMakeLists.txt	2010-12-19 00:56:23.210907200 +0100
@@ -0,0 +1,41 @@
+project(lcms)
+
+cmake_minimum_required(VERSION 2.6)
+
+option(BUILD_TOOLS "build jpegicc, tifficc and tiffdiff" ON)
+option(BUILD_TESTS "build test application" ON)
+option(BUILD_SAMPLES "build sample applications" ON)
+
+if(BUILD_TESTS)
+    enable_testing()
+endif(BUILD_TESTS)
+
+include_directories(
+${CMAKE_BINARY_DIR}/include 
+${CMAKE_SOURCE_DIR}/include
+)
+
+add_definitions(-DLCMS_DLL)
+
+add_subdirectory(src)
+
+if(BUILD_TOOLS)
+    find_package(JPEG)
+    find_package(TIFF)
+
+    if(JPEG_FOUND)
+        add_subdirectory(jpegicc)
+    endif(JPEG_FOUND)
+
+    if(TIFF_FOUND)
+        add_subdirectory(tifficc)
+    endif(TIFF_FOUND)
+endif(BUILD_TOOLS)
+
+if(BUILD_SAMPLES)
+    add_subdirectory(samples)
+endif(BUILD_SAMPLES)
+
+if(BUILD_TESTS)
+    add_subdirectory(testbed)
+endif(BUILD_TESTS)
diff -Nru lcms-1.19.orig/include/icc34.h lcms-1.19/include/icc34.h
--- lcms-1.19.orig/include/icc34.h	2009-10-30 16:57:45.000000000 +0100
+++ lcms-1.19/include/icc34.h	2010-12-19 00:40:27.402238100 +0100
@@ -144,7 +144,9 @@
  */
 
 
-#ifdef PACKAGE_NAME
+#ifndef _WIN32
+//#ifdef PACKAGE_NAME
+#error This header is broken! Please get it from somewhere else
 /*
   June 9, 2003, Adapted for use with configure by Bob Friesenhahn
   Added the stupid check for autoconf by Marti Maria. 
diff -Nru lcms-1.19.orig/include/icc34.h.in lcms-1.19/include/icc34.h.in
--- lcms-1.19.orig/include/icc34.h.in	2007-05-25 16:04:02.000000000 +0200
+++ lcms-1.19/include/icc34.h.in	2010-12-19 00:40:27.405238300 +0100
@@ -144,7 +144,9 @@
  */
 
 
-#ifdef PACKAGE_NAME
+#ifndef _WIN32
+//#ifdef PACKAGE_NAME
+#error This header is broken! Please get it from somewhere else
 /*
   June 9, 2003, Adapted for use with configure by Bob Friesenhahn
   Added the stupid check for autoconf by Marti Maria. 
diff -Nru lcms-1.19.orig/include/lcms.h lcms-1.19/include/lcms.h
--- lcms-1.19.orig/include/lcms.h	2009-10-30 16:57:45.000000000 +0100
+++ lcms-1.19/include/lcms.h	2010-12-19 01:51:48.993131100 +0100
@@ -371,7 +371,7 @@
 #      define LCMSAPI
 #   else
        // VC++
-#       define LCMSEXPORT  _stdcall
+#       define LCMSEXPORT cdecl
 #       ifdef LCMS_DLL_BUILD
 #           define LCMSAPI     __declspec(dllexport)
 #       else
@@ -1444,7 +1444,7 @@
 
 // Signal error from inside lcms code
 
-void cdecl cmsSignalError(int ErrorCode, const char *ErrorText, ...);
+LCMSAPI void LCMSEXPORT cmsSignalError(int ErrorCode, const char *ErrorText, ...);
 
 // Alignment handling (needed in ReadLUT16 and ReadLUT8)
 
@@ -1478,8 +1478,8 @@
 #define ROUND_FIXED_TO_INT(x)   (((x)+0x8000)>>16)
 
 
-Fixed32 cdecl FixedMul(Fixed32 a, Fixed32 b);
-Fixed32 cdecl FixedSquare(Fixed32 a);
+LCMSAPI Fixed32 LCMSEXPORT FixedMul(Fixed32 a, Fixed32 b);
+LCMSAPI Fixed32 LCMSEXPORT FixedSquare(Fixed32 a);
 
 
 #ifdef USE_INLINE
@@ -1489,13 +1489,13 @@
 
 #else
 
-Fixed32 cdecl ToFixedDomain(int a);              // (a * 65536.0 / 65535.0)
-int     cdecl FromFixedDomain(Fixed32 a);        // (a * 65535.0 + .5)
+LCMSAPI Fixed32 LCMSEXPORT ToFixedDomain(int a);              // (a * 65536.0 / 65535.0)
+LCMSAPI int     LCMSEXPORT FromFixedDomain(Fixed32 a);        // (a * 65535.0 + .5)
 
 #endif
 
-Fixed32 cdecl FixedLERP(Fixed32 a, Fixed32 l, Fixed32 h);
-WORD    cdecl FixedScale(WORD a, Fixed32 s);
+LCMSAPI Fixed32 LCMSEXPORT FixedLERP(Fixed32 a, Fixed32 l, Fixed32 h);
+LCMSAPI WORD    LCMSEXPORT FixedScale(WORD a, Fixed32 s);
 
 // Vector & Matrix operations. I'm using the notation frequently found in
 // literature. Mostly 'Graphic Gems' samples. Not to be same routines.
@@ -1516,40 +1516,40 @@
 
 
 
-void      cdecl VEC3init(LPVEC3 r, double x, double y, double z);   // double version
-void      cdecl VEC3initF(LPWVEC3 r, double x, double y, double z); // Fix32 version
-void      cdecl VEC3toFix(LPWVEC3 r, LPVEC3 v);
-void      cdecl VEC3fromFix(LPVEC3 r, LPWVEC3 v);
-void      cdecl VEC3scaleFix(LPWORD r, LPWVEC3 Scale);
-void      cdecl VEC3swap(LPVEC3 a, LPVEC3 b);
-void      cdecl VEC3divK(LPVEC3 r, LPVEC3 v, double d);
-void      cdecl VEC3perK(LPVEC3 r, LPVEC3 v, double d);
-void      cdecl VEC3minus(LPVEC3 r, LPVEC3 a, LPVEC3 b);
-void      cdecl VEC3perComp(LPVEC3 r, LPVEC3 a, LPVEC3 b);
-LCMSBOOL  cdecl VEC3equal(LPWVEC3 a, LPWVEC3 b, double Tolerance);
-LCMSBOOL  cdecl VEC3equalF(LPVEC3 a, LPVEC3 b, double Tolerance);
-void      cdecl VEC3scaleAndCut(LPWVEC3 r, LPVEC3 v, double d);
-void      cdecl VEC3cross(LPVEC3 r, LPVEC3 u, LPVEC3 v);
-void      cdecl VEC3saturate(LPVEC3 v);
-double    cdecl VEC3distance(LPVEC3 a, LPVEC3 b);
-double    cdecl VEC3length(LPVEC3 a);
-
-void      cdecl MAT3identity(LPMAT3 a);
-void      cdecl MAT3per(LPMAT3 r, LPMAT3 a, LPMAT3 b);
-void      cdecl MAT3perK(LPMAT3 r, LPMAT3 v, double d);
-int       cdecl MAT3inverse(LPMAT3 a, LPMAT3 b);
-LCMSBOOL  cdecl MAT3solve(LPVEC3 x, LPMAT3 a, LPVEC3 b);
-double    cdecl MAT3det(LPMAT3 m);
-void      cdecl MAT3eval(LPVEC3 r, LPMAT3 a, LPVEC3 v);
-void      cdecl MAT3toFix(LPWMAT3 r, LPMAT3 v);
-void      cdecl MAT3fromFix(LPMAT3 r, LPWMAT3 v);
-void      cdecl MAT3evalW(LPWVEC3 r, LPWMAT3 a, LPWVEC3 v);
-LCMSBOOL  cdecl MAT3isIdentity(LPWMAT3 a, double Tolerance);
-void      cdecl MAT3scaleAndCut(LPWMAT3 r, LPMAT3 v, double d);
+LCMSAPI void      LCMSEXPORT VEC3init(LPVEC3 r, double x, double y, double z);   // double version
+LCMSAPI void      LCMSEXPORT VEC3initF(LPWVEC3 r, double x, double y, double z); // Fix32 version
+LCMSAPI void      LCMSEXPORT VEC3toFix(LPWVEC3 r, LPVEC3 v);
+LCMSAPI void      LCMSEXPORT VEC3fromFix(LPVEC3 r, LPWVEC3 v);
+LCMSAPI void      LCMSEXPORT VEC3scaleFix(LPWORD r, LPWVEC3 Scale);
+LCMSAPI void      LCMSEXPORT VEC3swap(LPVEC3 a, LPVEC3 b);
+LCMSAPI void      LCMSEXPORT VEC3divK(LPVEC3 r, LPVEC3 v, double d);
+LCMSAPI void      LCMSEXPORT VEC3perK(LPVEC3 r, LPVEC3 v, double d);
+LCMSAPI void      LCMSEXPORT VEC3minus(LPVEC3 r, LPVEC3 a, LPVEC3 b);
+LCMSAPI void      LCMSEXPORT VEC3perComp(LPVEC3 r, LPVEC3 a, LPVEC3 b);
+LCMSAPI LCMSBOOL  LCMSEXPORT VEC3equal(LPWVEC3 a, LPWVEC3 b, double Tolerance);
+LCMSAPI LCMSBOOL  LCMSEXPORT VEC3equalF(LPVEC3 a, LPVEC3 b, double Tolerance);
+LCMSAPI void      LCMSEXPORT VEC3scaleAndCut(LPWVEC3 r, LPVEC3 v, double d);
+LCMSAPI void      LCMSEXPORT VEC3cross(LPVEC3 r, LPVEC3 u, LPVEC3 v);
+LCMSAPI void      LCMSEXPORT VEC3saturate(LPVEC3 v);
+LCMSAPI double    LCMSEXPORT VEC3distance(LPVEC3 a, LPVEC3 b);
+LCMSAPI double    LCMSEXPORT VEC3length(LPVEC3 a);
+
+LCMSAPI void      LCMSEXPORT MAT3identity(LPMAT3 a);
+LCMSAPI void      LCMSEXPORT MAT3per(LPMAT3 r, LPMAT3 a, LPMAT3 b);
+LCMSAPI void      LCMSEXPORT MAT3perK(LPMAT3 r, LPMAT3 v, double d);
+LCMSAPI int       LCMSEXPORT MAT3inverse(LPMAT3 a, LPMAT3 b);
+LCMSAPI LCMSBOOL  LCMSEXPORT MAT3solve(LPVEC3 x, LPMAT3 a, LPVEC3 b);
+LCMSAPI double    LCMSEXPORT MAT3det(LPMAT3 m);
+LCMSAPI void      LCMSEXPORT MAT3eval(LPVEC3 r, LPMAT3 a, LPVEC3 v);
+LCMSAPI void      LCMSEXPORT MAT3toFix(LPWMAT3 r, LPMAT3 v);
+LCMSAPI void      LCMSEXPORT MAT3fromFix(LPMAT3 r, LPWMAT3 v);
+LCMSAPI void      LCMSEXPORT MAT3evalW(LPWVEC3 r, LPWMAT3 a, LPWVEC3 v);
+LCMSAPI LCMSBOOL  LCMSEXPORT MAT3isIdentity(LPWMAT3 a, double Tolerance);
+LCMSAPI void      LCMSEXPORT MAT3scaleAndCut(LPWMAT3 r, LPMAT3 v, double d);
 
 // Is a table linear?
 
-int  cdecl cmsIsLinear(WORD Table[], int nEntries);
+LCMSAPI int  LCMSEXPORT cmsIsLinear(WORD Table[], int nEntries);
 
 // I hold this structures describing domain
 // details mainly for optimization purposes.
@@ -1590,25 +1590,25 @@
                } L16PARAMS, *LPL16PARAMS;
 
 
-void    cdecl cmsCalcL16Params(int nSamples, LPL16PARAMS p);
-void    cdecl cmsCalcCLUT16Params(int nSamples, int InputChan, int OutputChan, LPL16PARAMS p);
-void    cdecl cmsCalcCLUT16ParamsEx(int nSamples, int InputChan, int OutputChan, 
+LCMSAPI void    LCMSEXPORT cmsCalcL16Params(int nSamples, LPL16PARAMS p);
+LCMSAPI void    LCMSEXPORT cmsCalcCLUT16Params(int nSamples, int InputChan, int OutputChan, LPL16PARAMS p);
+LCMSAPI void    LCMSEXPORT cmsCalcCLUT16ParamsEx(int nSamples, int InputChan, int OutputChan, 
                                             LCMSBOOL lUseTetrahedral, LPL16PARAMS p);
 
-WORD    cdecl cmsLinearInterpLUT16(WORD Value, WORD LutTable[], LPL16PARAMS p);
-Fixed32 cdecl cmsLinearInterpFixed(WORD Value1, WORD LutTable[], LPL16PARAMS p);
-WORD    cdecl cmsReverseLinearInterpLUT16(WORD Value, WORD LutTable[], LPL16PARAMS p);
+LCMSAPI WORD    LCMSEXPORT cmsLinearInterpLUT16(WORD Value, WORD LutTable[], LPL16PARAMS p);
+LCMSAPI Fixed32 LCMSEXPORT cmsLinearInterpFixed(WORD Value1, WORD LutTable[], LPL16PARAMS p);
+LCMSAPI WORD    LCMSEXPORT cmsReverseLinearInterpLUT16(WORD Value, WORD LutTable[], LPL16PARAMS p);
 
-void cdecl cmsTrilinearInterp16(WORD Input[],
+LCMSAPI void LCMSEXPORT cmsTrilinearInterp16(WORD Input[],
                                 WORD Output[],
                                 WORD LutTable[],
                                 LPL16PARAMS p);
 
-void cdecl cmsTetrahedralInterp16(WORD Input[],
+LCMSAPI void LCMSEXPORT cmsTetrahedralInterp16(WORD Input[],
                                   WORD Output[],
                                   WORD LutTable[], LPL16PARAMS p);
 
-void cdecl cmsTetrahedralInterp8(WORD Input[],
+LCMSAPI void LCMSEXPORT cmsTetrahedralInterp8(WORD Input[],
                                  WORD Output[],
                                  WORD LutTable[],  LPL16PARAMS p);
 
@@ -1688,28 +1688,28 @@
                }; // LUT, FAR* LPLUT;
 
 
-LCMSBOOL         cdecl _cmsSmoothEndpoints(LPWORD Table, int nEntries);
+LCMSAPI LCMSBOOL         LCMSEXPORT _cmsSmoothEndpoints(LPWORD Table, int nEntries);
 
 
 // CRC of gamma tables
 
-unsigned int _cmsCrc32OfGammaTable(LPGAMMATABLE Table);
+LCMSAPI unsigned int _cmsCrc32OfGammaTable(LPGAMMATABLE Table);
 
 // Sampled curves
 
-LPSAMPLEDCURVE cdecl cmsAllocSampledCurve(int nItems);
-void           cdecl cmsFreeSampledCurve(LPSAMPLEDCURVE p);
-LPSAMPLEDCURVE cdecl cmsDupSampledCurve(LPSAMPLEDCURVE p);
-
-LPSAMPLEDCURVE cdecl cmsConvertGammaToSampledCurve(LPGAMMATABLE Gamma, int nPoints);
-LPGAMMATABLE   cdecl cmsConvertSampledCurveToGamma(LPSAMPLEDCURVE Sampled, double Max);
-
-void           cdecl cmsEndpointsOfSampledCurve(LPSAMPLEDCURVE p, double* Min, double* Max);
-void           cdecl cmsClampSampledCurve(LPSAMPLEDCURVE p, double Min, double Max);
-LCMSBOOL       cdecl cmsSmoothSampledCurve(LPSAMPLEDCURVE Tab, double SmoothingLambda);
-void           cdecl cmsRescaleSampledCurve(LPSAMPLEDCURVE p, double Min, double Max, int nPoints);
+LCMSAPI LPSAMPLEDCURVE LCMSEXPORT cmsAllocSampledCurve(int nItems);
+LCMSAPI void           LCMSEXPORT cmsFreeSampledCurve(LPSAMPLEDCURVE p);
+LCMSAPI LPSAMPLEDCURVE LCMSEXPORT cmsDupSampledCurve(LPSAMPLEDCURVE p);
+
+LCMSAPI LPSAMPLEDCURVE LCMSEXPORT cmsConvertGammaToSampledCurve(LPGAMMATABLE Gamma, int nPoints);
+LCMSAPI LPGAMMATABLE   LCMSEXPORT cmsConvertSampledCurveToGamma(LPSAMPLEDCURVE Sampled, double Max);
+
+LCMSAPI void           LCMSEXPORT cmsEndpointsOfSampledCurve(LPSAMPLEDCURVE p, double* Min, double* Max);
+LCMSAPI void           LCMSEXPORT cmsClampSampledCurve(LPSAMPLEDCURVE p, double Min, double Max);
+LCMSAPI LCMSBOOL       LCMSEXPORT cmsSmoothSampledCurve(LPSAMPLEDCURVE Tab, double SmoothingLambda);
+LCMSAPI void           LCMSEXPORT cmsRescaleSampledCurve(LPSAMPLEDCURVE p, double Min, double Max, int nPoints);
 
-LPSAMPLEDCURVE cdecl cmsJoinSampledCurves(LPSAMPLEDCURVE X, LPSAMPLEDCURVE Y, int nResultingPoints);
+LCMSAPI LPSAMPLEDCURVE LCMSEXPORT cmsJoinSampledCurves(LPSAMPLEDCURVE X, LPSAMPLEDCURVE Y, int nResultingPoints);
 
 // Shaper/Matrix handling
 
@@ -1734,40 +1734,40 @@
 
                } MATSHAPER, FAR* LPMATSHAPER;
 
-LPMATSHAPER cdecl cmsAllocMatShaper(LPMAT3 matrix, LPGAMMATABLE Shaper[], DWORD Behaviour);
-LPMATSHAPER cdecl cmsAllocMatShaper2(LPMAT3 matrix, LPGAMMATABLE In[], LPGAMMATABLE Out[], DWORD Behaviour);
+LCMSAPI LPMATSHAPER LCMSEXPORT cmsAllocMatShaper(LPMAT3 matrix, LPGAMMATABLE Shaper[], DWORD Behaviour);
+LCMSAPI LPMATSHAPER LCMSEXPORT cmsAllocMatShaper2(LPMAT3 matrix, LPGAMMATABLE In[], LPGAMMATABLE Out[], DWORD Behaviour);
 
-void        cdecl cmsFreeMatShaper(LPMATSHAPER MatShaper);
-void        cdecl cmsEvalMatShaper(LPMATSHAPER MatShaper, WORD In[], WORD Out[]);
+LCMSAPI void        LCMSEXPORT cmsFreeMatShaper(LPMATSHAPER MatShaper);
+LCMSAPI void        LCMSEXPORT cmsEvalMatShaper(LPMATSHAPER MatShaper, WORD In[], WORD Out[]);
 
-LCMSBOOL    cdecl cmsReadICCMatrixRGB2XYZ(LPMAT3 r, cmsHPROFILE hProfile);
+LCMSAPI LCMSBOOL    LCMSEXPORT cmsReadICCMatrixRGB2XYZ(LPMAT3 r, cmsHPROFILE hProfile);
 
-LPMATSHAPER cdecl cmsBuildInputMatrixShaper(cmsHPROFILE InputProfile);
-LPMATSHAPER cdecl cmsBuildOutputMatrixShaper(cmsHPROFILE OutputProfile);
+LCMSAPI LPMATSHAPER LCMSEXPORT cmsBuildInputMatrixShaper(cmsHPROFILE InputProfile);
+LCMSAPI LPMATSHAPER LCMSEXPORT cmsBuildOutputMatrixShaper(cmsHPROFILE OutputProfile);
 
 
 
 // White Point & Primary chromas handling
-LCMSBOOL cdecl cmsAdaptationMatrix(LPMAT3 r, LPMAT3 ConeMatrix, LPcmsCIEXYZ FromIll, LPcmsCIEXYZ ToIll);
-LCMSBOOL cdecl cmsAdaptMatrixToD50(LPMAT3 r, LPcmsCIExyY SourceWhitePt);
-LCMSBOOL cdecl cmsAdaptMatrixFromD50(LPMAT3 r, LPcmsCIExyY DestWhitePt);
+LCMSAPI LCMSBOOL LCMSEXPORT cmsAdaptationMatrix(LPMAT3 r, LPMAT3 ConeMatrix, LPcmsCIEXYZ FromIll, LPcmsCIEXYZ ToIll);
+LCMSAPI LCMSBOOL LCMSEXPORT cmsAdaptMatrixToD50(LPMAT3 r, LPcmsCIExyY SourceWhitePt);
+LCMSAPI LCMSBOOL LCMSEXPORT cmsAdaptMatrixFromD50(LPMAT3 r, LPcmsCIExyY DestWhitePt);
 
-LCMSBOOL cdecl cmsReadChromaticAdaptationMatrix(LPMAT3 r, cmsHPROFILE hProfile);
+LCMSAPI LCMSBOOL LCMSEXPORT cmsReadChromaticAdaptationMatrix(LPMAT3 r, cmsHPROFILE hProfile);
 
 // Inter-PCS conversion routines. They assume D50 as white point.
-void cdecl cmsXYZ2LabEncoded(WORD XYZ[3], WORD Lab[3]);
-void cdecl cmsLab2XYZEncoded(WORD Lab[3], WORD XYZ[3]);
+LCMSAPI void LCMSEXPORT cmsXYZ2LabEncoded(WORD XYZ[3], WORD Lab[3]);
+LCMSAPI void LCMSEXPORT cmsLab2XYZEncoded(WORD Lab[3], WORD XYZ[3]);
 
 // Retrieve text representation of WP
-void cdecl _cmsIdentifyWhitePoint(char *Buffer, LPcmsCIEXYZ WhitePt);
+LCMSAPI void LCMSEXPORT _cmsIdentifyWhitePoint(char *Buffer, LPcmsCIEXYZ WhitePt);
 
 // Quantize to WORD in a (MaxSamples - 1) domain
-WORD cdecl _cmsQuantizeVal(double i, int MaxSamples);
+LCMSAPI WORD LCMSEXPORT _cmsQuantizeVal(double i, int MaxSamples);
 
-LPcmsNAMEDCOLORLIST  cdecl cmsAllocNamedColorList(int n);
-int                  cdecl cmsReadICCnamedColorList(cmsHTRANSFORM xform, cmsHPROFILE hProfile, icTagSignature sig);
-void                 cdecl cmsFreeNamedColorList(LPcmsNAMEDCOLORLIST List);
-LCMSBOOL             cdecl cmsAppendNamedColor(cmsHTRANSFORM xform, const char* Name, WORD PCS[3], WORD Colorant[MAXCHANNELS]);
+LCMSAPI LPcmsNAMEDCOLORLIST  LCMSEXPORT cmsAllocNamedColorList(int n);
+LCMSAPI int                  LCMSEXPORT cmsReadICCnamedColorList(cmsHTRANSFORM xform, cmsHPROFILE hProfile, icTagSignature sig);
+LCMSAPI void                 LCMSEXPORT cmsFreeNamedColorList(LPcmsNAMEDCOLORLIST List);
+LCMSAPI LCMSBOOL             LCMSEXPORT cmsAppendNamedColor(cmsHTRANSFORM xform, const char* Name, WORD PCS[3], WORD Colorant[MAXCHANNELS]);
 
 
 // I/O
@@ -1835,20 +1835,20 @@
 
 
 // Create an empty template for virtual profiles
-cmsHPROFILE cdecl _cmsCreateProfilePlaceholder(void);
+LCMSAPI cmsHPROFILE LCMSEXPORT _cmsCreateProfilePlaceholder(void);
 
 // Search into tag dictionary
-icInt32Number cdecl _cmsSearchTag(LPLCMSICCPROFILE Profile, icTagSignature sig, LCMSBOOL lSignalError);
+LCMSAPI icInt32Number LCMSEXPORT _cmsSearchTag(LPLCMSICCPROFILE Profile, icTagSignature sig, LCMSBOOL lSignalError);
 
 // Search for a particular tag, replace if found or add new one else
-LPVOID _cmsInitTag(LPLCMSICCPROFILE Icc, icTagSignature sig, size_t size, const void* Init);
+LCMSAPI LPVOID _cmsInitTag(LPLCMSICCPROFILE Icc, icTagSignature sig, size_t size, const void* Init);
 
 
-LPLCMSICCPROFILE cdecl _cmsCreateProfileFromFilePlaceholder(const char* FileName);
-LPLCMSICCPROFILE cdecl _cmsCreateProfileFromMemPlaceholder(LPVOID MemPtr, DWORD dwSize);
+LCMSAPI LPLCMSICCPROFILE LCMSEXPORT _cmsCreateProfileFromFilePlaceholder(const char* FileName);
+LCMSAPI LPLCMSICCPROFILE LCMSEXPORT _cmsCreateProfileFromMemPlaceholder(LPVOID MemPtr, DWORD dwSize);
 
-void _cmsSetSaveToDisk(LPLCMSICCPROFILE Icc, const char* FileName);
-void _cmsSetSaveToMemory(LPLCMSICCPROFILE Icc, LPVOID MemPtr, size_t dwSize);
+LCMSAPI void _cmsSetSaveToDisk(LPLCMSICCPROFILE Icc, const char* FileName);
+LCMSAPI void _cmsSetSaveToMemory(LPLCMSICCPROFILE Icc, LPVOID MemPtr, size_t dwSize);
 
 
 
@@ -1969,8 +1969,8 @@
 
 // Packing & Unpacking
 
-_cmsFIXFN cdecl _cmsIdentifyInputFormat(_LPcmsTRANSFORM xform,  DWORD dwInput);
-_cmsFIXFN cdecl _cmsIdentifyOutputFormat(_LPcmsTRANSFORM xform, DWORD dwOutput);
+LCMSAPI _cmsFIXFN LCMSEXPORT _cmsIdentifyInputFormat(_LPcmsTRANSFORM xform,  DWORD dwInput);
+LCMSAPI _cmsFIXFN LCMSEXPORT _cmsIdentifyOutputFormat(_LPcmsTRANSFORM xform, DWORD dwOutput);
 
 
 // Conversion
@@ -1979,7 +1979,7 @@
 #define LabRel       1
 
 
-int cdecl cmsChooseCnvrt(int Absolute,
+LCMSAPI int LCMSEXPORT cmsChooseCnvrt(int Absolute,
                  int Phase1, LPcmsCIEXYZ BlackPointIn,
                              LPcmsCIEXYZ WhitePointIn,
                              LPcmsCIEXYZ IlluminantIn,
@@ -1998,55 +1998,55 @@
 
 // Clamping & Gamut handling
 
-LCMSBOOL cdecl   _cmsEndPointsBySpace(icColorSpaceSignature Space,
+LCMSAPI LCMSBOOL LCMSEXPORT   _cmsEndPointsBySpace(icColorSpaceSignature Space,
                             WORD **White, WORD **Black, int *nOutputs);
 
-WORD * cdecl _cmsWhiteBySpace(icColorSpaceSignature Space);
+LCMSAPI WORD * LCMSEXPORT _cmsWhiteBySpace(icColorSpaceSignature Space);
 
 
 
-WORD cdecl Clamp_L(Fixed32 in);
-WORD cdecl Clamp_ab(Fixed32 in);
+LCMSAPI WORD LCMSEXPORT Clamp_L(Fixed32 in);
+LCMSAPI WORD LCMSEXPORT Clamp_ab(Fixed32 in);
 
 // Detection of black point
 
 #define LCMS_BPFLAGS_D50_ADAPTED    0x0001
 
-int cdecl cmsDetectBlackPoint(LPcmsCIEXYZ BlackPoint, cmsHPROFILE hProfile, int Intent, DWORD dwFlags);
+LCMSAPI int LCMSEXPORT cmsDetectBlackPoint(LPcmsCIEXYZ BlackPoint, cmsHPROFILE hProfile, int Intent, DWORD dwFlags);
 
 // choose reasonable resolution
-int cdecl _cmsReasonableGridpointsByColorspace(icColorSpaceSignature Colorspace, DWORD dwFlags);
+LCMSAPI int LCMSEXPORT _cmsReasonableGridpointsByColorspace(icColorSpaceSignature Colorspace, DWORD dwFlags);
 
 // Precalculate device link
-LPLUT cdecl _cmsPrecalculateDeviceLink(cmsHTRANSFORM h, DWORD dwFlags);
+LCMSAPI LPLUT LCMSEXPORT _cmsPrecalculateDeviceLink(cmsHTRANSFORM h, DWORD dwFlags);
 
 // Precalculate black preserving device link
-LPLUT _cmsPrecalculateBlackPreservingDeviceLink(cmsHTRANSFORM hCMYK2CMYK, DWORD dwFlags);
+LCMSAPI LPLUT _cmsPrecalculateBlackPreservingDeviceLink(cmsHTRANSFORM hCMYK2CMYK, DWORD dwFlags);
 
 // Precalculate gamut check
-LPLUT cdecl _cmsPrecalculateGamutCheck(cmsHTRANSFORM h);
+LCMSAPI LPLUT LCMSEXPORT _cmsPrecalculateGamutCheck(cmsHTRANSFORM h);
 
 // Hot fixes bad profiles
-LCMSBOOL cdecl _cmsFixWhiteMisalignment(_LPcmsTRANSFORM p);
+LCMSAPI LCMSBOOL LCMSEXPORT _cmsFixWhiteMisalignment(_LPcmsTRANSFORM p);
 
 // Marks LUT as 8 bit on input
-LPLUT cdecl _cmsBlessLUT8(LPLUT Lut);
+LCMSAPI LPLUT LCMSEXPORT _cmsBlessLUT8(LPLUT Lut);
 
 // Compute gamut boundary
-LPLUT cdecl _cmsComputeGamutLUT(cmsHPROFILE hProfile, int Intent);
+LCMSAPI LPLUT LCMSEXPORT _cmsComputeGamutLUT(cmsHPROFILE hProfile, int Intent);
 
 // Compute softproof
-LPLUT cdecl _cmsComputeSoftProofLUT(cmsHPROFILE hProfile, int nIntent);
+LCMSAPI LPLUT LCMSEXPORT _cmsComputeSoftProofLUT(cmsHPROFILE hProfile, int nIntent);
 
 // Find a suitable prelinearization tables, matching the given transform
-void cdecl _cmsComputePrelinearizationTablesFromXFORM(cmsHTRANSFORM h[], int nTransforms, LPLUT Grid);
+LCMSAPI void LCMSEXPORT _cmsComputePrelinearizationTablesFromXFORM(cmsHTRANSFORM h[], int nTransforms, LPLUT Grid);
 
 
 // Build a tone curve for K->K' if possible (only works on CMYK)
-LPGAMMATABLE _cmsBuildKToneCurve(cmsHTRANSFORM hCMYK2CMYK, int nPoints);
+LCMSAPI LPGAMMATABLE _cmsBuildKToneCurve(cmsHTRANSFORM hCMYK2CMYK, int nPoints);
 
 // Validates a LUT
-LCMSBOOL cdecl _cmsValidateLUT(LPLUT NewLUT);
+LCMSAPI LCMSBOOL LCMSEXPORT _cmsValidateLUT(LPLUT NewLUT);
 
 
 // These are two VITAL macros, from converting between 8 and 16 bit
diff -Nru lcms-1.19.orig/jpegicc/CMakeLists.txt lcms-1.19/jpegicc/CMakeLists.txt
--- lcms-1.19.orig/jpegicc/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ lcms-1.19/jpegicc/CMakeLists.txt	2010-12-19 00:40:27.411238600 +0100
@@ -0,0 +1,18 @@
+set(jpegicc_SRCS
+    jpegicc.c 
+    iccjpeg.c 
+    ../samples/xgetopt.c 
+    ../samples/vprf.c
+)
+
+include_directories(${JPEG_INCLUDE_DIR})
+
+add_executable(jpegicc ${jpegicc_SRCS})
+target_link_libraries(jpegicc lcms ${JPEG_LIBRARIES})
+
+install(TARGETS jpegicc RUNTIME DESTINATION bin
+                        LIBRARY DESTINATION lib
+                        ARCHIVE DESTINATION lib)
+                        
+install(FILES jpegicc.1 DESTINATION share/man/man1)
+install(FILES iccjpeg.h DESTINATION include)
diff -Nru lcms-1.19.orig/samples/CMakeLists.txt lcms-1.19/samples/CMakeLists.txt
--- lcms-1.19.orig/samples/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ lcms-1.19/samples/CMakeLists.txt	2010-12-19 00:40:27.503243900 +0100
@@ -0,0 +1,35 @@
+set(icctrans_SRCS
+    icctrans.c 
+    xgetopt.c 
+    vprf.c
+)
+add_executable(icctrans ${icctrans_SRCS})
+target_link_libraries(icctrans lcms)
+
+set(wtpt_SRCS
+    wtpt.c 
+    xgetopt.c 
+)
+add_executable(wtpt ${wtpt_SRCS})
+target_link_libraries(wtpt lcms)
+
+set(icc2ps_SRCS
+    icc2ps.c 
+    xgetopt.c 
+)
+add_executable(icc2ps ${icc2ps_SRCS})
+target_link_libraries(icc2ps lcms)
+
+set(icclink_SRCS
+    icclink.c 
+    xgetopt.c 
+    vprf.c
+)
+add_executable(icclink ${icclink_SRCS})
+target_link_libraries(icclink lcms)
+
+install(TARGETS icctrans wtpt icc2ps icclink RUNTIME DESTINATION bin
+                                             LIBRARY DESTINATION lib
+                                             ARCHIVE DESTINATION lib)
+                                             
+install(FILES icctrans.1 wtpt.1 icc2ps.1 icclink.1 DESTINATION share/man/man1)
diff -Nru lcms-1.19.orig/src/CMakeLists.txt lcms-1.19/src/CMakeLists.txt
--- lcms-1.19.orig/src/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ lcms-1.19/src/CMakeLists.txt	2010-12-19 01:16:10.194798800 +0100
@@ -0,0 +1,64 @@
+# some configure checks:
+if(WIN32)
+    if(MSVC)
+        set(UINT8_T "unsigned char")
+        set(UINT16_T "unsigned short")
+        set(UINT32_T "unsigned long")
+        set(INT8_T "char")
+        set(INT16_T "short")
+        set(INT32_T "long")
+    else(MSVC)
+        set(UINT8_T "uint8_t")
+        set(UINT16_T "uint16_t")
+        set(UINT32_T "uint32_t")
+        set(INT8_T "int8_t")
+        set(INT16_T "int16_t")
+        set(INT32_T "int32_t")
+    endif(MSVC)
+    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../include/icc34.h.in ${CMAKE_BINARY_DIR}/icc34.h)
+endif(WIN32)
+
+set(lcms_SRCS
+  cmscnvrt.c 
+  cmserr.c 
+  cmsgamma.c 
+  cmsgmt.c 
+  cmsintrp.c 
+  cmsio0.c 
+  cmsio1.c 
+  cmslut.c
+  cmsmatsh.c
+  cmsmtrx.c
+  cmspack.c
+  cmspcs.c
+  cmswtpnt.c
+  cmsxform.c
+  cmssamp.c
+  cmscam97.c
+  cmsnamed.c
+  cmsps2.c
+  cmscam02.c
+  cmsvirt.c
+  cmscgats.c
+)
+
+if(WIN32)
+#    set(lcms_SRCS ${lcms_SRCS} lcms.def)
+    add_definitions(-DLCMS_DLL)
+    include_directories(${CMAKE_BINARY_DIR})
+endif(WIN32)
+
+add_library(lcms SHARED ${lcms_SRCS})
+set_target_properties(lcms PROPERTIES OUTPUT_NAME "lcms-1"
+                                      DEFINE_SYMBOL LCMS_DLL_BUILD)
+
+install(TARGETS lcms RUNTIME DESTINATION bin
+                     LIBRARY DESTINATION lib
+                     ARCHIVE DESTINATION lib)
+
+install(FILES ../include/lcms.h DESTINATION include)
+if(NOT WIN32)
+    install(FILES ../include/icc34.h DESTINATION include)
+else(NOT WIN32)
+    install(FILES ${CMAKE_BINARY_DIR}/icc34.h DESTINATION include)
+endif(NOT WIN32)
diff -Nru lcms-1.19.orig/src/cmserr.c lcms-1.19/src/cmserr.c
--- lcms-1.19.orig/src/cmserr.c	2009-11-13 10:05:08.000000000 +0100
+++ lcms-1.19/src/cmserr.c	2010-12-19 01:30:00.548292300 +0100
@@ -27,7 +27,7 @@
 // As a rule, only the functions visible from API can signal
 // errors.
 
-void cdecl cmsSignalError(int ErrorCode, const char *ErrorText, ...);
+void LCMSEXPORT cmsSignalError(int ErrorCode, const char *ErrorText, ...);
 
 int  LCMSEXPORT cmsErrorAction(int lAbort);
 void LCMSEXPORT cmsSetErrorHandler(cmsErrorHandlerFunction Fn);
@@ -39,7 +39,7 @@
 static cmsErrorHandlerFunction UserErrorHandler = (cmsErrorHandlerFunction) NULL;
 
 
-int LCMSEXPORT cmsErrorAction(int nAction)
+int cmsErrorAction(int nAction)
 {
        int nOld = nDoAbort;    
        nDoAbort = nAction;
@@ -47,7 +47,7 @@
        return nOld;
 }
 
-void LCMSEXPORT cmsSetErrorHandler(cmsErrorHandlerFunction Fn)
+void cmsSetErrorHandler(cmsErrorHandlerFunction Fn)
 {
        UserErrorHandler = Fn;
 }
diff -Nru lcms-1.19.orig/src/cmsgamma.c lcms-1.19/src/cmsgamma.c
--- lcms-1.19.orig/src/cmsgamma.c	2009-10-30 16:57:45.000000000 +0100
+++ lcms-1.19/src/cmsgamma.c	2010-12-19 01:14:01.618444700 +0100
@@ -34,21 +34,22 @@
 LPGAMMATABLE LCMSEXPORT cmsBuildParametricGamma(int nEntries, int Type, double Params[]);
 LPGAMMATABLE LCMSEXPORT cmsJoinGamma(LPGAMMATABLE InGamma, LPGAMMATABLE OutGamma);
 LPGAMMATABLE LCMSEXPORT cmsJoinGammaEx(LPGAMMATABLE InGamma, LPGAMMATABLE OutGamma, int nPoints);
-LCMSBOOL         LCMSEXPORT cmsSmoothGamma(LPGAMMATABLE Tab, double lambda);
-
-LCMSBOOL         cdecl _cmsSmoothEndpoints(LPWORD Table, int nPoints);
+LCMSBOOL     LCMSEXPORT cmsSmoothGamma(LPGAMMATABLE Tab, double lambda);
+LPSAMPLEDCURVE LCMSEXPORT cmsConvertGammaToSampledCurve(LPGAMMATABLE Gamma, int nPoints);
 
+LCMSBOOL     LCMSEXPORT _cmsSmoothEndpoints(LPWORD Table, int nPoints);
 
 // Sampled curves
 
-LPSAMPLEDCURVE cdecl cmsAllocSampledCurve(int nItems);
-void           cdecl cmsFreeSampledCurve(LPSAMPLEDCURVE p);
-void           cdecl cmsEndpointsOfSampledCurve(LPSAMPLEDCURVE p, double* Min, double* Max);
-void           cdecl cmsClampSampledCurve(LPSAMPLEDCURVE p, double Min, double Max);
-LCMSBOOL       cdecl cmsSmoothSampledCurve(LPSAMPLEDCURVE Tab, double SmoothingLambda);
-void           cdecl cmsRescaleSampledCurve(LPSAMPLEDCURVE p, double Min, double Max, int nPoints);
+LPSAMPLEDCURVE LCMSEXPORT cmsAllocSampledCurve(int nItems);
+void           LCMSEXPORT cmsFreeSampledCurve(LPSAMPLEDCURVE p);
+LPSAMPLEDCURVE LCMSEXPORT cmsDupSampledCurve(LPSAMPLEDCURVE p);
+void           LCMSEXPORT cmsEndpointsOfSampledCurve(LPSAMPLEDCURVE p, double* Min, double* Max);
+void           LCMSEXPORT cmsClampSampledCurve(LPSAMPLEDCURVE p, double Min, double Max);
+LCMSBOOL       LCMSEXPORT cmsSmoothSampledCurve(LPSAMPLEDCURVE Tab, double SmoothingLambda);
+void           LCMSEXPORT cmsRescaleSampledCurve(LPSAMPLEDCURVE p, double Min, double Max, int nPoints);
 
-LPSAMPLEDCURVE cdecl cmsJoinSampledCurves(LPSAMPLEDCURVE X, LPSAMPLEDCURVE Y, int nResultingPoints);
+LPSAMPLEDCURVE LCMSEXPORT cmsJoinSampledCurves(LPSAMPLEDCURVE X, LPSAMPLEDCURVE Y, int nResultingPoints);
 
 double LCMSEXPORT cmsEstimateGamma(LPGAMMATABLE t);
 double LCMSEXPORT cmsEstimateGammaEx(LPWORD GammaTable, int nEntries, double Thereshold);
diff -Nru lcms-1.19.orig/src/cmsintrp.c lcms-1.19/src/cmsintrp.c
--- lcms-1.19.orig/src/cmsintrp.c	2009-11-13 10:09:37.000000000 +0100
+++ lcms-1.19/src/cmsintrp.c	2010-12-19 01:19:56.724755600 +0100
@@ -24,6 +24,9 @@
 
 #include "lcms.h"
 
+WORD LCMSEXPORT cmsLinearInterpLUT16(WORD Value, WORD LutTable[], LPL16PARAMS p);
+void LCMSEXPORT cmsCalcL16Params(int nSamples, LPL16PARAMS p);
+
 void cmsCalcL16Params(int nSamples, LPL16PARAMS p)
 {
        p -> nSamples = nSamples;
diff -Nru lcms-1.19.orig/src/cmsmtrx.c lcms-1.19/src/cmsmtrx.c
--- lcms-1.19.orig/src/cmsmtrx.c	2009-10-30 16:57:45.000000000 +0100
+++ lcms-1.19/src/cmsmtrx.c	2010-12-19 01:21:36.623469500 +0100
@@ -25,33 +25,33 @@
 #include "lcms.h"
 
 
-void cdecl VEC3init(LPVEC3 r, double x, double y, double z);
-void cdecl VEC3initF(LPWVEC3 r, double x, double y, double z);
-void cdecl VEC3toFix(LPWVEC3 r, LPVEC3 v);
-void cdecl VEC3scaleFix(LPWORD r, LPWVEC3 Scale);
-void cdecl VEC3swap(LPVEC3 a, LPVEC3 b);
-void cdecl VEC3divK(LPVEC3 r, LPVEC3 v, double d);
-void cdecl VEC3perK(LPVEC3 r, LPVEC3 v, double d);
-void cdecl VEC3perComp(LPVEC3 r, LPVEC3 a, LPVEC3 b);
-void cdecl VEC3minus(LPVEC3 r, LPVEC3 a, LPVEC3 b);
-void cdecl VEC3scaleAndCut(LPWVEC3 r, LPVEC3 v, double d);
-void cdecl VEC3cross(LPVEC3 r, LPVEC3 u, LPVEC3 v);
-void cdecl VEC3saturate(LPVEC3 v);
-
-double cdecl VEC3length(LPVEC3 a);
-double cdecl VEC3distance(LPVEC3 a, LPVEC3 b);
-
-
-void      cdecl MAT3identity(LPMAT3 a);
-void      cdecl MAT3per(LPMAT3 r, LPMAT3 a, LPMAT3 b);
-int       cdecl MAT3inverse(LPMAT3 a, LPMAT3 b);
-LCMSBOOL  cdecl MAT3solve(LPVEC3 x, LPMAT3 a, LPVEC3 b);
-double    cdecl MAT3det(LPMAT3 m);
-void      cdecl MAT3eval(LPVEC3 r, LPMAT3 a, LPVEC3 v);
-void      cdecl MAT3toFix(LPWMAT3 r, LPMAT3 v);
-void      cdecl MAT3evalW(LPWVEC3 r, LPWMAT3 a, LPWVEC3 v);
-void      cdecl MAT3perK(LPMAT3 r, LPMAT3 v, double d);
-void      cdecl MAT3scaleAndCut(LPWMAT3 r, LPMAT3 v, double d);
+void LCMSEXPORT VEC3init(LPVEC3 r, double x, double y, double z);
+void LCMSEXPORT VEC3initF(LPWVEC3 r, double x, double y, double z);
+void LCMSEXPORT VEC3toFix(LPWVEC3 r, LPVEC3 v);
+void LCMSEXPORT VEC3scaleFix(LPWORD r, LPWVEC3 Scale);
+void LCMSEXPORT VEC3swap(LPVEC3 a, LPVEC3 b);
+void LCMSEXPORT VEC3divK(LPVEC3 r, LPVEC3 v, double d);
+void LCMSEXPORT VEC3perK(LPVEC3 r, LPVEC3 v, double d);
+void LCMSEXPORT VEC3perComp(LPVEC3 r, LPVEC3 a, LPVEC3 b);
+void LCMSEXPORT VEC3minus(LPVEC3 r, LPVEC3 a, LPVEC3 b);
+void LCMSEXPORT VEC3scaleAndCut(LPWVEC3 r, LPVEC3 v, double d);
+void LCMSEXPORT VEC3cross(LPVEC3 r, LPVEC3 u, LPVEC3 v);
+void LCMSEXPORT VEC3saturate(LPVEC3 v);
+
+double LCMSEXPORT VEC3length(LPVEC3 a);
+double LCMSEXPORT VEC3distance(LPVEC3 a, LPVEC3 b);
+
+
+void      LCMSEXPORT MAT3identity(LPMAT3 a);
+void      LCMSEXPORT MAT3per(LPMAT3 r, LPMAT3 a, LPMAT3 b);
+int       LCMSEXPORT MAT3inverse(LPMAT3 a, LPMAT3 b);
+LCMSBOOL  LCMSEXPORT MAT3solve(LPVEC3 x, LPMAT3 a, LPVEC3 b);
+double    LCMSEXPORT MAT3det(LPMAT3 m);
+void      LCMSEXPORT MAT3eval(LPVEC3 r, LPMAT3 a, LPVEC3 v);
+void      LCMSEXPORT MAT3toFix(LPWMAT3 r, LPMAT3 v);
+void      LCMSEXPORT MAT3evalW(LPWVEC3 r, LPWMAT3 a, LPWVEC3 v);
+void      LCMSEXPORT MAT3perK(LPMAT3 r, LPMAT3 v, double d);
+void      LCMSEXPORT MAT3scaleAndCut(LPWMAT3 r, LPMAT3 v, double d);
 
 // --------------------- Implementation ----------------------------
 
diff -Nru lcms-1.19.orig/src/cmsnamed.c lcms-1.19/src/cmsnamed.c
--- lcms-1.19.orig/src/cmsnamed.c	2009-10-30 16:57:45.000000000 +0100
+++ lcms-1.19/src/cmsnamed.c	2010-12-19 01:33:06.600933900 +0100
@@ -26,6 +26,14 @@
 #include "lcms.h"
 
 
+LPcmsNAMEDCOLORLIST LCMSEXPORT cmsAllocNamedColorList(int n);
+void LCMSEXPORT cmsFreeNamedColorList(LPcmsNAMEDCOLORLIST v);
+LPcmsNAMEDCOLORLIST LCMSEXPORT cmsAllocNamedColorList(int n);
+int LCMSEXPORT cmsNamedColorCount(cmsHTRANSFORM xform);
+LCMSBOOL LCMSEXPORT cmsNamedColorInfo(cmsHTRANSFORM xform, int nColor, char* Name, char* Prefix, char* Suffix);
+int  LCMSEXPORT cmsNamedColorIndex(cmsHTRANSFORM xform, const char* Name);
+
+
 
 static
 LPcmsNAMEDCOLORLIST GrowNamedColorList(LPcmsNAMEDCOLORLIST v, int ByElements)
@@ -127,7 +135,7 @@
 
 // Returns named color count 
 
-int LCMSEXPORT cmsNamedColorCount(cmsHTRANSFORM xform)
+int cmsNamedColorCount(cmsHTRANSFORM xform)
 {
      _LPcmsTRANSFORM v = (_LPcmsTRANSFORM) xform;
 
@@ -136,7 +144,7 @@
 }
 
 
-LCMSBOOL LCMSEXPORT cmsNamedColorInfo(cmsHTRANSFORM xform, int nColor, char* Name, char* Prefix, char* Suffix)
+LCMSBOOL cmsNamedColorInfo(cmsHTRANSFORM xform, int nColor, char* Name, char* Prefix, char* Suffix)
 {
     _LPcmsTRANSFORM v = (_LPcmsTRANSFORM) xform;
 
@@ -152,7 +160,7 @@
 }
 
 
-int  LCMSEXPORT cmsNamedColorIndex(cmsHTRANSFORM xform, const char* Name)
+int cmsNamedColorIndex(cmsHTRANSFORM xform, const char* Name)
 {
     _LPcmsTRANSFORM v = (_LPcmsTRANSFORM) xform;    
     int i, n;
diff -Nru lcms-1.19.orig/src/cmswtpnt.c lcms-1.19/src/cmswtpnt.c
--- lcms-1.19.orig/src/cmswtpnt.c	2009-10-30 16:57:45.000000000 +0100
+++ lcms-1.19/src/cmswtpnt.c	2010-12-19 01:28:12.114090200 +0100
@@ -22,10 +22,21 @@
 
 #include "lcms.h"
 
+void LCMSEXPORT cmsXYZ2xyY(LPcmsCIExyY Dest, const cmsCIEXYZ* Source);
+void LCMSEXPORT cmsxyY2XYZ(LPcmsCIEXYZ Dest, const cmsCIExyY* Source);
+LCMSBOOL LCMSEXPORT cmsWhitePointFromTemp(int TempK, LPcmsCIExyY WhitePoint);
+LCMSBOOL LCMSEXPORT cmsBuildRGB2XYZtransferMatrix(LPMAT3 r, LPcmsCIExyY WhitePt, LPcmsCIExyYTRIPLE Primrs);
+LCMSBOOL LCMSEXPORT cmsAdaptationMatrix(LPMAT3 r, LPMAT3 ConeMatrix, LPcmsCIEXYZ FromIll, LPcmsCIEXYZ ToIll);
+LCMSBOOL LCMSEXPORT cmsAdaptMatrixToD50(LPMAT3 r, LPcmsCIExyY SourceWhitePt);
+LCMSBOOL LCMSEXPORT cmsAdaptMatrixFromD50(LPMAT3 r, LPcmsCIExyY DestWhitePt);
+LCMSBOOL LCMSEXPORT cmsAdaptToIlluminant(LPcmsCIEXYZ Result, 
+                                     LPcmsCIEXYZ SourceWhitePt, 
+                                     LPcmsCIEXYZ Illuminant, 
+                                     LPcmsCIEXYZ Value);
 
 // Conversions
 
-void LCMSEXPORT cmsXYZ2xyY(LPcmsCIExyY Dest, const cmsCIEXYZ* Source)
+void cmsXYZ2xyY(LPcmsCIExyY Dest, const cmsCIEXYZ* Source)
 {
        double ISum;
 
@@ -37,7 +48,7 @@
 }
 
 
-void LCMSEXPORT cmsxyY2XYZ(LPcmsCIEXYZ Dest, const cmsCIExyY* Source)
+void cmsxyY2XYZ(LPcmsCIEXYZ Dest, const cmsCIExyY* Source)
 {
 
         Dest -> X = (Source -> x / Source -> y) * Source -> Y;
@@ -48,7 +59,7 @@
 
 // Obtains WhitePoint from Temperature
 
-LCMSBOOL LCMSEXPORT cmsWhitePointFromTemp(int TempK, LPcmsCIExyY WhitePoint)
+LCMSBOOL cmsWhitePointFromTemp(int TempK, LPcmsCIExyY WhitePoint)
 {
        double x, y;
        double T, T2, T3;
@@ -113,7 +124,8 @@
 //            - Then, I apply these coeficients to the original matrix
 
 
-LCMSBOOL LCMSEXPORT cmsBuildRGB2XYZtransferMatrix(LPMAT3 r, LPcmsCIExyY WhitePt,
+
+LCMSBOOL cmsBuildRGB2XYZtransferMatrix(LPMAT3 r, LPcmsCIExyY WhitePt,
                                             LPcmsCIExyYTRIPLE Primrs)
 {
         VEC3 WhitePoint, Coef;
@@ -266,7 +278,7 @@
 // Adapts a color to a given illuminant. Original color is expected to have
 // a SourceWhitePt white point. 
 
-LCMSBOOL LCMSEXPORT cmsAdaptToIlluminant(LPcmsCIEXYZ Result, 
+LCMSBOOL cmsAdaptToIlluminant(LPcmsCIEXYZ Result, 
                                      LPcmsCIEXYZ SourceWhitePt, 
                                      LPcmsCIEXYZ Illuminant, 
                                      LPcmsCIEXYZ Value)
diff -Nru lcms-1.19.orig/src/lcms.def lcms-1.19/src/lcms.def
--- lcms-1.19.orig/src/lcms.def	2007-04-27 09:58:26.000000000 +0200
+++ lcms-1.19/src/lcms.def	2010-12-19 00:40:27.507244100 +0100
@@ -1,4 +1,4 @@
-LIBRARY     LCMS.DLL
+;;LIBRARY     LCMS.DLL
 
 EXPORTS
     _cmsICCcolorSpace            = _cmsICCcolorSpace
@@ -180,6 +180,9 @@
     cmsSetCMYKPreservationStrategy = cmsSetCMYKPreservationStrategy
     cmsFreeProfileSequenceDescription = cmsFreeProfileSequenceDescription
     _cmsAddChromaticAdaptationTag = _cmsAddChromaticAdaptationTag
+    cmsAllocNamedColorList       = cmsAllocNamedColorList
+    cmsFreeNamedColorList        = cmsFreeNamedColorList
+    _cmsIdentifyWhitePoint       = _cmsIdentifyWhitePoint
     
     
 
diff -Nru lcms-1.19.orig/testbed/CMakeLists.txt lcms-1.19/testbed/CMakeLists.txt
--- lcms-1.19.orig/testbed/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ lcms-1.19/testbed/CMakeLists.txt	2010-12-19 00:40:27.509244200 +0100
@@ -0,0 +1,7 @@
+add_executable(testcms testcms.c)
+target_link_libraries(testcms lcms)
+
+add_test(testcms testcms)
+
+configure_file("sRGB Color Space Profile.icm" "${CMAKE_CURRENT_BINARY_DIR}/sRGB Color Space Profile.icm" COPYONLY)
+configure_file("sRGBSpac.icm" "${CMAKE_CURRENT_BINARY_DIR}/sRGBSpac.icm" COPYONLY)
diff -Nru lcms-1.19.orig/tifficc/CMakeLists.txt lcms-1.19/tifficc/CMakeLists.txt
--- lcms-1.19.orig/tifficc/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ lcms-1.19/tifficc/CMakeLists.txt	2010-12-19 00:40:27.510244300 +0100
@@ -0,0 +1,24 @@
+include_directories(${TIFF_INCLUDE_DIR})
+
+set(tifficc_SRCS
+    tifficc.c 
+    ../samples/xgetopt.c 
+    ../samples/vprf.c)
+    
+
+add_executable(tifficc ${tifficc_SRCS})
+target_link_libraries(tifficc lcms ${TIFF_LIBRARY})
+
+set(tiffdiff_SRCS
+    tiffdiff.c
+    ../samples/xgetopt.c
+)
+
+add_executable(tiffdiff ${tiffdiff_SRCS})
+target_link_libraries(tiffdiff lcms ${TIFF_LIBRARY})
+
+install(TARGETS tifficc tiffdiff RUNTIME DESTINATION bin
+                                 LIBRARY DESTINATION lib
+                                 ARCHIVE DESTINATION lib)
+                                 
+install(FILES tifficc.1 DESTINATION share/man/man1)
