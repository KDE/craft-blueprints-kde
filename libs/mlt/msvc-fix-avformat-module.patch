diff --git a/CMakeLists.txt b/CMakeLists.txt
index 161a2b35..96143b8c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -220,13 +220,18 @@ endif()
 
 if(MOD_AVFORMAT)
   pkg_check_modules(libavformat IMPORTED_TARGET libavformat)
-  pkg_check_modules(libswscale IMPORTED_TARGET libswscale)
-  pkg_check_modules(libavutil IMPORTED_TARGET libavutil)
-  if(TARGET PkgConfig::libavformat AND TARGET PkgConfig::libswscale AND TARGET PkgConfig::libavutil)
-    pkg_check_modules(libavcodec IMPORTED_TARGET libavcodec)
-    pkg_check_modules(libavfilter IMPORTED_TARGET libavfilter)
-    pkg_check_modules(libavdevice IMPORTED_TARGET libavdevice)
-    pkg_check_modules(libswresample IMPORTED_TARGET libswresample)
+  find_package(FFmpeg REQUIRED COMPONENTS
+    AVFORMAT
+    SWSCALE
+    AVUTIL
+  )
+  if(AVFORMAT_FOUND AND SWSCALE_FOUND AND AVUTIL_FOUND)
+    find_package(FFmpeg COMPONENTS
+      AVCODEC
+      AVFILTER
+      AVDEVICE
+      SWRESAMPLE
+    )
     list(APPEND MLT_SUPPORTED_COMPONENTS avformat)
   else()
     set(MOD_AVFORMAT OFF)
diff --git a/src/modules/avformat/CMakeLists.txt b/src/modules/avformat/CMakeLists.txt
index 7054051d..e3ddc962 100644
--- a/src/modules/avformat/CMakeLists.txt
+++ b/src/modules/avformat/CMakeLists.txt
@@ -18,9 +18,9 @@ target_compile_options(mltavformat PRIVATE ${MLT_COMPILE_OPTIONS})
 target_link_libraries(mltavformat PRIVATE
   mlt
   Threads::Threads
-  PkgConfig::libavformat
-  PkgConfig::libswscale
-  PkgConfig::libavutil
+  ${AVFORMAT_LIBRARIES}
+  ${SWSCALE_LIBRARIES}
+  ${AVUTIL_LIBRARIES}
 )
 
 if(NOT MSVC)
@@ -36,26 +36,26 @@ if(WIN32)
   endif()
 endif()
 
-if(TARGET PkgConfig::libavcodec)
+if(AVCODEC_FOUND)
   target_sources(mltavformat PRIVATE producer_avformat.c consumer_avformat.c)
-  target_link_libraries(mltavformat PRIVATE PkgConfig::libavcodec)
+  target_link_libraries(mltavformat PRIVATE ${AVCODEC_LIBRARIES})
   target_compile_definitions(mltavformat PRIVATE CODECS)
 endif()
 
-if(TARGET PkgConfig::libavfilter)
+if(AVFILTER_FOUND)
   target_sources(mltavformat PRIVATE filter_avfilter.c link_avdeinterlace.c link_avfilter.c)
-  target_link_libraries(mltavformat PRIVATE PkgConfig::libavfilter)
+  target_link_libraries(mltavformat PRIVATE ${AVFILTER_LIBRARIES})
   target_compile_definitions(mltavformat PRIVATE AVFILTER)
 endif()
 
-if(TARGET PkgConfig::libavdevice)
-  target_link_libraries(mltavformat PRIVATE PkgConfig::libavdevice)
+if(AVDEVICE_FOUND)
+  target_link_libraries(mltavformat PRIVATE ${AVDEVICE_LIBRARIES})
   target_compile_definitions(mltavformat PRIVATE AVDEVICE)
 endif()
 
-if(TARGET PkgConfig::libswresample)
+if(SWRESAMPLE_FOUND)
   target_sources(mltavformat PRIVATE common_swr.c common_swr.h filter_swresample.c link_swresample.c)
-  target_link_libraries(mltavformat PRIVATE PkgConfig::libswresample)
+  target_link_libraries(mltavformat PRIVATE ${SWRESAMPLE_LIBRARIES})
   target_compile_definitions(mltavformat PRIVATE SWRESAMPLE)
 endif()
 
diff --git a/src/modules/avformat/consumer_avformat.c b/src/modules/avformat/consumer_avformat.c
index 22a90dc7..5f24f5e2 100644
--- a/src/modules/avformat/consumer_avformat.c
+++ b/src/modules/avformat/consumer_avformat.c
@@ -1421,8 +1421,8 @@ static int encode_audio(encode_ctx_t *ctx)
                 if (source_offset < ctx->channels) {
                     // Interleave the audio buffer with the # channels for this stream/mapping.
                     for (k = 0; k < map_channels; k++, j++, source_offset++, dest_offset++) {
-                        void *src = ctx->audio_buf_1 + source_offset * ctx->sample_bytes;
-                        void *dest = ctx->audio_buf_2 + dest_offset * ctx->sample_bytes;
+                        char *src = ctx->audio_buf_1 + source_offset * ctx->sample_bytes;
+                        char *dest = ctx->audio_buf_2 + dest_offset * ctx->sample_bytes;
                         int s = samples + 1;
 
                         while (--s) {
diff --git a/src/modules/avformat/link_avfilter.c b/src/modules/avformat/link_avfilter.c
index 8efda84e..88248669 100644
--- a/src/modules/avformat/link_avfilter.c
+++ b/src/modules/avformat/link_avfilter.c
@@ -827,14 +827,17 @@ static int link_get_audio(mlt_frame frame,
 #endif
             || *samples != pdata->avoutframe->nb_samples
             || *frequency != pdata->avoutframe->sample_rate) {
-            mlt_log_error(self,
-                          "Unexpected return format c %d->%d\tf %d->%d\tf %d->%d\n",
-                          *channels,
+
+            int expected_channels;
 #if HAVE_FFMPEG_CH_LAYOUT
-                          pdata->avoutframe->ch_layout.nb_channels,
+            expected_channels = pdata->avoutframe->ch_layout.nb_channels;
 #else
-                          pdata->avoutframe->channels,
+            expected_channels = pdata->avoutframe->channels;
 #endif
+            mlt_log_error(self,
+                          "Unexpected return format c %d->%d\tf %d->%d\tf %d->%d\n",
+                          *channels,
+                          expected_channels,
                           *samples,
                           pdata->avoutframe->nb_samples,
                           *frequency,

diff --git a/cmake/FindFFmpeg.cmake b/cmake/FindFFmpeg.cmake
new file mode 100644
index 00000000..e2571409
--- /dev/null
+++ b/cmake/FindFFmpeg.cmake
@@ -0,0 +1,204 @@
+# SPDX-FileCopyrightText: 2006 Matthias Kretz <kretz@kde.org>
+# SPDX-FileCopyrightText: 2008 Alexander Neundorf <neundorf@kde.org>
+# SPDX-FileCopyrightText: 2011 Michael Jansen <kde@michael-jansen.biz>
+# SPDX-FileCopyrightText: 2021 Stefan Br√ºns <stefan.bruens@rwth-aachen.de>
+#
+# SPDX-License-Identifier: BSD-3-Clause
+
+#[=======================================================================[.rst:
+
+FindFFmpeg
+----------
+
+Try to find FFmpeg components.
+
+The following components are available::
+
+  AVCODEC  AVFILTER    AVDEVICE  AVFORMAT
+  AVUTIL   SWRESAMPLE  SWSCALE   POSTPROCESS
+
+If no components are specified in the find_module call, the following ones
+will be choosen as default::
+
+  AVFORMAT AVUTIL AVCODEC
+
+Once done this will define
+
+``FFMPEG_FOUND``
+    System has the all required components.
+
+``FFMPEG_INCLUDE_DIRS``
+    Include directory necessary for using the required components headers.
+
+``FFMPEG_LIBRARIES``
+    Link these to use the required ffmpeg components.
+
+``FFMPEG_DEFINITIONS``
+    Compiler switches required for using the required ffmpeg components.
+
+
+Additonally for each of the components, the following variables will be defined:
+
+``<component>_FOUND``
+    True if (the requestion version of) <component> is available
+
+``<component>_INCLUDE_DIRS``
+    Include directory necessary for using the <component> headers
+
+``<component>_LIBRARIES``
+    Link these to use <component>
+
+``<component>_DEFINITIONS``
+    Compiler switches required for using <component>
+
+``<component>_VERSION``
+    The components version
+
+As the versions of the various FFmpeg components differ for a given release,
+and CMake supports only one common version for all components, use the
+following to specify required versions for multiple components:
+
+.. code-block:: cmake
+
+  find_package(FFmpeg 57.48 COMPONENTS AVCODEC)
+  find_package(FFmpeg 57.40 COMPONENTS AVFORMAT)
+  find_package(FFmpeg 55.27 COMPONENTS AVUTIL)
+
+Since 6.19.0.
+#]=======================================================================]
+
+
+include(FindPackageHandleStandardArgs)
+
+if (NOT FFmpeg_FIND_COMPONENTS)
+  # The default components were taken from a survey over other FindFFMPEG.cmake files
+  set(FFmpeg_FIND_COMPONENTS AVCODEC AVFORMAT AVUTIL)
+endif ()
+
+list(LENGTH FFmpeg_FIND_COMPONENTS _numComponents)
+if ((${_numComponents} GREATER 1) AND DEFINED ${FFmpeg_FIND_VERSION})
+  message(WARNING "Using a required version in combination with multiple COMPONENTS is not supported")
+  set(_FFmpeg_REQUIRED_VERSION 0)
+elseif (DEFINED FFmpeg_FIND_VERSION)
+  set(_FFmpeg_REQUIRED_VERSION ${FFmpeg_FIND_VERSION})
+else ()
+  set(_FFmpeg_REQUIRED_VERSION 0)
+endif ()
+set(_FFmpeg_ALL_COMPONENTS AVCODEC AVFILTER AVDEVICE AVFORMAT AVUTIL POSTPROCESS SWRESAMPLE SWSCALE)
+
+### Macro: set_component_found
+#
+# Marks the given component as found if both *_LIBRARIES AND *_INCLUDE_DIRS is present.
+
+macro(set_component_found _component )
+  if (${_component}_LIBRARIES AND ${_component}_INCLUDE_DIRS)
+    set(${_component}_FOUND TRUE)
+    set(FFmpeg_${_component}_FOUND TRUE)
+  endif ()
+endmacro()
+
+### Macro: find_component
+#
+# Checks for the given component by invoking pkgconfig and then looking up the libraries and
+# include directories.
+
+macro(find_component _component _pkgconfig _library _header)
+
+  if (NOT WIN32)
+     # use pkg-config to get the directories and then use these values
+     # in the FIND_PATH() and FIND_LIBRARY() calls
+     find_package(PkgConfig)
+     if (PKG_CONFIG_FOUND)
+       pkg_check_modules(PC_${_component} QUIET ${_pkgconfig})
+     endif ()
+  endif (NOT WIN32)
+
+  find_path(${_component}_INCLUDE_DIRS ${_header}
+    HINTS
+      ${PC_LIB${_component}_INCLUDEDIR}
+      ${PC_LIB${_component}_INCLUDE_DIRS}
+    PATH_SUFFIXES
+      ffmpeg
+  )
+
+  find_library(${_component}_LIBRARIES NAMES ${_library}
+      HINTS
+      ${PC_LIB${_component}_LIBDIR}
+      ${PC_LIB${_component}_LIBRARY_DIRS}
+  )
+
+  set(${_component}_DEFINITIONS  ${PC_${_component}_CFLAGS_OTHER} CACHE STRING "The ${_component} CFLAGS.")
+  set(${_component}_VERSION      ${PC_${_component}_VERSION}      CACHE STRING "The ${_component} version number.")
+
+  set_component_found(${_component})
+
+  mark_as_advanced(
+    ${_component}_INCLUDE_DIRS
+    ${_component}_LIBRARIES
+    ${_component}_DEFINITIONS
+    ${_component}_VERSION)
+
+endmacro()
+
+# Check for cached results. If there are skip the costly part.
+if (NOT FFMPEG_LIBRARIES)
+
+  # Check for all possible component.
+  find_component(AVCODEC     libavcodec     avcodec     libavcodec/avcodec.h)
+  find_component(AVFILTER    libavfilter    avfilter    libavfilter/avfilter.h)
+  find_component(AVFORMAT    libavformat    avformat    libavformat/avformat.h)
+  find_component(AVDEVICE    libavdevice    avdevice    libavdevice/avdevice.h)
+  find_component(AVUTIL      libavutil      avutil      libavutil/avutil.h)
+  find_component(SWRESAMPLE  libswresample  swresample  libswresample/swresample.h)
+  find_component(SWSCALE     libswscale     swscale     libswscale/swscale.h)
+  find_component(POSTPROCESS libpostproc    postproc    libpostproc/postprocess.h)
+
+  # Check if the required components were found and add their stuff to the FFMPEG_* vars.
+  foreach (_component ${_FFmpeg_ALL_COMPONENTS})
+    if (${_component}_FOUND)
+      set(FFMPEG_LIBRARIES   ${FFMPEG_LIBRARIES}   ${${_component}_LIBRARIES})
+      set(FFMPEG_DEFINITIONS ${FFMPEG_DEFINITIONS} ${${_component}_DEFINITIONS})
+      list(APPEND FFMPEG_INCLUDE_DIRS ${${_component}_INCLUDE_DIRS})
+    endif ()
+  endforeach ()
+
+  # Build the include path with duplicates removed.
+  if (FFMPEG_INCLUDE_DIRS)
+    list(REMOVE_DUPLICATES FFMPEG_INCLUDE_DIRS)
+  endif ()
+
+  # cache the vars.
+  set(FFMPEG_INCLUDE_DIRS ${FFMPEG_INCLUDE_DIRS} CACHE STRING "The FFmpeg include directories." FORCE)
+  set(FFMPEG_LIBRARIES    ${FFMPEG_LIBRARIES}    CACHE STRING "The FFmpeg libraries." FORCE)
+  set(FFMPEG_DEFINITIONS  ${FFMPEG_DEFINITIONS}  CACHE STRING "The FFmpeg cflags." FORCE)
+
+  mark_as_advanced(FFMPEG_INCLUDE_DIRS
+                   FFMPEG_LIBRARIES
+                   FFMPEG_DEFINITIONS)
+
+else ()
+  # Set the noncached _FOUND vars for the components.
+  foreach (_component ${_FFmpeg_ALL_COMPONENTS})
+    set_component_found(${_component})
+  endforeach ()
+endif ()
+
+# Compile the list of required vars
+unset(_FFmpeg_REQUIRED_VARS)
+set(_FFmpeg_FOUND_LIBRARIES "")
+foreach (_component ${FFmpeg_FIND_COMPONENTS})
+  if (${_component}_FOUND)
+    if (${_component}_VERSION VERSION_LESS _FFmpeg_REQUIRED_VERSION)
+      message(STATUS "${_component}: ${${_component}_VERSION} < ${_FFmpeg_REQUIRED_VERSION}")
+      unset(${_component}_FOUND)
+    endif ()
+    list(APPEND _FFmpeg_FOUND_LIBRARIES ${${_component}_LIBRARIES})
+  endif ()
+  list(APPEND _FFmpeg_REQUIRED_VARS ${_component}_LIBRARIES ${_component}_INCLUDE_DIRS ${_component}_FOUND)
+endforeach ()
+list(INSERT _FFmpeg_REQUIRED_VARS 0 _FFmpeg_FOUND_LIBRARIES)
+
+# Give a nice error message if some of the required vars are missing.
+find_package_handle_standard_args(FFmpeg
+    REQUIRED_VARS ${_FFmpeg_REQUIRED_VARS}
+    HANDLE_COMPONENTS)
