diff -Nru -x '*~' xz-5.0.5.orig/CMakeLists.txt xz-5.0.5/CMakeLists.txt
--- xz-5.0.5.orig/CMakeLists.txt    1970-01-01 01:00:00.000000000 +0100
+++ xz-5.0.5/CMakeLists.txt 2014-05-08 19:00:58.250071500 +0200
@@ -0,0 +1,237 @@
+cmake_minimum_required(VERSION 2.8.12)
+project(liblzma)
+include(CheckIncludeFiles)
+include(CheckFunctionExists)
+include(CheckSymbolExists)
+include(CheckTypeSize)
+
+include_directories(${CMAKE_CURRENT_BINARY_DIR} src/common src/liblzma/api src/liblzma/common src/liblzma/check src/liblzma/rangecoder src/liblzma/lz src/liblzma/lzma src/liblzma/delta src/liblzma/simple src/liblzma/subblock)
+
+check_include_files(biteswap.h HAVE_BYTESWAP_H)
+check_include_files(dlfcn.h HAVE_DLFCN_H)
+check_include_files(fcntl.h HAVE_FCNTL_H)
+check_include_files(getopt.h HAVE_GETOPT_H)
+check_include_files(inttypes.h HAVE_INTTYPES_H)
+check_include_files(limits.h HAVE_LIMITS_H)
+check_include_files(memory.h HAVE_MEMORY_H)
+check_include_files(stdbool.h HAVE_STDBOOL_H)
+check_include_files(stdint.h HAVE_STDINT_H)
+check_include_files(stdlib.h HAVE_STDLIB_H)
+check_include_files(strings.h HAVE_STRINGS_H)
+check_include_files(string.h HAVE_STRING_H)
+check_include_files(sys/param.h HAVE_SYS_PARAM_H)
+check_include_files(sys/stat.h HAVE_SYS_STAT_H)
+check_include_files(sys/sysctl.h HAVE_SYS_SYSCTL_H)
+check_include_files(sys/time.h HAVE_SYS_TIME_H)
+check_include_files(sys/types.h HAVE_SYS_TYPES_H)
+check_include_files(unistd.h HAVE_UNISTD_H)
+check_include_files(pthread.h HAVE_PTHREAD)
+
+set(HAVE_ASM_X86 1)
+set(HAVE_CHECK_CRC32 1)
+set(HAVE_CHECK_CRC64 1)
+set(HAVE_CHECK_SHA256 1)
+set(HAVE_DECODER 1)
+set(HAVE_DECODER_ARM 1)
+set(HAVE_DECODER_ARMTHUMB 1)
+set(HAVE_DECODER_DELTA 1)
+set(HAVE_DECODER_IA64 1)
+set(HAVE_DECODER_LZMA1 1)
+set(HAVE_DECODER_LZMA2 1)
+set(HAVE_DECODER_POWERPC 1)
+set(HAVE_DECODER_SPARC 1)
+set(HAVE_DECODER_SUBBLOCK 0)
+set(HAVE_DECODER_X86 1)
+set(HAVE_ENCODER 1)
+set(HAVE_ENCODER_ARM 1)
+set(HAVE_ENCODER_ARMTHUMB 1)
+set(HAVE_ENCODER_DELTA 1)
+set(HAVE_ENCODER_IA64 1)
+set(HAVE_ENCODER_LZMA1 1)
+set(HAVE_ENCODER_LZMA2 1)
+set(HAVE_ENCODER_POWERPC 1)
+set(HAVE_ENCODER_SPARC 1)
+set(HAVE_ENCODER_SUBBLOCK 0)
+set(HAVE_ENCODER_X86 1)
+set(HAVE_FAST_UNALIGNED_ACCESS 1)
+set(HAVE_MF_BT2 1)
+set(HAVE_MF_BT3 1)
+set(HAVE_MF_BT4 1)
+set(HAVE_MF_HC3 1)
+set(HAVE_MF_HC4 1)
+set(HAVE_MF_BT3 1)
+set(STDC_HEADERS 1)
+
+check_function_exists(bswap_16 HAVE_BSWAP_16)
+check_function_exists(bswap_32 HAVE_BSWAP_32)
+check_function_exists(bswap_64 HAVE_BSWAP_64)
+check_function_exists(dcgettext HAVE_DCGETTEXT)
+check_function_exists(futimens HAVE_FUTIMENS)
+check_function_exists(futimes HAVE_FUTIMES)
+check_function_exists(futimesat HAVE_FUTIMESAT)
+check_function_exists(gettext HAVE_GETTEXT)
+check_function_exists(iconv HAVE_ICONV)
+check_function_exists(utime HAVE_UTIME)
+check_function_exists(utimes HAVE_UTIMES)
+
+check_symbol_exists(OPTRESET "getopt.h" HAVE_OPTRESET)
+
+set(CMAKE_EXTRA_INCLUDE_FILES "stdint.h")
+
+check_type_size(size_t SIZEOF_SIZE_T)
+check_type_size(uintptr_t UINTPTR_T)
+check_type_size(int8_t      INT8_T)
+check_type_size(uint8_t     UINT8_T)
+check_type_size(int16_t     INT16_T)
+check_type_size(uint16_t    UINT16_T)
+check_type_size(int32_t     INT32_T)
+check_type_size(uint32_t    UINT32_T)
+check_type_size(int64_t     INT64_T)
+check_type_size(uint64_t    UINT64_T)
+
+SET(CMAKE_EXTRA_INCLUDE_FILES)
+
+
+configure_file(config.h.cmake config.h)
+
+set(LZMA_SRC src/liblzma/common/alone_decoder.c
+    src/liblzma/common/alone_encoder.c
+    src/liblzma/common/auto_decoder.c
+    src/liblzma/common/block_buffer_decoder.c
+    src/liblzma/common/block_buffer_encoder.c
+    src/liblzma/common/block_decoder.c
+    src/liblzma/common/block_encoder.c
+    src/liblzma/common/block_header_decoder.c
+    src/liblzma/common/block_header_encoder.c
+    src/liblzma/common/block_util.c
+    src/liblzma/common/common.c
+    src/liblzma/common/easy_buffer_encoder.c
+    src/liblzma/common/easy_decoder_memusage.c
+    src/liblzma/common/easy_encoder.c
+    src/liblzma/common/easy_encoder_memusage.c
+    src/liblzma/common/easy_preset.c
+    src/liblzma/common/filter_common.c
+    src/liblzma/common/filter_decoder.c
+    src/liblzma/common/filter_encoder.c
+    src/liblzma/common/filter_flags_decoder.c
+    src/liblzma/common/filter_flags_encoder.c
+    src/liblzma/common/hardware_physmem.c
+    src/liblzma/common/index.c
+    src/liblzma/common/index_decoder.c
+    src/liblzma/common/index_encoder.c
+    src/liblzma/common/index_hash.c
+    src/liblzma/common/stream_buffer_decoder.c
+    src/liblzma/common/stream_buffer_encoder.c
+    src/liblzma/common/stream_decoder.c
+    src/liblzma/common/stream_encoder.c
+    src/liblzma/common/stream_flags_common.c
+    src/liblzma/common/stream_flags_decoder.c
+    src/liblzma/common/stream_flags_encoder.c
+    src/liblzma/common/vli_decoder.c
+    src/liblzma/common/vli_encoder.c
+    src/liblzma/common/vli_size.c
+    src/liblzma/check/check.c
+    src/liblzma/check/crc32_table.c
+    src/liblzma/check/crc64_table.c
+    src/liblzma/check/sha256.c
+    src/liblzma/rangecoder/price_table.c
+    src/liblzma/lz/lz_decoder.c
+    src/liblzma/lz/lz_encoder.c
+    src/liblzma/lz/lz_encoder_mf.c
+    src/liblzma/lzma/fastpos_table.c
+    src/liblzma/lzma/fastpos_tablegen.c
+    src/liblzma/lzma/lzma2_decoder.c
+    src/liblzma/lzma/lzma2_encoder.c
+    src/liblzma/lzma/lzma_decoder.c
+    src/liblzma/lzma/lzma_encoder.c
+    src/liblzma/lzma/lzma_encoder_optimum_fast.c
+    src/liblzma/lzma/lzma_encoder_optimum_normal.c
+    src/liblzma/lzma/lzma_encoder_presets.c
+    src/liblzma/delta/delta_common.c
+    src/liblzma/delta/delta_decoder.c
+    src/liblzma/delta/delta_encoder.c
+    src/liblzma/simple/arm.c
+    src/liblzma/simple/armthumb.c
+    src/liblzma/simple/ia64.c
+    src/liblzma/simple/powerpc.c
+    src/liblzma/simple/simple_coder.c
+    src/liblzma/simple/simple_decoder.c
+    src/liblzma/simple/simple_encoder.c
+    src/liblzma/simple/sparc.c
+    src/liblzma/simple/x86.c
+
+    src/liblzma/check/crc32_fast.c
+    src/liblzma/check/crc64_fast.c
+#     src/liblzma/check/crc32_x86.S
+#     src/liblzma/check/crc64_x86.S
+
+    src/common/tuklib_physmem.c
+    )
+
+add_definitions("-DHAVE_CONFIG_H")
+
+if(MSVC)
+    add_compile_options(-wd4244)
+else()
+    add_compile_options("-std=gnu99")
+endif()
+
+add_library(lzma SHARED ${LZMA_SRC})
+set_target_properties(lzma PROPERTIES DEFINE_SYMBOL DLL_EXPORT)
+install(TARGETS lzma RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+
+if(NOT MSVC) # uses unistd.h functions and getopt
+    set(XDEC_SRC src/xzdec/xzdec.c
+   src/common/tuklib_progname.c
+   src/common/tuklib_exit.c
+   )
+    add_executable(xzdec ${XDEC_SRC})
+    target_link_libraries(xzdec lzma)
+    install(TARGETS xzdec RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+
+    add_executable(lzmadec ${XDEC_SRC})
+    set_property(TARGET lzmadec PROPERTY COMPILE_DEFINITIONS LZMADEC)
+    target_link_libraries(lzmadec lzma)
+    install(TARGETS lzmadec RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+
+    set(XZ_SRC  src/xz/args.c
+   src/xz/hardware.c
+   src/xz/coder.c
+   src/xz/coder.h
+   src/xz/file_io.c
+   src/xz/list.c
+   src/xz/main.c
+   src/xz/message.c
+   src/xz/options.c
+   src/xz/signals.c
+   src/xz/suffix.c
+   src/xz/util.c
+    
+   src/common/tuklib_progname.c
+   src/common/tuklib_exit.c
+   src/common/tuklib_cpucores.c
+   src/common/tuklib_mbstr_fw.c
+   src/common/tuklib_mbstr_width.c
+   src/common/tuklib_open_stdxxx.c
+   )
+
+    add_executable(xz ${XZ_SRC})
+    target_link_libraries(xz lzma)
+
+    if(HAVE_PTHREAD)
+   target_link_libraries(xz pthread)
+    endif(HAVE_PTHREAD)
+
+    install(TARGETS xz RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+
+    set(LZMAINFO_SRC 
+   src/lzmainfo/lzmainfo.c
+   src/common/tuklib_progname.c
+   src/common/tuklib_exit.c
+    )
+
+    add_executable(lzmainfo ${LZMAINFO_SRC})
+    target_link_libraries(lzmainfo lzma)
+    install(TARGETS lzmainfo RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+endif()
+install(DIRECTORY src/liblzma/api/ DESTINATION include FILES_MATCHING PATTERN "*.h")
diff -Nru -x '*~' xz-5.0.5.orig/config.h.cmake xz-5.0.5/config.h.cmake
--- xz-5.0.5.orig/config.h.cmake    1970-01-01 01:00:00.000000000 +0100
+++ xz-5.0.5/config.h.cmake 2014-05-08 18:46:59.464440900 +0200
@@ -0,0 +1,398 @@
+#ifdef _MSC_VER
+// inline is not a keyword in C mode
+#define inline __inline
+#define restrict __restrict
+#endif
+
+
+/* Define to 1 if using x86 assembler optimizations. */
+#cmakedefine HAVE_ASM_X86 1
+
+/* Define to 1 if using x86_64 assembler optimizations. */
+#cmakedefine HAVE_ASM_X86_64 1
+
+/* Define to 1 if bswap_16 is available. */
+#cmakedefine HAVE_BSWAP_16 1
+
+/* Define to 1 if bswap_32 is available. */
+#cmakedefine HAVE_BSWAP_32 1
+
+/* Define to 1 if bswap_64 is available. */
+#cmakedefine HAVE_BSWAP_64 1
+
+/* Define to 1 if you have the <byteswap.h> header file. */
+#cmakedefine HAVE_BYTESWAP_H 1
+
+/* Define to 1 if you have the MacOS X function CFLocaleCopyCurrent in the
+   CoreFoundation framework. */
+#cmakedefine HAVE_CFLOCALECOPYCURRENT 1
+
+/* Define to 1 if you have the MacOS X function CFPreferencesCopyAppValue in
+   the CoreFoundation framework. */
+#cmakedefine HAVE_CFPREFERENCESCOPYAPPVALUE 1
+
+/* Define to 1 if crc32 integrity check is enabled. */
+#cmakedefine HAVE_CHECK_CRC32 1
+
+/* Define to 1 if crc64 integrity check is enabled. */
+#cmakedefine HAVE_CHECK_CRC64 1
+
+/* Define to 1 if sha256 integrity check is enabled. */
+#cmakedefine HAVE_CHECK_SHA256 1
+
+/* Define if the GNU dcgettext() function is already present or preinstalled. */
+#cmakedefine HAVE_DCGETTEXT 1
+
+/* Define to 1 if decoder components are enabled. */
+#cmakedefine HAVE_DECODER 1
+
+/* Define to 1 if arm decoder is enabled. */
+#cmakedefine HAVE_DECODER_ARM 1
+
+/* Define to 1 if armthumb decoder is enabled. */
+#cmakedefine HAVE_DECODER_ARMTHUMB 1
+
+/* Define to 1 if delta decoder is enabled. */
+#cmakedefine HAVE_DECODER_DELTA 1
+
+/* Define to 1 if ia64 decoder is enabled. */
+#cmakedefine HAVE_DECODER_IA64 1
+
+/* Define to 1 if lzma1 decoder is enabled. */
+#cmakedefine HAVE_DECODER_LZMA1 1
+
+/* Define to 1 if lzma2 decoder is enabled. */
+#cmakedefine HAVE_DECODER_LZMA2 1
+
+/* Define to 1 if powerpc decoder is enabled. */
+#cmakedefine HAVE_DECODER_POWERPC 1
+
+/* Define to 1 if sparc decoder is enabled. */
+#cmakedefine HAVE_DECODER_SPARC 1
+
+/* Define to 1 if subblock decoder is enabled. */
+#cmakedefine HAVE_DECODER_SUBBLOCK 1
+
+/* Define to 1 if x86 decoder is enabled. */
+#cmakedefine HAVE_DECODER_X86 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H 1
+
+/* Define to 1 if encoder components are enabled. */
+#cmakedefine HAVE_ENCODER 1
+
+/* Define to 1 if arm encoder is enabled. */
+#cmakedefine HAVE_ENCODER_ARM 1
+
+/* Define to 1 if armthumb encoder is enabled. */
+#cmakedefine HAVE_ENCODER_ARMTHUMB 1
+
+/* Define to 1 if delta encoder is enabled. */
+#cmakedefine HAVE_ENCODER_DELTA 1
+
+/* Define to 1 if ia64 encoder is enabled. */
+#cmakedefine HAVE_ENCODER_IA64 1
+
+/* Define to 1 if lzma1 encoder is enabled. */
+#cmakedefine HAVE_ENCODER_LZMA1 1
+
+/* Define to 1 if lzma2 encoder is enabled. */
+#cmakedefine HAVE_ENCODER_LZMA2 1
+
+/* Define to 1 if powerpc encoder is enabled. */
+#cmakedefine HAVE_ENCODER_POWERPC 1
+
+/* Define to 1 if sparc encoder is enabled. */
+#cmakedefine HAVE_ENCODER_SPARC 1
+
+/* Define to 1 if subblock encoder is enabled. */
+#cmakedefine HAVE_ENCODER_SUBBLOCK 1
+
+/* Define to 1 if x86 encoder is enabled. */
+#cmakedefine HAVE_ENCODER_X86 1
+
+/* Define to 1 if the system supports fast unaligned memory access. */
+#cmakedefine HAVE_FAST_UNALIGNED_ACCESS 1
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#cmakedefine HAVE_FCNTL_H 1
+
+/* Define to 1 if you have the `futimens' function. */
+#cmakedefine HAVE_FUTIMENS 1
+
+/* Define to 1 if you have the `futimes' function. */
+#cmakedefine HAVE_FUTIMES 1
+
+/* Define to 1 if you have the `futimesat' function. */
+#cmakedefine HAVE_FUTIMESAT 1
+
+/* Define to 1 if you have the <getopt.h> header file. */
+#cmakedefine HAVE_GETOPT_H 1
+
+/* Define if the GNU gettext() function is already present or preinstalled. */
+#cmakedefine HAVE_GETTEXT 1
+
+/* Define if you have the iconv() function. */
+#cmakedefine HAVE_ICONV 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the <limits.h> header file. */
+#cmakedefine HAVE_LIMITS_H 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H 1
+
+/* Define to 1 to enable bt2 match finder. */
+#cmakedefine HAVE_MF_BT2 1
+
+/* Define to 1 to enable bt3 match finder. */
+#cmakedefine HAVE_MF_BT3 1
+
+/* Define to 1 to enable bt4 match finder. */
+#cmakedefine HAVE_MF_BT4 1
+
+/* Define to 1 to enable hc3 match finder. */
+#cmakedefine HAVE_MF_HC3 1
+
+/* Define to 1 to enable hc4 match finder. */
+#cmakedefine HAVE_MF_HC4 1
+
+/* Define to 1 if the number of available CPU cores can be detected with
+   sysconf(_SC_NPROCESSORS_ONLN). */
+#cmakedefine HAVE_NCPU_SYSCONF 1
+
+/* Define to 1 if the number of available CPU cores can be detected with
+   sysctl(). */
+#cmakedefine HAVE_NCPU_SYSCTL 1
+
+/* Define to 1 if getopt.h declares extern int optreset. */
+#cmakedefine HAVE_OPTRESET 1
+
+/* Define to 1 if the amount of physical memory can be detected with
+   sysconf(_SC_PAGESIZE) and sysconf(_SC_PHYS_PAGES). */
+#cmakedefine HAVE_PHYSMEM_SYSCONF 1
+
+/* Define to 1 if the amount of physical memory can be detected with sysctl().
+   */
+#cmakedefine HAVE_PHYSMEM_SYSCTL 1
+
+/* Define if you have POSIX threads libraries and header files. */
+#cmakedefine HAVE_PTHREAD 1
+
+/* Define to 1 if optimizing for size. */
+#cmakedefine HAVE_SMALL 1
+
+/* Define to 1 if stdbool.h conforms to C99. */
+#cmakedefine HAVE_STDBOOL_H 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H 1
+
+/* Define to 1 if `st_atimensec' is member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_ATIMENSEC 1
+
+/* Define to 1 if `st_atimespec.tv_nsec' is member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_ATIMESPEC_TV_NSEC 1
+
+/* Define to 1 if `st_atim.st__tim.tv_nsec' is member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_ATIM_ST__TIM_TV_NSEC 1
+
+/* Define to 1 if `st_atim.tv_nsec' is member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC 1
+
+/* Define to 1 if `st_uatime' is member of `struct stat'. */
+#cmakedefine HAVE_STRUCT_STAT_ST_UATIME 1
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#cmakedefine HAVE_SYS_PARAM_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/sysctl.h> header file. */
+#cmakedefine HAVE_SYS_SYSCTL_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if the system has the type `uintptr_t'. */
+#cmakedefine HAVE_UINTPTR_T 1 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the `utime' function. */
+#cmakedefine HAVE_UTIME 1
+
+/* Define to 1 if you have the `utimes' function. */
+#cmakedefine HAVE_UTIMES 1
+
+/* Define to 1 or 0, depending whether the compiler supports simple visibility
+   declarations. */
+#cmakedefine HAVE_VISIBILITY
+
+/* Define to 1 if the system has the type `_Bool'. */
+#cmakedefine HAVE__BOOL 1
+
+/* Define to 1 to disable debugging code. */
+#cmakedefine NDEBUG 1
+
+/* Define to 1 if your C compiler doesn't accept -c and -o together. */
+#cmakedefine NO_MINUS_C_MINUS_O 1
+
+/* Name of package */
+#cmakedefine PACKAGE "xz"
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "lasse.collin@tukaani.org"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "XZ Utils"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "XZ Utils 4.999.8beta"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "xz"
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "5.0.5"
+
+#define PACKAGE_HOMEPAGE "http://tukaani.org/xz/"
+
+/* Define to necessary symbol if this constant uses a non-standard name on
+   your system. */
+#cmakedefine PTHREAD_CREATE_JOINABLE
+
+/* The size of `size_t', as computed by sizeof. */
+#cmakedefine SIZEOF_SIZE_T @SIZEOF_SIZE_T@
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS 1
+
+/* Version number of package */
+#cmakedefine VERSION
+
+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
+   significant byte first (like Motorola and SPARC, unlike Intel and VAX). */
+#if defined __BIG_ENDIAN__
+# define WORDS_BIGENDIAN 1
+#elif ! defined __LITTLE_ENDIAN__
+# undef WORDS_BIGENDIAN
+#endif
+
+/* Number of bits in a file offset, on hosts where this is settable. */
+#cmakedefine _FILE_OFFSET_BITS
+
+/* Define for large files, on AIX-style hosts. */
+#cmakedefine _LARGE_FILES
+
+/* Define to 1 if on MINIX. */
+#cmakedefine _MINIX
+
+/* Define to 2 if the system does not provide POSIX.1 features except with
+   this defined. */
+#cmakedefine _POSIX_1_SOURCE
+
+/* Define to 1 if you need to in order for `stat' and other things to work. */
+#cmakedefine _POSIX_SOURCE
+
+/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#cmakedefine _UINT32_T
+
+/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#cmakedefine _UINT64_T
+
+/* Define for Solaris 2.5.1 so the uint8_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#cmakedefine _UINT8_T
+
+/* Enable extensions on AIX 3, Interix.  */
+#ifndef _ALL_SOURCE
+# undef _ALL_SOURCE
+#endif
+/* Enable GNU extensions on systems that have them.  */
+#ifndef _GNU_SOURCE
+# undef _GNU_SOURCE
+#endif
+/* Enable threading extensions on Solaris.  */
+#ifndef _POSIX_PTHREAD_SEMANTICS
+# undef _POSIX_PTHREAD_SEMANTICS
+#endif
+/* Enable extensions on HP NonStop.  */
+#ifndef _TANDEM_SOURCE
+# undef _TANDEM_SOURCE
+#endif
+/* Enable general extensions on Solaris.  */
+#ifndef __EXTENSIONS__
+# undef __EXTENSIONS__
+#endif
+
+
+/* Define to rpl_ if the getopt replacement functions and variables should be
+   used. */
+#cmakedefine __GETOPT_PREFIX
+
+/* Define to the type of a signed integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine int32_t
+
+/* Define to the type of a signed integer type of width exactly 64 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine int64_t
+
+/* Define to the type of an unsigned integer type of width exactly 16 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine uint16_t
+
+/* Define to the type of an unsigned integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine uint32_t
+
+/* Define to the type of an unsigned integer type of width exactly 64 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine uint64_t
+
+/* Define to the type of an unsigned integer type of width exactly 8 bits if
+   such a type exists and the standard includes do not define it. */
+#cmakedefine uint8_t
+
+/* Define to the type of an unsigned integer type wide enough to hold a
+   pointer, if such a type exists, and if the system does not define it. */
+#cmakedefine uintptr_t
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "lasse.collin@tukaani.org"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "XZ Utils"
+
+/* Define to the home page for this package. */
+#define PACKAGE_URL "http://tukaani.org/xz/"
+
+/* How many MiB of RAM to assume if the real amount cannot be determined. */
+#define ASSUME_RAM 32
+
+#ifdef __MINGW32__
+#define _POSIX_
+#endif
