diff -Nru cryp3/CMakeLists.txt cryp2/CMakeLists.txt
--- cryp3/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ cryp2/CMakeLists.txt	2011-07-19 11:35:03.107015500 +0200
@@ -0,0 +1,221 @@
+# Copyright (c) 2010-2011 Sergiu Dotenco
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
+
+CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
+PROJECT (cryptopp)
+
+OPTION (CRYPTOPP_FIPS_COMPLIANT "CryptoPP FIPS 140 compliant" OFF)
+OPTION (CRYPTOPP_BUILD_TESTS "Build CryptoPP tests" ON)
+OPTION (CRYPTOPP_BUILD_STATIC_LIBS "Build static CryptoPP libraries" ON)
+OPTION (CRYPTOPP_BUILD_SHARED_LIBS "Build shared CryptoPP libraries" ON)
+OPTION (CRYPTOPP_INSTALL "Create CryptoPP install target" ON)
+
+IF (NOT CRYPTOPP_BUILD_STATIC_LIBS AND CRYPTOPP_BUILD_TESTS)
+  SET (CRYPTOPP_BUILD_STATIC_LIBS ON)
+ENDIF (NOT CRYPTOPP_BUILD_STATIC_LIBS AND CRYPTOPP_BUILD_TESTS)
+
+FILE (GLOB PROJECT_CPP *.cpp)
+FILE (GLOB PROJECT_H *.h)
+FILE (GLOB PROJECT_PCH pch.h)
+
+SET (PROJECT_TEST bench bench2 test validat1 validat2 validat3 adhoc datatest
+  regtest fipsalgt fipstest)
+
+IF (WIN32)
+  LIST (APPEND PROJECT_TEST dlltest)
+ENDIF (WIN32)
+
+SET (PROJECT_TEST_CPP)
+
+FOREACH (_PROJECT_TEST_FILE ${PROJECT_TEST})
+  FOREACH (_PROJECT_FILE ${PROJECT_CPP})
+    IF (${_PROJECT_FILE} MATCHES ".*${_PROJECT_TEST_FILE}\\.cpp$")
+      LIST (REMOVE_ITEM PROJECT_CPP ${_PROJECT_FILE})
+    ENDIF (${_PROJECT_FILE} MATCHES ".*${_PROJECT_TEST_FILE}\\.cpp$")
+  ENDFOREACH (_PROJECT_FILE)
+  LIST (APPEND PROJECT_TEST_CPP ${_PROJECT_TEST_FILE}.cpp)
+ENDFOREACH(_PROJECT_TEST_FILE)
+
+SET (PROJECT_CPP_LIB ${PROJECT_CPP})
+SET (PROJECT_CPP_SHARED ${PROJECT_CPP})
+
+LIST (APPEND PROJECT_CPP_SHARED ${CMAKE_CURRENT_SOURCE_DIR}/fipstest.cpp)
+LIST (REMOVE_ITEM PROJECT_CPP_SHARED ${CMAKE_CURRENT_SOURCE_DIR}/ttmac.cpp)
+
+FOREACH (_PROJECT_FILE ${PROJECT_CPP_LIB})
+  IF (${_PROJECT_FILE} MATCHES ".*dll.+\\.cpp$")
+    LIST (REMOVE_ITEM PROJECT_CPP_LIB ${_PROJECT_FILE})
+  ENDIF (${_PROJECT_FILE} MATCHES ".*dll.+\\.cpp$")
+ENDFOREACH (_PROJECT_FILE)
+
+IF (CMAKE_CXX_COMPILER MATCHES "icl.*$")
+  SET (CXX_COMPILER_IS_INTEL ON)
+ENDIF (CMAKE_CXX_COMPILER MATCHES "icl.*$")
+
+IF (CMAKE_C_COMPILER MATCHES "icl.*$")
+  SET (C_COMPILER_IS_INTEL ON)
+ENDIF (CMAKE_C_COMPILER MATCHES "icl.*$")
+
+IF (CXX_COMPILER_IS_INTEL)
+  # Intel compiler
+  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -EHsc -wd811 -Qopenmp")
+  SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ox")
+ENDIF (CXX_COMPILER_IS_INTEL)
+
+ADD_DEFINITIONS (-DCRYPTOPP_DISABLE_ASM)
+REMOVE_DEFINITIONS (-DUNICODE -D_UNICODE)
+
+IF (MINGW)
+  SET (CMAKE_RC_COMPILER_INIT windres)
+  ENABLE_LANGUAGE (RC)
+    SET (CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> -O coff -i <SOURCE> -o <OBJECT>")
+ENDIF (MINGW)
+
+IF (WIN32)
+  LIST (APPEND PROJECT_CPP_SHARED cryptopp.rc)
+ENDIF (WIN32)
+
+IF (CRYPTOPP_BUILD_SHARED_LIBS)
+  ADD_LIBRARY (cryptopp SHARED ${PROJECT_CPP_SHARED} ${PROJECT_H}
+    ${PROJECT_PCH})
+ENDIF (CRYPTOPP_BUILD_SHARED_LIBS)
+
+IF (CRYPTOPP_BUILD_STATIC_LIBS)
+  ADD_LIBRARY (cryptlib STATIC ${PROJECT_CPP_LIB} ${PROJECT_H} ${PROJECT_PCH})
+ENDIF (CRYPTOPP_BUILD_STATIC_LIBS)
+
+IF (CRYPTOPP_BUILD_TESTS)
+  ADD_EXECUTABLE (crypttest ${PROJECT_TEST_CPP})
+
+  IF (CMAKE_COMPILER_IS_GNUCXX)
+    SET_TARGET_PROPERTIES (crypttest PROPERTIES LINK_FLAGS -pthread)
+  ENDIF (CMAKE_COMPILER_IS_GNUCXX)
+
+  IF (WIN32)
+    ADD_EXECUTABLE (dlltest dlltest.cpp)
+  ENDIF (WIN32)
+ENDIF (CRYPTOPP_BUILD_TESTS)
+
+SET (_CRYPTOPP_COMPILE_DEFINITIONS USE_PRECOMPILED_HEADERS)
+
+IF (CRYPTOPP_FIPS_COMPLIANT)
+  LIST (APPEND _CRYPTOPP_COMPILE_DEFINITIONS
+    CRYPTOPP_ENABLE_COMPLIANCE_WITH_FIPS_140_2=1)
+ELSE (CRYPTOPP_FIPS_COMPLIANT)
+  LIST (APPEND _CRYPTOPP_COMPILE_DEFINITIONS
+    CRYPTOPP_ENABLE_COMPLIANCE_WITH_FIPS_140_2=0)
+ENDIF (CRYPTOPP_FIPS_COMPLIANT)
+
+IF (CRYPTOPP_BUILD_STATIC_LIBS)
+  LIST (APPEND _CRYPTOPP_INSTALL_TARGETS cryptlib)
+ENDIF (CRYPTOPP_BUILD_STATIC_LIBS)
+
+IF (CRYPTOPP_BUILD_SHARED_LIBS)
+  LIST (APPEND _CRYPTOPP_INSTALL_TARGETS cryptopp)
+ENDIF (CRYPTOPP_BUILD_SHARED_LIBS)
+
+IF (MSVC)
+  SET_TARGET_PROPERTIES (${_CRYPTOPP_INSTALL_TARGETS} PROPERTIES
+    COMPILE_DEFINITIONS "${_CRYPTOPP_COMPILE_DEFINITIONS}")
+  # Setup precompiled headers
+  #SET_TARGET_PROPERTIES (${_CRYPTOPP_INSTALL_TARGETS} PROPERTIES COMPILE_FLAGS
+  #  -Yupch.h)
+  #SET_SOURCE_FILES_PROPERTIES (pch.cpp PROPERTIES COMPILE_FLAGS -Yc)
+  # These files don't use precompiled headers
+  #SET_SOURCE_FILES_PROPERTIES (dll.cpp cryptlib_bds.cpp iterhash.cpp
+  #  PROPERTIES COMPILE_FLAGS -Y-)
+ENDIF (MSVC)
+
+IF (_CRYPTOPP_INSTALL_TARGETS AND WIN32)
+  SET_TARGET_PROPERTIES (${_CRYPTOPP_INSTALL_TARGETS} PROPERTIES DEFINE_SYMBOL
+    CRYPTOPP_EXPORTS)
+ENDIF (_CRYPTOPP_INSTALL_TARGETS AND WIN32)
+
+IF (WIN32)
+  GET_TARGET_PROPERTY (_TEMP cryptopp COMPILE_DEFINITIONS)
+  LIST (APPEND _TEMP _USRDLL)
+
+  IF (CRYPTOPP_BUILD_SHARED_LIBS)
+    SET_TARGET_PROPERTIES (cryptopp PROPERTIES COMPILE_DEFINITIONS "${_TEMP}")
+    SET_TARGET_PROPERTIES (cryptopp PROPERTIES DEBUG_POSTFIX d)
+  ENDIF (CRYPTOPP_BUILD_SHARED_LIBS)
+
+  IF (CRYPTOPP_BUILD_STATIC_LIBS)
+    SET_TARGET_PROPERTIES (cryptlib PROPERTIES DEBUG_POSTFIX d)
+  ENDIF (CRYPTOPP_BUILD_STATIC_LIBS)
+
+  IF (CRYPTOPP_BUILD_TESTS)
+    SET_TARGET_PROPERTIES (crypttest PROPERTIES COMPILE_DEFINITIONS _CONSOLE)
+
+    SET (_TEMP CRYPTOPP_DLL_ONLY _CONSOLE)
+    SET_TARGET_PROPERTIES (dlltest PROPERTIES COMPILE_DEFINITIONS
+      "${_TEMP}")
+  ENDIF (CRYPTOPP_BUILD_TESTS)
+ENDIF (WIN32)
+
+IF (CRYPTOPP_BUILD_TESTS)
+  TARGET_LINK_LIBRARIES (crypttest cryptlib cryptopp)
+
+  IF (WIN32)
+    TARGET_LINK_LIBRARIES (dlltest cryptopp)
+  ENDIF (WIN32)
+ENDIF (CRYPTOPP_BUILD_TESTS)
+
+IF (CRYPTOPP_BUILD_SHARED_LIBS)
+  SET_TARGET_PROPERTIES (cryptopp PROPERTIES PUBLIC_HEADER "${PROJECT_H}")
+ENDIF (CRYPTOPP_BUILD_SHARED_LIBS)
+
+IF (CRYPTOPP_BUILD_STATIC_LIBS)
+  SET_TARGET_PROPERTIES (cryptlib PROPERTIES PUBLIC_HEADER "${PROJECT_H}")
+ENDIF (CRYPTOPP_BUILD_STATIC_LIBS)
+
+IF (WIN32)
+  IF (CRYPTOPP_BUILD_SHARED_LIBS)
+    TARGET_LINK_LIBRARIES (cryptopp Ws2_32)
+  ENDIF (CRYPTOPP_BUILD_SHARED_LIBS)
+
+  IF (CRYPTOPP_BUILD_STATIC_LIBS)
+    TARGET_LINK_LIBRARIES (cryptlib Ws2_32)
+  ENDIF (CRYPTOPP_BUILD_STATIC_LIBS)
+ENDIF (WIN32)
+
+IF (CRYPTOPP_INSTALL AND _CRYPTOPP_INSTALL_TARGETS)
+  INSTALL (TARGETS ${_CRYPTOPP_INSTALL_TARGETS}
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+    PUBLIC_HEADER DESTINATION include/cryptopp)
+  install(FILES FindCryptoPP.cmake DESTINATION share/apps/cmake/modules)
+ENDIF (CRYPTOPP_INSTALL AND _CRYPTOPP_INSTALL_TARGETS)
+
+IF (CMAKE_COMPILER_IS_GNUCXX)
+  SET (CMAKE_CXX_FLAGS_RELEASE
+    "${CMAKE_CXX_FLAGS_RELEASE} -finline-functions -O3")
+ENDIF (CMAKE_COMPILER_IS_GNUCXX)
+
+IF (MSVC)
+  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Oi")
+  SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox /Ot /GS- /Ob2")
+ENDIF (MSVC)
+
+IF (CRYPTOPP_BUILD_TESTS)
+  ENABLE_TESTING ()
+  ADD_TEST (v crypttest v)
+ENDIF (CRYPTOPP_BUILD_TESTS)
--- a   1970-01-01 01:00:00.000000000 +0100
+++ b/FindCryptoPP.cmake  2011-07-20 13:59:24.771144300 +0200
@@ -0,0 +1,115 @@
+# Module for locating the CryptoPP encryption library.
+#
+# Cutomizable variables:
+#   CRYPTOPP_ROOT_DIR
+#     This variable points to the CryptoPP root directory. On Windows the
+#     library location typically will have to be provided explicitly using the
+#     -D command-line option. The directory should include the include/cryptopp,
+#     lib and/or bin sub-directories.
+#
+# Read-Only variables:
+#   CRYPTOPP_FOUND
+#     Indicates whether the library has been found.
+#
+#   CRYPTOPP_INCLUDE_DIRS
+#     Points to the CryptoPP include directory.
+#
+#   CRYPTOPP_LIBRARIES
+#     Points to the CryptoPP libraries that should be passed to
+#     target_link_libararies.
+#
+#
+# Copyright (c) 2010, 2011 Sergiu Dotenco
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+# SOFTWARE.
+
+INCLUDE (FindPackageHandleStandardArgs)
+
+SET (_CRYPTOPP_POSSIBLE_DIRS ${CRYPTOPP_ROOT_DIR})
+SET (_CRYPTOPP_POSSIBLE_INCLUDE_SUFFIXES include)
+SET (_CRYPTOPP_POSSIBLE_LIB_SUFFIXES lib)
+
+FIND_PATH (CRYPTOPP_ROOT_DIR
+  NAMES include/cryptopp/cryptlib.h
+  PATHS ${_CRYPTOPP_POSSIBLE_DIRS}
+  DOC "CryptoPP root directory")
+
+# Re-use the previous path:
+FIND_PATH (CRYPTOPP_INCLUDE_DIR
+  NAMES cryptopp/cryptlib.h
+  PATHS ${CRYPTOPP_ROOT_DIR}
+  PATH_SUFFIXES ${_CRYPTOPP_POSSIBLE_INCLUDE_SUFFIXES}
+  DOC "CryptoPP include directory")
+
+FIND_LIBRARY (CRYPTOPP_LIBRARY_DEBUG
+  NAMES  cryptlibd cryptoppd
+  PATHS ${CRYPTOPP_ROOT_DIR}
+  PATH_SUFFIXES ${_CRYPTOPP_POSSIBLE_LIB_SUFFIXES}
+  DOC "CryptoPP debug library")
+
+FIND_LIBRARY (CRYPTOPP_LIBRARY_RELEASE
+  NAMES cryptlib cryptopp
+  PATHS ${CRYPTOPP_ROOT_DIR}
+  PATH_SUFFIXES ${_CRYPTOPP_POSSIBLE_LIB_SUFFIXES}
+  DOC "CryptoPP release library")
+
+MARK_AS_ADVANCED (CRYPTOPP_LIBRARY_DEBUG CRYPTOPP_LIBRARY_RELEASE)
+
+IF (NOT DEFINED CRYPTOPP_LIBRARIES)
+  IF (CRYPTOPP_LIBRARY_DEBUG AND CRYPTOPP_LIBRARY_RELEASE)
+    SET (CRYPTOPP_LIBRARIES
+      optimized ${CRYPTOPP_LIBRARY_RELEASE}
+      debug ${CRYPTOPP_LIBRARY_DEBUG})
+  ELSEIF (CRYPTOPP_LIBRARY_RELEASE)
+    SET (CRYPTOPP_LIBRARIES ${CRYPTOPP_LIBRARY_RELEASE})
+  ELSEIF (CRYPTOPP_LIBRARY_DEBUG)
+    SET (CRYPTOPP_LIBRARIES ${CRYPTOPP_LIBRARY_DEBUG})
+  ENDIF (CRYPTOPP_LIBRARY_DEBUG AND CRYPTOPP_LIBRARY_RELEASE)
+ENDIF (NOT DEFINED CRYPTOPP_LIBRARIES)
+
+IF (CRYPTOPP_INCLUDE_DIR)
+  SET (CRYPTOPP_INCLUDE_DIRS ${CRYPTOPP_INCLUDE_DIR})
+
+  SET (_CRYPTOPP_VERSION_HEADER ${CRYPTOPP_INCLUDE_DIR}/cryptopp/config.h)
+
+  IF (EXISTS ${_CRYPTOPP_VERSION_HEADER})
+    FILE (STRINGS ${_CRYPTOPP_VERSION_HEADER} _CRYPTOPP_VERSION_TMP REGEX
+      "^#define CRYPTOPP_VERSION[ \t]+[0-9]+$")
+
+    STRING (REGEX REPLACE
+      "^#define CRYPTOPP_VERSION[ \t]+([0-9]+)" "\\1" _CRYPTOPP_VERSION_TMP
+      ${_CRYPTOPP_VERSION_TMP})
+
+    STRING (REGEX REPLACE "([0-9]+)[0-9][0-9]" "\\1" CRYPTOPP_VERSION_MAJOR
+      ${_CRYPTOPP_VERSION_TMP})
+    STRING (REGEX REPLACE "[0-9]([0-9])[0-9]" "\\1" CRYPTOPP_VERSION_MINOR
+      ${_CRYPTOPP_VERSION_TMP})
+    STRING (REGEX REPLACE "[0-9][0-9]([0-9])" "\\1" CRYPTOPP_VERSION_PATCH
+      ${_CRYPTOPP_VERSION_TMP})
+
+    SET (CRYPTOPP_VERSION_COUNT 3)
+    SET (CRYPTOPP_VERSION
+      ${CRYPTOPP_VERSION_MAJOR}.${CRYPTOPP_VERSION_MINOR}.${CRYPTOPP_VERSION_PATCH})
+  ENDIF (EXISTS ${_CRYPTOPP_VERSION_HEADER})
+ENDIF (CRYPTOPP_INCLUDE_DIR)
+
+MARK_AS_ADVANCED (CRYPTOPP_INCLUDE_DIR)
+
+FIND_PACKAGE_HANDLE_STANDARD_ARGS (CryptoPP REQUIRED_VARS CRYPTOPP_INCLUDE_DIRS
+  CRYPTOPP_LIBRARIES VERSION_VAR CRYPTOPP_VERSION)
--- cryptopp.rc.orig    2011-08-01 21:32:54.236877500 +0200
+++ b/cryptopp.rc 2011-08-01 21:31:20.286503800 +0200
@@ -7,8 +7,11 @@
 //
 // Generated from the TEXTINCLUDE 2 resource.
 //
+#ifndef __GNUC__
 #include "winres.h"
-
+#else
+#include "windows.h"
+#endif
 /////////////////////////////////////////////////////////////////////////////
 #undef APSTUDIO_READONLY_SYMBOLS
 
