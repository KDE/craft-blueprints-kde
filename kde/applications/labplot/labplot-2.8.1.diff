diff --git a/org.kde.labplot2.appdata.xml b/org.kde.labplot2.appdata.xml
index 9a5f6a29b..a069fbc1b 100644
--- a/org.kde.labplot2.appdata.xml
+++ b/org.kde.labplot2.appdata.xml
@@ -201,4 +201,9 @@
   <provides>
     <binary>labplot2</binary>
   </provides>
+  <content_rating type="oars-1.1" />
+  <releases>
+    <release version="2.8.1" date="2020-11-13"/>
+    <release version="2.8.0" date="2020-09-16"/>
+  </releases>
 </component>
diff --git a/ChangeLog b/ChangeLog
index 9b501c1c2..d1e509ea1 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+-----2.9.0 -----
+-----2.8.2 -----
+Bug fixes:
+	* [CAS] fixed the regression introduced after the python2 backend was deprecated in Cantor
+	* BUG 427190 - Fixed resetting parser error count on some platforms (Debian, Manjaro)
+	* BUG 429110 - Support semicolon as function argument separator for locale with comma as decimal separator
+	* BUG 429368 - Fix validation of custom model equation in fit dock
 -----2.8.1 -----
 	* [worksheet] allow to change the background color for axis labels (default: transparent)
 	* [worksheet] allow to copy the plot cursor cordinates
diff --git a/src/backend/cantorWorksheet/VariableParser.cpp b/src/backend/cantorWorksheet/VariableParser.cpp
index a3c9a2db9..1f240ce62 100644
--- a/src/backend/cantorWorksheet/VariableParser.cpp
+++ b/src/backend/cantorWorksheet/VariableParser.cpp
@@ -38,9 +38,9 @@ VariableParser::VariableParser(QString name, QString value)
 	PERFTRACE("parsing variable");
 	if (m_backendName.compare(QStringLiteral("Maxima"), Qt::CaseInsensitive) == 0)
 		parseMaximaValues();
-	else if (m_backendName.compare(QStringLiteral("Python 3"), Qt::CaseInsensitive) == 0)
-		parsePythonValues();
-	else if (m_backendName.compare(QStringLiteral("Python 2"), Qt::CaseInsensitive) == 0)
+	else if ( (m_backendName.compare(QStringLiteral("Python"), Qt::CaseInsensitive) == 0)
+			|| (m_backendName.compare(QStringLiteral("Python 3"), Qt::CaseInsensitive) == 0)
+			|| (m_backendName.compare(QStringLiteral("Python 2"), Qt::CaseInsensitive) == 0) )
 		parsePythonValues();
 	else if (m_backendName.compare(QStringLiteral("Sage"), Qt::CaseInsensitive) == 0)
 		parsePythonValues();
diff --git a/src/backend/gsl/parser.y b/src/backend/gsl/parser.y
index 033d814a3..0fec18082 100644
--- a/src/backend/gsl/parser.y
+++ b/src/backend/gsl/parser.y
@@ -102,6 +102,9 @@ expr:      NUM       { $$ = $1;                            }
 | FNCT '(' expr ',' expr ')'  { $$ = (*((func_t2)($1->value.fnctptr)))($3,$5); }
 | FNCT '(' expr ',' expr ','expr ')'  { $$ = (*((func_t3)($1->value.fnctptr)))($3,$5,$7); }
 | FNCT '(' expr ',' expr ',' expr ','expr ')'  { $$ = (*((func_t4)($1->value.fnctptr)))($3,$5,$7,$9); }
+| FNCT '(' expr ';' expr ')'  { $$ = (*((func_t2)($1->value.fnctptr)))($3,$5); }
+| FNCT '(' expr ';' expr ';'expr ')'  { $$ = (*((func_t3)($1->value.fnctptr)))($3,$5,$7); }
+| FNCT '(' expr ';' expr ';' expr ';'expr ')'  { $$ = (*((func_t4)($1->value.fnctptr)))($3,$5,$7,$9); }
 | expr '+' expr      { $$ = $1 + $3;                       }
 | expr '-' expr      { $$ = $1 - $3;                       }
 | expr '*' expr      { $$ = $1 * $3;                       }
@@ -298,6 +298,7 @@ double parse(const char* string, const char* locale) {
 
 	/* parameter for yylex */
 	res = NAN;	/* default value */
+	yynerrs = 0;	/* reset error count */
 	yyparse(&p);
 
 	pdebug("PARSER: parse() DONE (result = %g, errors = %d)\n*******************************\n", res, parse_errors());
diff --git a/src/kdefrontend/dockwidgets/XYFitCurveDock.cpp b/src/kdefrontend/dockwidgets/XYFitCurveDock.cpp
index 3c28f9e4c..625d35fc4 100644
--- a/src/kdefrontend/dockwidgets/XYFitCurveDock.cpp
+++ b/src/kdefrontend/dockwidgets/XYFitCurveDock.cpp
@@ -923,7 +923,7 @@ void XYFitCurveDock::updateParameterList() {
 
 	ExpressionParser* parser = ExpressionParser::getInstance();
 	QStringList vars; // variables that are known
-	vars << "x";	//TODO: others?
+	vars << "x";	//TODO: generalize when we support other XYEquationCurve::EquationType
 	m_fitData.paramNames = m_fitData.paramNamesUtf8 = parser->getParameter(m_fitData.model, vars);
 
 	// if number of parameter changed
@@ -955,8 +955,10 @@ void XYFitCurveDock::updateParameterList() {
 void XYFitCurveDock::parametersChanged(bool updateParameterWidget) {
 	DEBUG("XYFitCurveDock::parametersChanged() m_initializing = " << m_initializing);
 
-	//parameter names were (probably) changed -> set the new names in EquationTextEdit
-	uiGeneralTab.teEquation->setVariables(m_fitData.paramNames);
+	//parameter names were (probably) changed -> set the new vars in ExpressionTextEdit teEquation
+	QStringList vars{m_fitData.paramNames};
+	vars << "x";	//TODO: generalize when we support other XYEquationCurve::EquationType
+	uiGeneralTab.teEquation->setVariables(vars);
 
 	if (m_initializing)
 		return;
